{"version":3,"sources":["views/Lottery/helpers/CountdownHelpers.ts","views/Lottery/components/LotteryProgress.tsx","views/Lottery/components/Hero.tsx","views/Lottery/components/WinningNumbers.tsx","views/Lottery/components/PrizeGrid.tsx","views/Lottery/components/TotalPrizesCard/index.tsx","views/Lottery/components/Loading.tsx","views/Lottery/components/TicketCard/UserTicketsModal.tsx","views/Lottery/components/YourPrizesCard/PrizesWonContent.tsx","views/Lottery/components/YourPrizesCard/NoPrizesContent.tsx","views/Lottery/components/YourPrizesCard/index.tsx","views/Lottery/components/UnlockWalletCard.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx","views/Lottery/components/TicketCard/PurchaseWarningModal.tsx","views/Lottery/components/TicketCard/TicketActions.tsx","views/Lottery/components/TicketCard/index.tsx","views/Lottery/components/HowItWorks.tsx","views/Lottery/components/PastLotteryRoundViewer/PastLotterySearcher.tsx","views/Lottery/components/PastLotteryRoundViewer/PastRoundCardError.tsx","views/Lottery/components/LotteryCardHeading.tsx","views/Lottery/components/PastLotteryRoundViewer/PastLotteryActions.tsx","views/Lottery/helpers/formatLotteryDate.ts","views/Lottery/components/Timestamp.tsx","views/Lottery/components/PastLotteryRoundViewer/PastRoundCardDetails.tsx","views/Lottery/components/PastLotteryRoundViewer/PastRoundCard.tsx","views/Lottery/components/PastLotteryRoundViewer/index.tsx","views/Lottery/components/PastDrawsHistory/HistoryChart.tsx","views/Lottery/components/PastDrawsHistory/Legend.tsx","views/Lottery/components/PastDrawsHistory/PastDrawsHistoryCard.tsx","views/Lottery/Lottery.tsx"],"names":["hoursAndMinutesString","hours","minutes","parseInt","getTicketSaleTime","currentMillis","msUntilNextTicketSale","getNextTicketSaleTime","getTimePeriods","getTimeRemainDraw","endTime","now","Date","getTime","setDate","getDate","remain","hh","pad","Math","floor","mm","num","concat","toString","substr","ProgressWrapper","styled","div","TopTextWrapper","BottomTextWrapper","StyledPrimaryText","Text","LotteryProgress","fastRefresh","useRefresh","useState","timeRemainDraw","setTimeRemainDraw","timeRemainSale","setTimeRemainSale","percentRemain","setPercentRemain","TranslateString","useI18n","lotteryHasDrawn","useGetLotteryHasDrawn","useCurrentTime","useEffect","a","timeEndLottery","timeStartLottery","axios","get","BASE_API_ADMIN","data","setHours","timeDrawLottery","timeStartNewPhase","fetchTimeLottery","primaryStep","secondaryStep","fontSize","bold","color","Title","Heading","attrs","as","size","Blurb","StyledHero","StyledContainer","Container","theme","mediaQueries","sm","LeftWrapper","lg","RightWrapper","ContentDes","Hero","src","alt","CardBodyNew","Link","Row","RowNoPadding","Column","CenteredText","CenteredTextWithPadding","TicketNumberBox","StyledCardHeader","CardWrapper","props","colors","secondary","StyledCardContentInner","WinningNumbers","account","useWeb3React","winNumbers","useWinningNumbers","MatchedNumber4","useMatchingRewardLength","MatchedNumber3","MatchedNumber2","style","map","number","index","href","target","Grid","pastDraw","RightAlignedText","RightAlignedHeading","GridItem","marginBottom","PastDrawGridItem","PrizeGrid","lotteryPrizeAmount","jackpotMatches","twoTicketMatches","threeTicketMatches","fourMatchesAmount","toFixed","threeMatchesAmount","twoMatchesAmount","burnAmount","cakeBusdPrice","usePriceLuckyBusd","getCakeBusdValue","amount","BigNumber","multipliedBy","toNumber","textShadow","toLocaleString","eq","CardBusdValue","value","BoxTotal","CardHeading","Right","Left","IconWrapper","PrizeCountWrapper","ExpandingWrapper","showFooter","BoxLucky","Dollar","TotalPrizesCard","indexRoute","setIndexRoute","setShowFooter","getBalanceNumber","useTotalRewards","lotteryPrizeAmountBusd","lotteryPrizeWithCommaSeparators","currentLotteryNumber","useContext","PastLotteryDataContext","lotteryContract","useContract","getLotteryAddress","lotteryAbi","getLotteryIssueIndex","fetchLotteryIndex","mb","alignItems","justifyContent","height","width","fontWeight","ExpandableSectionButton","onClick","expanded","className","StyledLoading","Loading","RewardP","TicketsList","primary","StyledButton","Button","spacing","UserTicketsModal","myTicketNumbers","onDismiss","from","rewardMatch","useCallback","n","i","length","listItems","emoji","Array","join","title","TICKETS","variant","WinningsWrapper","StyledCardActions","PrizesWonContent","requestedClaim","setRequestedClaim","useTotalClaim","claimLoading","claimAmount","onMultiClaim","useMultiClaimLottery","tickets","useTickets","useModal","onPresentMyTickets","addTransaction","useTransactionAdder","handleClaim","txHash","summary","console","error","winnings","marginRight","disabled","Wrapper","TextWrapper","StyledText","Image","img","md","NoPrizesContent","StyledCard","Card","isDisabled","textDisabled","YourPrizesCard","isAWin","isActive","StyledCardBody","CardBody","StyledHeading","UnlockWalletCard","UnlockButton","BuyTicketModal","max","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","getFullDisplayBalance","maxTickets","LOTTERY_TICKET_PRICE","onMultiBuy","useMultiBuyLottery","maxNumber","useMaxNumber","handleBuy","numbers","apply","random","multiBuy","times","pow","then","response","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","TicketInput","onSelectMax","onChange","e","currentTarget","symbol","availableSymbol","Tips","Announce","Final","ModalActions","id","WarningModal","newTransactionsFirst","b","addedTime","spinnerIcon","spin","CardActions","Dflex","TicketCard","balanceToken","setBalanceToken","setTickets","allowance","setAllowance","chainId","contractBEP20","XLUCKY_TESTNET_ADDRESSES","bep20Abi","useContractTemp","ticketsContract","getLotteryTicketAddress","lotteryTicketAbi","ticketsLength","PurchaseWarningModal","tokenName","onPresentBuy","listenApproveEvent","useUtilityToken","getTickets","res","fetchBalance","fetchApprovalData","log","balanceOf","catch","requestedApproval","setRequestedApproval","useApproveCallbackCustom","approval","onAttemptToApprove","handleApprove","allTransactions","useAllTransactions","sortedRecentTransactions","Object","values","filter","isTransactionRecent","sort","getStatus","tx","receipt","hash","isSecondCard","CardHeader","TicketCountWrapper","TicketActions","LayoutWrapper","StyledLink","HowItWorks","SearchWrapper","InputWrapper","ButtonWrapper","PastLotterySearcher","initialLotteryNumber","onSubmit","lotteryNumber","setLotteryNumber","isError","setIsError","evt","preventDefault","type","isWarning","scale","PastRoundCardError","p","message","LotteryCardHeading","valueToDisplay","children","Icon","flexDirection","defaultProps","ExternalLinkWrap","LinkExternal","contractLink","SCAN_SITES","formatLotteryDate","lotteryDate","date","dateString","toDateString","getUTCHours","monthAndDay","split","splice","Timestamp","timeValue","TopLotteryCardHeading","BoxCard","PastRoundCardDetails","jackpotTicket","lotteryNumbers","match1Ticket","match2Ticket","match3Ticket","poolSize","oneTicketMatches","PastLotteryActions","FullWidth","PastRoundCard","PastLotteryRoundViewer","roundData","isInitialized","isLoading","state","setState","useGetRecentLotteryRoundData","initialLotteryData","mostRecentLotteryNumber","prevState","handleSubmit","getLotteryRoundData","Line","lazy","InnerWrapper","HistoryChart","historyData","historyError","getDataArray","kind","dataPoint","reverse","lineStyles","borderColor","fill","borderWidth","pointRadius","pointHitRadius","chartData","labels","datasets","label","yAxisID","axesStyles","borderCapStyle","gridLines","display","ticks","fontFamily","fontColor","lineHeight","maxRotation","beginAtZero","autoSkipPadding","userCallback","options","legend","scales","yAxes","position","xAxes","fallback","LegendItem","Circle","isPoolSize","Legend","PastDrawsHistoryCard","SecondCardColumnWrapper","Lottery","setHistoryData","setHistoryError","setCurrentLotteryNumber","setMostRecentLotteryNumber","fetch","json","previousLotteryNumber","getInitialLotteryIndex","Page","Provider"],"mappings":"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","file":"static/js/21.f2d1f1d2.chunk.js","sourcesContent":["import getTimePeriods from 'utils/getTimePeriods'\n\n// lottery draws UTC: 02:00 (10:00 SGT), 14:00 (22:00 SGT)\nconst lotteryDrawHoursUtc = [2, 14]\n\nconst getClosestLotteryHour = (currentHour) => {\n  switch (true) {\n    case currentHour < lotteryDrawHoursUtc[0] || currentHour >= lotteryDrawHoursUtc[1]:\n      return lotteryDrawHoursUtc[0]\n    case currentHour < lotteryDrawHoursUtc[1]:\n      return lotteryDrawHoursUtc[1]\n    default:\n      return 0\n  }\n}\n\nconst getNextLotteryDrawTime = (currentMillis) => {\n  const date = new Date(currentMillis)\n  const currentHour = date.getUTCHours()\n  const nextLotteryHour = getClosestLotteryHour(currentHour)\n  // next lottery is tomorrow if the next lottery is at 2am UTC...\n  // ...and current time is between 02:00am & 23:59pm UTC\n  const nextLotteryIsTomorrow = nextLotteryHour === 2 && currentHour >= 2 && currentHour <= 23\n  let millisTimeOfNextDraw\n\n  if (nextLotteryIsTomorrow) {\n    const tomorrow = new Date(currentMillis)\n    const nextDay = tomorrow.getUTCDate() + 1\n    tomorrow.setUTCDate(nextDay)\n    millisTimeOfNextDraw = tomorrow.setUTCHours(nextLotteryHour, 0, 0, 0)\n  } else {\n    millisTimeOfNextDraw = date.setUTCHours(nextLotteryHour, 0, 0, 0)\n  }\n\n  return millisTimeOfNextDraw\n}\n\n// @ts-ignore\nconst getNextTicketSaleTime = (currentMillis) => (parseInt(currentMillis / 3600000) + 1) * 3600000\nconst hoursAndMinutesString = (hours, minutes) => `${parseInt(hours)}h, ${parseInt(minutes)}m`\n\nexport const getTicketSaleTime = (currentMillis): string => {\n  const nextTicketSaleTime = getNextTicketSaleTime(currentMillis)\n  const msUntilNextTicketSale = nextTicketSaleTime - currentMillis\n  const { minutes } = getTimePeriods(msUntilNextTicketSale / 1000)\n  const { hours } = getTimePeriods(msUntilNextTicketSale / 1000)\n  return hoursAndMinutesString(hours, minutes)\n}\n\nexport const getLotteryDrawTime = (currentMillis): string => {\n  const nextLotteryDrawTime = getNextLotteryDrawTime(currentMillis)\n  const msUntilLotteryDraw = nextLotteryDrawTime - currentMillis\n  const { minutes } = getTimePeriods(msUntilLotteryDraw / 1000)\n  const { hours } = getTimePeriods(msUntilLotteryDraw / 1000)\n  return hoursAndMinutesString(hours, minutes)\n}\n\nexport const getTicketSaleStep = () => (1 / 12) * 100\n\nexport const getLotteryDrawStep = (currentMillis) => {\n  const msBetweenLotteries = 43200000 * 2\n  const endTime = getNextLotteryDrawTime(currentMillis)\n  const msUntilLotteryDraw = endTime - currentMillis\n  const percentageRemaining = (msUntilLotteryDraw / msBetweenLotteries) * 100\n  return 100 - percentageRemaining\n}\n\nexport const getTimeRemainDraw = (endTime: Date) => {\n  const now = new Date();\n  if (now.getTime() > endTime.getTime()){\n    endTime.setDate(endTime.getDate() + 1);\n  }\n  const remain = ((endTime.getTime() - now.getTime()) / 1000);\n  const hh = pad(Math.floor((remain / 60 / 60) % 60));\n  const mm = pad(Math.floor((remain / 60) % 60));\n\n  return `${hh}h: ${mm}m`;\n}\nfunction pad(num) {\n  return (\"0\".concat(num.toString())).substr(-2);\n}","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Text, Progress } from '@luckyswap/uikit'\nimport axios from 'axios'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport { useCurrentTime } from 'hooks/useTimer'\nimport { BASE_API_ADMIN } from 'config'\nimport useRefresh from 'hooks/useRefresh'\nimport {\n  getLotteryDrawTime,\n  getLotteryDrawStep,\n  getTicketSaleTime,\n  getTicketSaleStep,\n  getTimeRemainDraw,\n} from '../helpers/CountdownHelpers'\n\nconst ProgressWrapper = styled.div`\n  display: block;\n  width: 100%;\n`\n\nconst TopTextWrapper = styled.div`\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`\n\nconst BottomTextWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`\n\nconst StyledPrimaryText = styled(Text)`\n  margin-right: 16px;\n`\n// const timeEndLottery = new Date;\n// timeEndLottery.setHours(23, 0, 0);\n\n// const timeStartLottery = new Date;\n// timeStartLottery.setHours(24, 0, 0);\n\n// const timeStartLottery = new Date(19, 0, 0);\n\nconst LotteryProgress = () => {\n  const { fastRefresh } = useRefresh()\n  const [timeRemainDraw, setTimeRemainDraw] = useState(\"\");\n  const [timeRemainSale, setTimeRemainSale] = useState(\"\");\n  const [percentRemain, setPercentRemain] = useState(0)\n  \n\n  const TranslateString = useI18n()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const currentMillis = useCurrentTime()  \n\n\n  useEffect(() => {\n    const fetchTimeLottery = async () => {\n      const timeEndLottery = new Date();\n      const timeStartLottery = new Date();\n      const {data} = await axios.get(`${BASE_API_ADMIN}/lotteries`);\n\n      // set time remain to end lottery phase\n      timeEndLottery.setHours(data[0].timeDrawLottery.hh, data[0].timeDrawLottery.mm, 0);\n      setTimeRemainDraw(getTimeRemainDraw(timeEndLottery));\n\n      // set time remain to start new lottery phase\n      timeStartLottery.setHours(data[0].timeStartNewPhase.hh, data[0].timeStartNewPhase.mm, 0);\n      setTimeRemainSale(getTimeRemainDraw(timeStartLottery));\n\n      if (lotteryHasDrawn){\n        setPercentRemain( 100 - ((timeStartLottery.getTime() - currentMillis) * 100 / 86400000));\n      }\n      else \n        setPercentRemain( 100 - ((timeEndLottery.getTime() - currentMillis) * 100 / 86400000));\n\n    }\n    fetchTimeLottery();\n  },[fastRefresh, lotteryHasDrawn, currentMillis])\n\n  return (\n    <ProgressWrapper>\n      <Progress primaryStep={percentRemain} secondaryStep={ (1/24) / 100} />\n      <TopTextWrapper>\n        <StyledPrimaryText fontSize=\"20px\" bold color=\"yellow\">\n          {lotteryHasDrawn ? timeRemainSale : timeRemainDraw}\n        </StyledPrimaryText>\n        <Text fontSize=\"20px\" bold color=\"invertedContrast\">\n          {lotteryHasDrawn ? TranslateString(434, 'Until ticket sale') : TranslateString(492, 'Until lottery draw')}\n        </Text>\n      </TopTextWrapper>\n      {lotteryHasDrawn && (\n        <BottomTextWrapper>\n          <Text color=\"invertedContrast\">\n            {/* {timeUntilLotteryDraw} {TranslateString(492, 'Until lottery draw')} */}\n          </Text>\n        </BottomTextWrapper>\n      )}\n    </ProgressWrapper>\n  )\n}\n\nexport default LotteryProgress\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Container from 'components/layout/Container'\nimport LotteryProgress from './LotteryProgress'\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: rgb(243, 193, 17);\n  margin-bottom: 5px;\n`\n\nconst Blurb = styled(Text)`\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst StyledHero = styled.div`\n  // background: url('../images/large-pc.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  padding-bottom: 60px;\n  padding-top: 60px;\n  background-color: #0000001a;\n`\n\nconst StyledContainer = styled(Container)`\n  display: grid;\n  grid-template-columns: 1fr;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: 1fr 400px;\n  }\n`\n\nconst LeftWrapper = styled.div`\n  flex: 1;\n  padding-right: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-right: 32px;\n  }\n`\n\nconst RightWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  flex: 1;\n  padding-left: 0;\n  margin-top: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0;\n    padding-left: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-left: 32px;\n  }\n`\n\nconst ContentDes = styled.div`\n  margin-bottom: 20px;\n`\n\nconst Hero = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledHero>\n      <StyledContainer>\n        <LeftWrapper>\n          <img src=\"images/banner-jackpot.png\" alt=\"\" />\n        </LeftWrapper>\n\n        <RightWrapper>\n          <ContentDes>\n            <Title>{TranslateString(708, 'The LUCKY Lottery')}</Title>\n            <Blurb>{TranslateString(710, 'Buy tickets with LUCKY for collect more NFTs')}</Blurb>\n            <Blurb>{TranslateString(712, 'Win if 2, 3, or 4 of your ticket numbers match!')}</Blurb>\n          </ContentDes>\n          <LotteryProgress />\n        </RightWrapper>\n      </StyledContainer>\n    </StyledHero>\n  )\n}\n\nexport default Hero\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Card, CardBody } from '@luckyswap/uikit'\nimport { useWinningNumbers, useMatchingRewardLength } from 'hooks/useTickets'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\n\nconst WinningNumbers: React.FC = () => {\n  const { account } = useWeb3React()\n  const winNumbers = useWinningNumbers()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const MatchedNumber4 = useMatchingRewardLength(4)\n  const MatchedNumber3 = useMatchingRewardLength(3)\n  const MatchedNumber2 = useMatchingRewardLength(2)\n  const TranslateString = useI18n()\n\n  return (\n    <CardWrapper>\n      <CardBodyNew>\n        <StyledCardContentInner>\n          <StyledCardHeader>\n            <Title style={{ color: 'rgb(243, 193, 17)' }}>\n              {account && lotteryHasDrawn\n                ? `${TranslateString(570, 'Latest Winning Numbers')}`\n                : TranslateString(440, 'Latest Winning Numbers')}\n            </Title>\n          </StyledCardHeader>\n          <Row>\n            {/* <img\n              alt=\"\"\n              src=\"https://merlinlab.com/static/media/leftGoldenCoin.6aef3b76.svg\"\n              className=\"sc-iCfLBT sc-ezbkgU gvyEtt jElfkq\"\n            />\n            <img\n              alt=\"\"\n              src=\"https://merlinlab.com/static/media/rightGoldenCoin.e795d41c.svg\"\n              className=\"sc-iCfLBT sc-ezbkgU KkWOV jElfkq\"\n            /> */}\n            {winNumbers.map((number, index) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <TicketNumberBox key={index}>\n                <CenteredText>{number}</CenteredText>\n              </TicketNumberBox>\n            ))}\n          </Row>\n          <Column>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {TranslateString(442, 'Tickets matching 4 numbers:')}\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111' }}>{MatchedNumber4}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {TranslateString(444, 'Tickets matching 3 numbers:')}\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111' }}>{MatchedNumber3}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {TranslateString(446, 'Tickets matching 2 numbers:')}\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111' }}>{MatchedNumber2}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n          </Column>\n\n          <Link href=\"/\" target=\"_blank\">\n            {TranslateString(448, 'Export recent winning numbers')}\n          </Link>\n        </StyledCardContentInner>\n      </CardBodyNew>\n    </CardWrapper>\n  )\n}\n\nconst CardBodyNew = styled.div`\n  position: relative;\n  background-color: rgb(43 41 41);\n  border: 0.0625rem solid rgba(255, 255, 255, 0.2);\n  border-radius: 1.25rem;\n  padding: 24px;\n  min-height: 496px;\n`\n\nconst Link = styled.a`\n  margin-top: 1em;\n  text-decoration: none;\n  color: #101010;\n  background-color: #f3c111;\n  border-radius: 12px;\n  padding: 17px 25px;\n  font-weight: 500;\n  white-space: nowrap;\n\n  @media (min-width) {\n    padding: 10px 25px;\n  }\n\n  &:hover {\n    background-color: #ffda3b;\n    color: #101010;\n    transition: 0.5s;\n  }\n`\n\nconst Row = styled.div`\n  margin-top: 1em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  border: 1px solid #f3c111;\n  border-radius: 14px;\n`\n\nconst RabbitRow = styled.div`\n  margin-top: -2.3em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n\n  @media (max-width: 768px) {\n    display: none;\n  }\n`\n\nconst RabbitRowSmall = styled.div`\n  margin-top: -2.3em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n\n  @media (min-width: 768px) {\n    display: none;\n  }\n`\n\nconst CardImage = styled.div`\n  text-align: center;\n`\n\nconst CardImageFirst = styled.div`\n  text-align: center;\n  margin-left: -1.2em;\n\n  @media (max-width: 600) {\n    margin-left: -0.2em;\n  }\n`\n\nconst RowNoPadding = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 10px;\n`\n\nconst Column = styled.div`\n  margin-top: 1em;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`\n\nconst CenteredText = styled.div`\n  text-align: center;\n  align-items: center;\n`\n\nconst CenteredTextWithPadding = styled.div`\n  text-align: center;\n  align-items: center;\n  padding-left: 2px;\n  padding-right: 2px;\n  font-weight: 600;\n`\n\nconst TicketNumberBox = styled.div`\n  padding: 10px;\n  border-radius: 12px;\n  text-shadow: rgb(255 214 0) 0px 0px 12px;\n  // background: linear-gradient(180deg, #54dade 0%, #24c7d6 76.22%);\n  color: white;\n  font-size: 20px;\n  font-weight: 900;\n  margin: 10px;\n  margin-bottom: 7px;\n  width: 40px;\n\n  @media (min-width: 768px) {\n    font-size: 40px;\n    margin: 20px;\n    background: url('../images/bg-number.svg');\n    background-repeat: no-repeat;\n    width: 120px;\n    min-height: 150px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n`\n\nconst RabbitBox = styled.div`\n  /* padding: 10px; */\n  border-radius: 12px;\n  margin: 16px 20px;\n  width: 60px;\n`\n\nconst RabbitBoxSmall = styled.div`\n  padding-top: 10px;\n  padding-left: 10px;\n  border-radius: 12px;\n  margin: 20px;\n  width: 20px;\n`\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`\n\nconst CardWrapper = styled.div`\n  margin-bottom: 30px;\n`\n\nconst Title = styled.div`\n  color: ${(props) => props.theme.colors.secondary};\n  font-size: 24px;\n  width: 50vw;\n  text-align: center;\n  font-weight: 1000;\n`\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n\n  &:before {\n    position: absolute;\n    top: 0;\n    left: 0;\n    content: '';\n    background: url('../images/jackpot-l.png');\n    width: 220px;\n    height: 496px;\n\n    @media (max-width: 991px) {\n      opacity: 0.2;\n    }\n  }\n\n  &:after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    content: '';\n    background: url('../images/jackpot-r.png');\n    width: 220px;\n    height: 496px;\n\n    @media (max-width: 991px) {\n      opacity: 0.2;\n    }\n  }\n`\n\nexport default WinningNumbers\n","import React from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { Heading, Text } from '@luckyswap/uikit'\nimport { BigNumber } from 'bignumber.js'\nimport { usePriceLuckyBusd } from 'state/hooks'\nimport CardBusdValue from '../../Home/components/CardBusdValue'\n\nexport interface PrizeGridProps {\n  lotteryPrizeAmount?: number\n  pastDraw?: boolean\n  jackpotMatches?: number\n  oneTicketMatches?: number\n  twoTicketMatches?: number\n  threeTicketMatches?: number\n}\n\nconst Grid = styled.div<{ pastDraw?: boolean }>`\n  display: grid;\n  grid-template-columns: repeat(${(props) => (props.pastDraw ? 3 : 2)}, 1fr);\n  grid-template-rows: repeat(4, auto);\n`\n\nconst RightAlignedText = styled(Text)`\n  text-align: right;\n`\n\nconst RightAlignedHeading = styled(Heading)`\n  text-align: right;\n`\n\nconst GridItem = styled.div<{ marginBottom?: string }>`\n  margin-bottom: ${(props) => (props.marginBottom ? props.marginBottom : '10px')};\n`\n\nconst PastDrawGridItem = styled(GridItem)`\n  transform: translate(-40%, 0%);\n`\n\nconst PrizeGrid: React.FC<PrizeGridProps> = ({\n  lotteryPrizeAmount = 0,\n  pastDraw = false,\n  jackpotMatches,\n  twoTicketMatches,\n  threeTicketMatches,\n}) => {\n  const fourMatchesAmount = +((lotteryPrizeAmount / 100) * 50).toFixed(0)\n  const threeMatchesAmount = +((lotteryPrizeAmount / 100) * 20).toFixed(0)\n  const twoMatchesAmount = +((lotteryPrizeAmount / 100) * 10).toFixed(0)\n  const burnAmount = +((lotteryPrizeAmount / 100) * 20).toFixed(0)\n  const TranslateString = useI18n()\n  const cakeBusdPrice = usePriceLuckyBusd()\n\n  const getCakeBusdValue = (amount: number) => {\n    return new BigNumber(amount).multipliedBy(cakeBusdPrice).toNumber()\n  }\n\n  return (\n    <Grid pastDraw={pastDraw}>\n      <GridItem>\n        <Text fontSize=\"24px\" color=\"#F3C111\">\n          {TranslateString(756, 'No. Matched')}\n        </Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedText fontSize=\"14px\" color=\"textSubtle\">\n            {TranslateString(754, 'Winners')}\n          </RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText fontSize=\"24px\" color=\"#F3C111\">\n          {TranslateString(752, 'Prize Pot')}\n        </RightAlignedText>\n      </GridItem>\n      {/* 4 matches row */}\n      <GridItem>\n        <Heading style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }} size=\"md\">\n          4\n        </Heading>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedHeading size=\"md\">{jackpotMatches}</RightAlignedHeading>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedHeading size=\"md\">\n          {fourMatchesAmount.toLocaleString()}\n          {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getCakeBusdValue(fourMatchesAmount)} />}\n        </RightAlignedHeading>\n      </GridItem>\n      {/* 3 matches row */}\n      <GridItem style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }}>\n        <Text bold>3</Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedText bold>{threeTicketMatches}</RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText>\n          {threeMatchesAmount.toLocaleString()}\n          {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getCakeBusdValue(threeMatchesAmount)} />}\n        </RightAlignedText>\n      </GridItem>\n      {/* 2 matches row */}\n      <GridItem style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }}>\n        <Text>2</Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedText>{twoTicketMatches}</RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText>\n          {twoMatchesAmount.toLocaleString()}\n          {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getCakeBusdValue(twoMatchesAmount)} />}\n        </RightAlignedText>\n      </GridItem>\n      {/* Burn row */}\n      <GridItem marginBottom=\"0\">\n        <Text>{TranslateString(999, `${pastDraw ? 'Burned' : 'To burn'}`)}:</Text>\n      </GridItem>\n      {pastDraw ? (\n        <>\n          <GridItem marginBottom=\"0\" />\n          <GridItem marginBottom=\"0\">\n            <RightAlignedText>{burnAmount.toLocaleString()}</RightAlignedText>\n          </GridItem>\n        </>\n      ) : (\n        <GridItem marginBottom=\"0\">\n          <RightAlignedText>{burnAmount.toLocaleString()}</RightAlignedText>\n        </GridItem>\n      )}\n    </Grid>\n  )\n}\n\nexport default PrizeGrid\n","import React, { useContext, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Card, CardBody, CardFooter, Text, PancakeRoundIcon, Flex, Skeleton } from '@luckyswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useTotalRewards } from 'hooks/useTickets'\nimport { getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { useContract } from 'hooks/useContract'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { getLotteryIssueIndex } from 'utils/lotteryUtils'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton/ExpandableSectionButton'\nimport { BigNumber } from 'bignumber.js'\nimport { usePriceLuckyBusd } from 'state/hooks'\nimport PrizeGrid from '../PrizeGrid'\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\nimport CardValue from '../../../Home/components/CardValue'\n\n// const Container = styled.div`\n//   margin-left: auto;\n//   margin-right: auto;\n//   max-width: 1200px;\n//   margin-bottom: 30px;\n// `\n\nconst BoxTotal = styled.div`\n  background: linear-gradient(45deg, rgb(35 35 35) 30%, rgb(45 45 45) 100%);\n  box-shadow: 0px 0px 11px 0px rgb(16 16 16 / 57%);\n  color: #ffffff;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n  margin-bottom: 20px;\n  display: grid;\n  grid-template-columns: 1fr;\n\n  @media (min-width: 991px) {\n    grid-template-columns: 1fr 1fr;\n    margin: 0 auto 60px;\n  }\n`\n\nconst CardHeading = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n`\n\nconst Right = styled.div`\n  display: flex;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: none;\n  }\n`\n\nconst Left = styled.div`\n  display: flex;\n`\n\nconst IconWrapper = styled.div`\n  margin-right: 16px;\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\n\nconst PrizeCountWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst ExpandingWrapper = styled.div<{ showFooter: boolean }>`\n  height: ${(props) => (props.showFooter ? '100%' : '0px')};\n  padding: 15px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 100%;\n  }\n`\nconst CardBodyNew = styled.div`\n  background-color: rgba(255, 255, 255, 0.1);\n  border: 0.0625rem solid rgba(255, 255, 255, 0.2);\n  border-radius: 1.25rem;\n  padding: 24px;\n`\n\nconst BoxLucky = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  padding: 15px 0 5px;\n\n  h2 {\n    font-size: 44px;\n    position: relative;\n    color: #f3c111;\n    font-weight: 700;\n  }\n\n  span {\n    font-size: 16px;\n    position: absolute;\n    top: 0;\n  }\n`\n\nconst Dollar = styled.div`\n  padding-left: 60px;\n`\n\nconst TotalPrizesCard = () => {\n  const [indexRoute, setIndexRoute]  = useState(0)\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const [showFooter, setShowFooter] = useState(false)\n  const lotteryPrizeAmount = +getBalanceNumber(useTotalRewards()).toFixed(0)\n  const lotteryPrizeAmountBusd = new BigNumber(lotteryPrizeAmount).multipliedBy(usePriceLuckyBusd()).toNumber()\n  const lotteryPrizeWithCommaSeparators = lotteryPrizeAmount.toLocaleString()\n  const { currentLotteryNumber } = useContext(PastLotteryDataContext)\n\n\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n\n  useEffect(() => {\n    const fetchLotteryIndex = async () => {\n      if (lotteryContract) {\n        const index = await getLotteryIssueIndex(lotteryContract)\n\n        setIndexRoute(index)\n      }\n    }\n\n    fetchLotteryIndex()\n  }, [lotteryContract])\n\n\n  return (\n    <BoxTotal>\n      <CardBody>\n        {account && (\n          <Flex mb=\"16px\" alignItems=\"center\" justifyContent=\"space-between\" style={{ height: '20px' }}>\n            {currentLotteryNumber === 0 && <Skeleton height={20} width={56} />}\n            <>\n              <Text fontSize=\"12px\" style={{ fontWeight: 600 }}>\n                {TranslateString(720, `Round #${indexRoute}`, { num: currentLotteryNumber })}\n              </Text>\n            </>\n            {/* {currentLotteryNumber > 0 && (\n                <>\n                  <Text fontSize=\"12px\" style={{ fontWeight: 600 }}>\n                    {TranslateString(720, `Round #${currentLotteryNumber}`, { num: currentLotteryNumber })}\n                  </Text>\n                </>\n              )} */}\n          </Flex>\n        )}\n\n        <CardHeading>\n          <Left>\n            <PrizeCountWrapper>\n              <Text fontSize=\"24px\" fontWeight=\"500\" color=\"textSubtle\">\n                {TranslateString(722, 'Total Pot:')}\n              </Text>\n              <BoxLucky>\n                <IconWrapper>\n                  <img width=\"55px\" alt=\"\" src=\"/images/icon-logo-y.png\" />\n                </IconWrapper>\n                <Heading style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px', fontSize: '44' }} size=\"lg\">\n                  {lotteryPrizeWithCommaSeparators} <span>LUCKY</span>\n                </Heading>\n              </BoxLucky>\n              <Dollar>{lotteryPrizeAmountBusd !== 0 && <CardBusdValue value={lotteryPrizeAmountBusd} />}</Dollar>\n\n            </PrizeCountWrapper>\n          </Left>\n          <Right>\n            <ExpandableSectionButton onClick={() => setShowFooter(!showFooter)} expanded={showFooter} />\n          </Right>\n        </CardHeading>\n      </CardBody>\n      <ExpandingWrapper showFooter={showFooter}>\n        <CardFooter className=\"no-border\">\n          <PrizeGrid lotteryPrizeAmount={lotteryPrizeAmount} />\n        </CardFooter>\n      </ExpandingWrapper>\n    </BoxTotal>\n  )\n}\n\nexport default TotalPrizesCard\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Loading: React.FC = () => <StyledLoading />\n\nconst StyledLoading = styled.div`\n  border: 8px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 8px solid #ddd;\n  border-bottom: 8px solid #ddd;\n  width: 20px;\n  height: 20px;\n  -webkit-animation: spin 2s linear infinite;\n  animation: spin 2s linear infinite;\n  @-webkit-keyframes spin {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`\n\nexport default Loading\n","import React, { useCallback } from 'react'\nimport { Button, Modal } from '@luckyswap/uikit'\nimport styled from 'styled-components'\nimport { useWinningNumbers } from 'hooks/useTickets'\nimport useI18n from 'hooks/useI18n'\n\ninterface UserTicketsModalProps {\n  myTicketNumbers: Array<any>\n  from?: string\n  onDismiss?: () => void\n}\n\nconst UserTicketsModal: React.FC<UserTicketsModalProps> = ({ myTicketNumbers, onDismiss, from }) => {\n  const winNumbers = useWinningNumbers()\n  const TranslateString = useI18n()\n  const rewardMatch = useCallback(\n    (number) => {\n      let n = 0\n      for (let i = winNumbers.length - 1; i >= 0; i--) {\n        // eslint-disable-next-line eqeqeq\n        if (winNumbers[i] == number[i]) n++\n      }\n      return n\n    },\n    [winNumbers],\n  )\n\n  const listItems = myTicketNumbers.map((number, index) => {\n    if (rewardMatch(number[0]) > 1 && from !== 'buy') {\n      const emoji = new Array(rewardMatch(number[0]) + 1).join('🤑')\n      return (\n        // eslint-disable-next-line react/no-array-index-key\n        <RewardP key={index}>\n          {emoji}\n          {number.toString()}\n          {emoji}\n        </RewardP>\n      )\n    }\n    // eslint-disable-next-line react/no-array-index-key\n    return (\n      <p style={{ color: 'yellow' }} key={index}>\n        {number.toString()}\n      </p>\n    )\n  })\n\n  return (\n    <Modal\n      title={TranslateString(490, `My Tickets (Total: ${myTicketNumbers.length})`, { TICKETS: myTicketNumbers.length })}\n      onDismiss={onDismiss}\n    >\n      <TicketsList>\n        <h2>{listItems}</h2>\n      </TicketsList>\n      <StyledButton variant=\"secondary\" onClick={onDismiss}>\n        {TranslateString(438, 'Close')}\n      </StyledButton>\n    </Modal>\n  )\n}\n\nconst RewardP = styled.div`\n  color: #ff8c28;\n`\n\nconst TicketsList = styled.div`\n  text-align: center;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst StyledButton = styled(Button)`\n  margin-top: ${(props) => props.theme.spacing[2]}px;\n`\n\nexport default UserTicketsModal\n","import React, { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Heading, Won, useModal } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\nimport useTickets, { useTotalClaim } from 'hooks/useTickets'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport Loading from '../Loading'\nimport MyTicketsModal from '../TicketCard/UserTicketsModal'\n\nconst WinningsWrapper = styled.div`\n  display: flex;\n  align-items: baseline;\n`\n\nconst IconWrapper = styled.div`\n  margin-bottom: 16px;\n\n  svg {\n    width: 80px;\n    height: 80px;\n  }\n`\n\nconst StyledCardActions = styled.div`\n  margin-top: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`\n\nconst StyledButton = styled(Button)`\n  margin-top: ${(props) => props.theme.spacing[1]}px;\n`\n\nconst PrizesWonContent: React.FC = () => {\n  const [requestedClaim, setRequestedClaim] = useState(false)\n  const TranslateString = useI18n()\n  const { claimLoading, claimAmount } = useTotalClaim()\n  const { onMultiClaim } = useMultiClaimLottery()\n  const tickets = useTickets()\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n  const addTransaction = useTransactionAdder()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setRequestedClaim(true)\n      const txHash = await onMultiClaim()\n      addTransaction(txHash, {\n        summary: 'Claim successfully!',\n      })\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedClaim(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onMultiClaim, setRequestedClaim])\n\n  const winnings = getBalanceNumber(claimAmount).toFixed(2)\n\n  return (\n    <StyledCardContentInner>\n      <IconWrapper>\n        <img src=\"images/icon-gif.svg\" alt=\"gif\" />\n      </IconWrapper>\n      <Heading as=\"h3\" size=\"lg\" color=\"#1CFFBB\">\n        {TranslateString(660, 'You won!')}\n      </Heading>\n      {claimLoading && <Loading />}\n      {!claimLoading && (\n        <>\n          <WinningsWrapper>\n            <Heading as=\"h4\" size=\"xl\" style={{ marginRight: '6px' }}>\n              {winnings}\n            </Heading>\n            <Heading as=\"h4\" size=\"lg\">\n              LUCKY\n            </Heading>\n          </WinningsWrapper>\n        </>\n      )}\n      <StyledCardActions>\n        <Button\n          className=\"border-yellow\"\n          variant=\"secondary\"\n          width=\"100%\"\n          disabled={requestedClaim}\n          onClick={handleClaim}\n        >\n          {TranslateString(1056, 'Collect')}\n        </Button>\n      </StyledCardActions>\n      <StyledButton variant=\"text\" onClick={onPresentMyTickets}>\n        {TranslateString(432, 'View your tickets')}\n      </StyledButton>\n    </StyledCardContentInner>\n  )\n}\n\nexport default PrizesWonContent\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, useModal } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useTickets from 'hooks/useTickets'\nimport MyTicketsModal from '../TicketCard/UserTicketsModal'\n\nconst Wrapper = styled.div`\n  display: flex;\n`\n\nconst TextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledText = styled(Text)`\n  padding-left: 12px;\n`\n\nconst Image = styled.img`\n  margin-right: 6px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 20px;\n  }\n`\nconst StyledButton = styled(Button)`\n  padding: 0 12px;\n  height: unset;\n`\n\nconst NoPrizesContent: React.FC = () => {\n  const TranslateString = useI18n()\n  const tickets = useTickets()\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n\n  return (\n    <Wrapper>\n      <Image src=\"/images/no-prize.svg\" alt=\"no prizes won\" />\n      <TextWrapper>\n        <StyledText>{TranslateString(726, 'Sorry, no prizes to collect')}</StyledText>\n        <StyledButton variant=\"text\" onClick={onPresentMyTickets}>\n          {TranslateString(432, 'View your tickets and NFTs')}\n        </StyledButton>\n      </TextWrapper>\n    </Wrapper>\n  )\n}\n\nexport default NoPrizesContent\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody } from '@luckyswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport PrizesWonContent from './PrizesWonContent'\nimport NoPrizesContent from './NoPrizesContent'\n\nconst StyledCard = styled(Card)`\n  margin: 0 !important;\n  max-width: 100% !important;\n  border-radius: 14px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  ${(props) =>\n    props.isDisabled\n      ? `  \n        margin-top: 0;\n        background-color: unset;\n        box-shadow: unset;\n        border: 1px solid ${props.theme.colors.textDisabled};\n\n        ${props.theme.mediaQueries.sm} {\n          margin-top: 0;\n        }\n\n        ${props.theme.mediaQueries.lg} {\n          margin-top: 0;\n        }\n        `\n      : ``}\n`\n\nconst YourPrizesCard: React.FC = () => {\n  const { claimAmount } = useTotalClaim()\n\n  const winnings = getBalanceNumber(claimAmount)\n  const isAWin = winnings > 0\n\n  return (\n    <StyledCard isDisabled={!isAWin} isActive={isAWin}>\n      <CardBody>{isAWin ? <PrizesWonContent /> : <NoPrizesContent />}</CardBody>\n    </StyledCard>\n  )\n}\n\nexport default YourPrizesCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Ticket } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\n\nconst StyledCardBody = styled(CardBody)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n\nconst StyledHeading = styled(Heading)`\n  margin: 16px 0;\n`\n\nconst IconWrapper = styled.div`\n  svg {\n    width: 80px;\n    height: 80px;\n  }\n`\n\nconst UnlockWalletCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card isActive>\n      <StyledCardBody>\n        <IconWrapper>\n          <img src=\"https://merlinlab.com/assets/lottery/lottery.svg\" alt=\"\" />\n        </IconWrapper>\n        <StyledHeading size=\"md\">{TranslateString(1080, 'Unlock wallet to access lottery')}</StyledHeading>\n        <UnlockButton />\n      </StyledCardBody>\n    </Card>\n  )\n}\n\nexport default UnlockWalletCard\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@luckyswap/uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\nimport useI18n from 'hooks/useI18n'\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE } from 'config'\nimport { useWeb3React } from '@web3-react/core'\nimport { useContract } from 'hooks/useContract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { useTransactionAdder } from 'state/transactions/hooks'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onConfirm?: (amount: string, numbers: Array<number>) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, 18)\n  }, [max])\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\n\n  const { onMultiBuy } = useMultiBuyLottery()\n  const maxNumber = useMaxNumber()\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  const addTransaction = useTransactionAdder()\n\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      // await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\n      const txHash = await lotteryContract\n        .multiBuy(new BigNumber(LOTTERY_TICKET_PRICE.toString()).times(new BigNumber(10).pow(18)).toString(), numbers)\n        .then((response) => {\n          addTransaction(response, {\n            summary: 'Buy ticket successfully!',\n          })\n        })\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * LOTTERY_TICKET_PRICE\n  }\n  return (\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"LUCKY\"\n      />\n      <div>\n        <Tips>{TranslateString(999, `1 Ticket = ${LOTTERY_TICKET_PRICE} LUCKY`, { num: LOTTERY_TICKET_PRICE })}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {TranslateString(\n            478,\n            'Ticket purchases are final. Your LUCKY cannot be returned to you after buying tickets.',\n          )}\n        </Announce>\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} LUCKY`)}</Final>\n      </div>\n      <ModalActions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n\n        \n        <Button\n          id=\"lottery-buy-complete\"\n          width=\"100%\"\n          variant=\"secondary\"\n          disabled={\n            pendingTx ||\n            parseInt(val) > Number(maxTickets) ||\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\n            parseInt(val) < 1\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #fff;\n`\n","import React from 'react'\nimport { Button, Modal } from '@luckyswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\n\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Modal title={TranslateString(466, 'Warning')} onDismiss={onDismiss}>\n      <TicketsList>\n        {TranslateString(468, 'Lottery ticket purchases are final.')}\n        <br />\n        {TranslateString(470, 'Your CAKE will not be returned to you after you spend it to buy tickets.')}\n        <br />\n        {TranslateString(472, 'Tickets are only valid for one lottery draw, and will be burned after the draw.')}\n        <br />\n        {TranslateString(\n          474,\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\n        )}\n      </TicketsList>\n      <ModalActions>\n        <Button width=\"100%\" onClick={onDismiss}>\n          {TranslateString(476, 'I understand')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nconst TicketsList = styled.div`\n  text-align: left;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nexport default WarningModal\n","import React, { useMemo, useCallback, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, useModal } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { useContract } from 'hooks/useContract'\nimport { useApproveCallbackCustom } from 'hooks/useApproveCallback'\nimport { XLUCKY_TESTNET_ADDRESSES } from 'config'\nimport bep20Abi from 'config/abi/erc20.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport useRefresh from 'hooks/useRefresh'\nimport useUtilityToken from 'hooks/useUtilityToken'\nimport { getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport lotteryTicketAbi from 'config/abi/lotteryNft.json'\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks'\nimport { TransactionDetails } from 'state/transactions/reducer'\nimport { getTickets } from 'utils/lotteryUtils'\nimport BuyTicketModal from './BuyTicketModal'\nimport MyTicketsModal from './UserTicketsModal'\nimport PurchaseWarningModal from './PurchaseWarningModal'\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst CardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: ${(props) => props.theme.spacing[3]}px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    justify-content: space-between;\n  }\n`\n\nconst TicketCard: React.FC = () => {\n  const TranslateString = useI18n()\n  const [balanceToken, setBalanceToken] = useState(0)\n  const [tickets, setTickets] = useState([])\n  const [allowance, setAllowance] = useState(0)\n  // const allowance = useLotteryAllowance()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n\n  const { account, chainId } = useWeb3React()\n  const contractBEP20 = useContract(XLUCKY_TESTNET_ADDRESSES[chainId], bep20Abi)\n\n  const useContractTemp = useContract(XLUCKY_TESTNET_ADDRESSES[chainId], bep20Abi)\n\n  const ticketsContract = useContract(getLotteryTicketAddress(), lotteryTicketAbi)\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  const { fastRefresh } = useRefresh()\n\n  const ticketsLength = tickets.length\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\n  const [onPresentBuy] = useModal(<BuyTicketModal max={new BigNumber(balanceToken)} tokenName=\"CAKE\" />)\n\n  const { listenApproveEvent } = useUtilityToken(XLUCKY_TESTNET_ADDRESSES[chainId])\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, null)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, lotteryContract, fastRefresh, ticketsContract])\n\n  useEffect(() => {\n    const fetchApprovalData = async () => {\n      if (account && contractBEP20) {\n        try {\n          // const response = await contractBEP20?.allowance?.(account, getLotteryAddress())\n          setAllowance(new BigNumber('10000000000000000000000000000000').toNumber())\n        } catch (error) {\n          console.log(' error fetch approval data')\n        }\n      }\n    }\n    listenApproveEvent(() => fetchApprovalData())\n  }, [listenApproveEvent, account, contractBEP20])\n\n\n  useEffect(() => {\n    if (useContractTemp) {\n      useContractTemp\n        .balanceOf(account)\n        .then((data) => {\n          setBalanceToken(data.toString())\n        })\n        .catch((error) => console.log('lottery : ', error))\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account])\n\n  useEffect(() => {\n    if (useContractTemp) {\n      useContractTemp\n        .balanceOf(account)\n        .then((data) => {\n          setBalanceToken(data.toString())\n        })\n        .catch((error) => console.log('lottery : ', error))\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, fastRefresh])\n\n  useEffect(() => {\n    const fetchApprovalData = async () => {\n      if (account && contractBEP20) {\n        try {\n          const response = await contractBEP20?.allowance?.(account, getLotteryAddress())\n          console.log(\"response\", response.toString())\n          setAllowance(response.toString())\n        } catch (error) {\n          console.log(' error fetch approval data')\n        }\n      }\n    }\n\n    fetchApprovalData()\n  }, [account, contractBEP20])\n  const [requestedApproval, setRequestedApproval] = useState(false)\n\n  const [approval] = useApproveCallbackCustom(XLUCKY_TESTNET_ADDRESSES[chainId], getLotteryAddress())\n\n  async function onAttemptToApprove() {\n    return approval()\n  }\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onAttemptToApprove().then()\n    } catch (e) {\n      console.error(e)\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [approval, setRequestedApproval])\n\n  const allTransactions = useAllTransactions()\n\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  const getStatus = () => {\n    const pending = sortedRecentTransactions.filter((tx) => !tx.receipt).map((tx) => tx.hash)\n    return !!pending.length\n  }\n\n  const renderLotteryTicketButtons = () => {\n    if (allowance.toString() === '0') {\n      return (\n        <Dflex>\n          <Button\n            style={{ marginRight: '8px' }}\n            width=\"100%\"\n            disabled={ticketsLength === 0}\n            variant=\"secondary\"\n            onClick={onPresentMyTickets}\n          >\n            {TranslateString(432, 'View your tickets')}\n          </Button>\n          <Button\n            className=\"border-yellow\"\n            width=\"100%\"\n            disabled={requestedApproval || getStatus()}\n            onClick={handleApprove}\n          >\n            {getStatus() ? spinnerIcon : ''}\n            {TranslateString(494, 'Approve')}\n          </Button>\n        </Dflex>\n      )\n    }\n    return (\n      <>\n        <Button\n          style={{ marginRight: '8px' }}\n          width=\"100%\"\n          disabled={ticketsLength === 0}\n          variant=\"secondary\"\n          onClick={onPresentMyTickets}\n        >\n          {TranslateString(432, 'View your tickets')}\n        </Button>\n        <Button variant=\"secondary\" id=\"lottery-buy-start\" width=\"100%\" onClick={onPresentBuy}>\n          {getStatus() ? spinnerIcon : ''}\n          {TranslateString(430, 'Buy ticket')}\n        </Button>\n      </>\n    )\n  }\n\n  return (\n    <CardActions>\n      {lotteryHasDrawn ? (\n        <Button disabled> {TranslateString(874, 'On sale soon')}</Button>\n      ) : (\n        renderLotteryTicketButtons()\n      )}\n    </CardActions>\n  )\n}\n\nconst Dflex = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 20px;\n  width: 100%;\n`\n\nexport default TicketCard\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, TicketRound, Text, Heading } from '@luckyswap/uikit'\nimport axios from 'axios'\n\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport useTickets from 'hooks/useTickets'\nimport { useCurrentTime } from 'hooks/useTimer'\nimport useRefresh from 'hooks/useRefresh'\nimport { BASE_API_ADMIN } from 'config'\nimport TicketActions from './TicketActions'\nimport { getTicketSaleTime, getTimeRemainDraw } from '../../helpers/CountdownHelpers'\n\n\ninterface CardProps {\n  isSecondCard?: boolean\n}\n\nconst StyledCard = styled(Card)<CardProps>`\n  margin: 0 !important;\n  max-width: 100% !important;\n  border-radius: 14px;\n\n  ${(props) =>\n    props.isSecondCard\n      ? `  \n        margin-top: 0;\n\n        ${props.theme.mediaQueries.sm} {\n          margin-top: 0;\n        }\n\n        ${props.theme.mediaQueries.lg} {\n          margin-top: 0;\n        }\n        `\n      : ``}\n`\n\nconst CardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n`\n\nconst IconWrapper = styled.div`\n  margin-bottom: 16px;\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\n\nconst TicketCountWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`\n\nconst TicketCard: React.FC<CardProps> = ({ isSecondCard = false }) => {\n  const TranslateString = useI18n()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n\n  const tickets = useTickets()\n  const ticketsLength = tickets.length\n\n  const currentMillis = useCurrentTime()\n  const timeUntilTicketSale = lotteryHasDrawn && getTicketSaleTime(currentMillis)\n\n  const { fastRefresh } = useRefresh()\n  const [timeRemainDraw, setTimeRemainDraw] = useState(\"\");\n  const [timeRemainSale, setTimeRemainSale] = useState(\"\");\n\n  useEffect(() => {\n    const fetchTimeLottery = async () => {\n      const timeEndLottery = new Date();\n      const timeStartLottery = new Date();\n      const {data} = await axios.get(`${BASE_API_ADMIN}/lotteries`);\n\n      // set time remain to end lottery phase\n      timeEndLottery.setHours(data[0].timeDrawLottery.hh, data[0].timeDrawLottery.mm, 0);\n      setTimeRemainDraw(getTimeRemainDraw(timeEndLottery));\n\n      // set time remain to start new lottery phase\n      timeStartLottery.setHours(data[0].timeStartNewPhase.hh, data[0].timeStartNewPhase.mm, 0);\n      setTimeRemainSale(getTimeRemainDraw(timeStartLottery));\n    }\n    fetchTimeLottery();\n  },[fastRefresh])\n  // 12\n  return (\n    <StyledCard isSecondCard={isSecondCard}>\n      <CardBody>\n        <CardHeader>\n          <IconWrapper>\n            <img alt=\"\" src=\"../images/icon-lottery.svg\" />\n          </IconWrapper>\n          {lotteryHasDrawn ? (\n            <TicketCountWrapper>\n              <Text fontSize=\"20px\" color=\"textSubtle\">\n                {TranslateString(870, 'Your ticket for this round')}\n              </Text>\n              <Heading size=\"lg\" style={{ color: '#F3C111', fontSize: '30px' }}>\n                {timeRemainSale}\n              </Heading>\n            </TicketCountWrapper>\n          ) : (\n            <TicketCountWrapper>\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {TranslateString(724, 'Your tickets for this round')}\n              </Text>\n              <Heading size=\"lg\">{ticketsLength}</Heading>\n            </TicketCountWrapper>\n          )}\n        </CardHeader>\n        <TicketActions />\n      </CardBody>\n    </StyledCard>\n  )\n}\n\nexport default TicketCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Heading, Link, Image } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst LayoutWrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n  margin-bottom: 30px;\n  margin: 0 auto 40px;\n  display: flex;\n  flex-direction: column;\n  border-radius: 14px;\n  padding: 20px;\n  background-color: #2b2a2a;\n  text-align: center;\n`\n\nconst StyledHeading = styled(Heading)`\n  margin: 16px 0;\n`\n\nconst StyledImage = styled(Image)`\n  align-self: center;\n`\n\nconst StyledLink = styled(Link)`\n  align-self: center;\n  margin-top: 16px;\n  border: 1px solid #f3c111;\n  background-color: transparent;\n  color: #f3c111;\n  padding: 10px 20px;\n  border-radius: 14px;\n\n  &:hover {\n    color: #ecf023;\n  }\n`\n\nconst HowItWorks = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <LayoutWrapper>\n      <StyledHeading size=\"lg\" as=\"h3\" color=\"rgb(243, 193, 17)\">\n        {TranslateString(632, 'How it works')}\n      </StyledHeading>\n      <Text fontSize=\"16px\">\n        Spend LUCKY to buy tickets, contributing to the lottery pot.\n        <br /> Win prizes if 2, 3, or 4 of your ticket numbers match the winning numbers and their exact order!\n      </Text>\n      <StyledLink href=\"https://docs.luckyswap.io\">{TranslateString(610, 'Read more')}</StyledLink>\n    </LayoutWrapper>\n  )\n}\nexport default HowItWorks\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Text, Input, Button } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface PastLotterySearcherProps {\n  initialLotteryNumber: number\n  onSubmit: (num: number) => void\n}\n\nconst Wrapper = styled.div`\n  margin-bottom: 24px;\n`\n\nconst SearchWrapper = styled.div`\n  position: relative;\n`\nconst InputWrapper = styled.div`\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  /* Firefox */\n  input[type='number'] {\n    -moz-appearance: textfield;\n  }\n`\n\nconst ButtonWrapper = styled.div`\n  position: absolute;\n  right: 8px;\n  top: 50%;\n  transform: translate(0%, -50%);\n  width: auto;\n`\n\nconst PastLotterySearcher: React.FC<PastLotterySearcherProps> = ({ initialLotteryNumber, onSubmit }) => {\n  const [lotteryNumber, setLotteryNumber] = useState(initialLotteryNumber)\n  const [isError, setIsError] = useState(false)\n  const TranslateString = useI18n()\n\n  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault()\n    onSubmit(lotteryNumber)\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseInt(evt.currentTarget.value, 10)\n\n    // The max value will always be the initialLotteryNumber which equals\n    // the latest lottery round\n    setIsError(value > initialLotteryNumber)\n    setLotteryNumber(value)\n  }\n\n  return (\n    <Wrapper>\n      <Text>{TranslateString(742, 'Select lottery number:')}</Text>\n      <form onSubmit={handleSubmit}>\n        <SearchWrapper>\n          <InputWrapper>\n            <Input\n              value={lotteryNumber}\n              type=\"number\"\n              isWarning={isError}\n              max={initialLotteryNumber}\n              onChange={handleChange}\n            />\n          </InputWrapper>\n          <ButtonWrapper>\n            <Button variant=\"secondary\" type=\"submit\" scale=\"sm\" disabled={isError}>\n              {TranslateString(744, 'Search')}\n            </Button>\n          </ButtonWrapper>\n        </SearchWrapper>\n      </form>\n    </Wrapper>\n  )\n}\n\nexport default PastLotterySearcher\n","import React from 'react'\nimport { Text } from '@luckyswap/uikit'\n\ninterface PastRoundCardErrorProps {\n  error: {\n    message: string\n  }\n}\n\nconst PastRoundCardError: React.FC<PastRoundCardErrorProps> = ({ error }) => {\n  return <Text p=\"24px\">{error.message}</Text>\n}\n\nexport default PastRoundCardError\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading, Text } from '@luckyswap/uikit'\n\ninterface HeadingProps {\n  valueToDisplay?: string\n  children?: string\n  Icon?: React.ComponentType\n}\n\nconst IconWrapper = styled.div`\n  margin-right: 16px;\n\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\n\nconst LotteryCardHeading: React.FC<HeadingProps> = ({ valueToDisplay, children, Icon, ...props }) => {\n  return (\n    <Flex {...props}>\n      {Icon && (\n        <IconWrapper>\n          <Icon />\n        </IconWrapper>\n      )}\n      <Flex className=\"box-lucky\" flexDirection=\"column\">\n        <Text fontSize=\"16px\" color=\"textSubtle\">\n          {children}\n        </Text>\n        <Heading size=\"lg\">{valueToDisplay}</Heading>\n      </Flex>\n    </Flex>\n  )\n}\n\nLotteryCardHeading.defaultProps = {\n  valueToDisplay: '',\n  Icon: () => <div />,\n  children: '',\n}\n\nexport default LotteryCardHeading\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, LinkExternal, useModal } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useWeb3React } from '@web3-react/core'\nimport useTickets from 'hooks/useTickets'\nimport UnlockButton from 'components/UnlockButton'\nimport { SCAN_SITES } from '../../../../constants'\nimport MyTicketsModal from '../TicketCard/UserTicketsModal'\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding-top: 24px;\n\n  & > div {\n    flex: 1;\n    width: 100%;\n  }\n`\n\nconst ExternalLinkWrap = styled(LinkExternal)`\n  align-items: center;\n  display: flex;\n  height: 48px;\n  justify-content: center;\n  text-decoration: none;\n  width: 100%;\n`\n\nconst TicketCard: React.FC<{ contractLink?: string; lotteryNumber?: number }> = ({ contractLink, lotteryNumber }) => {\n  const TranslateString = useI18n()\n  const tickets = useTickets(lotteryNumber)\n  const ticketsLength = tickets.length\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n  const { account, chainId } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Wrapper>\n        <UnlockButton />\n      </Wrapper>\n    )\n  }\n\n  return (\n    <Wrapper>\n      <div>\n        <Button\n          style={{ marginRight: '8px' }}\n          width=\"100%\"\n          variant=\"secondary\"\n          disabled={ticketsLength === 0}\n          onClick={onPresentMyTickets}\n        >\n          {TranslateString(432, 'View your tickets')}\n        </Button>\n      </div>\n      <div>\n        <ExternalLinkWrap href={contractLink}>\n          {TranslateString(356, `View on ${SCAN_SITES[chainId]}`)}\n        </ExternalLinkWrap>\n      </div>\n    </Wrapper>\n  )\n}\n\nexport default TicketCard\n","const formatLotteryDate = (lotteryDate: string) => {\n  if (!lotteryDate) {\n    return {}\n  }\n\n  const date = new Date(lotteryDate)\n\n  const dateString = date.toDateString()\n  const hours = date.getUTCHours()\n  const monthAndDay = dateString.split(' ').splice(1, 2).join(' ')\n\n  return { hours, monthAndDay }\n}\n\nexport default formatLotteryDate\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@luckyswap/uikit'\nimport formatLotteryDate from '../helpers/formatLotteryDate'\n\nconst Wrapper = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n`\n\nconst Timestamp = ({ timeValue }) => {\n  const { monthAndDay, hours } = formatLotteryDate(timeValue)\n\n  return (\n    <Wrapper>\n      <Text fontSize=\"14px\">\n        {monthAndDay}, {hours}:00 UTC\n      </Text>\n    </Wrapper>\n  )\n}\n\nexport default Timestamp\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, CardBody, CardFooter, PancakeRoundIcon, TicketRound } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { DataResponse } from 'utils/getLotteryRoundData'\nimport LotteryCardHeading from '../LotteryCardHeading'\nimport PastLotteryActions from './PastLotteryActions'\nimport PrizeGrid from '../PrizeGrid'\nimport Timestamp from '../Timestamp'\n\ninterface PastRoundCardDetailsProps {\n  data: DataResponse\n}\n\nconst CardHeading = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`\n\nconst TopLotteryCardHeading = styled(LotteryCardHeading)`\n  margin-bottom: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst BoxCard = styled.div`\n  padding: 10px;\n`\n\nconst Dflex = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n`\n\nconst PastRoundCardDetails: React.FC<PastRoundCardDetailsProps> = ({ data }) => {\n  const TranslateString = useI18n()\n\n  const {\n    contractLink,\n    jackpotTicket,\n    lotteryDate,\n    lotteryNumber,\n    lotteryNumbers,\n    match1Ticket,\n    match2Ticket,\n    match3Ticket,\n    poolSize,\n  } = data\n\n  return (\n    !data.error &&\n    data && (\n      <>\n        <CardBody>\n          <CardHeading>\n            <Timestamp timeValue={lotteryDate} />\n            <Heading size=\"md\" mb=\"24px\">\n              Round #{lotteryNumber}\n            </Heading>\n            <TopLotteryCardHeading\n              valueToDisplay={`${lotteryNumbers[0]}, ${lotteryNumbers[1]}, ${lotteryNumbers[2]}, ${lotteryNumbers[3]}`}\n              // Icon={TicketRound}\n            >\n              {TranslateString(999, 'Winning numbers')}\n            </TopLotteryCardHeading>\n            <Dflex>\n              <img src=\"../images/icon-logo-y.png\" alt=\"\" />\n              <LotteryCardHeading valueToDisplay={TranslateString(999, `${poolSize.toLocaleString()}`)}>\n                {TranslateString(999, 'Total prizes')}\n              </LotteryCardHeading>\n            </Dflex>\n          </CardHeading>\n        </CardBody>\n        <BoxCard>\n          <CardFooter className=\"no-border\">\n            <PrizeGrid\n              lotteryPrizeAmount={poolSize}\n              jackpotMatches={jackpotTicket}\n              oneTicketMatches={match1Ticket}\n              twoTicketMatches={match2Ticket}\n              threeTicketMatches={match3Ticket}\n              pastDraw\n            />\n            <PastLotteryActions contractLink={contractLink} lotteryNumber={lotteryNumber} />\n          </CardFooter>\n        </BoxCard>\n      </>\n    )\n  )\n}\n\nexport default PastRoundCardDetails\n","import React from 'react'\nimport styled from 'styled-components'\n// import { Card } from '@luckyswap/uikit'\nimport { DataResponse } from 'utils/getLotteryRoundData'\nimport PastRoundCardError from './PastRoundCardError'\nimport PastRoundCardDetails from './PastRoundCardDetails'\n\ninterface PastRoundCardProps {\n  error: {\n    message: string\n  }\n  data: DataResponse\n}\n\nconst PastRoundCard: React.FC<PastRoundCardProps> = ({ error, data }) => {\n  return (\n    <FullWidth>{error.message ? <PastRoundCardError error={error} /> : <PastRoundCardDetails data={data} />}</FullWidth>\n  )\n}\n\nconst FullWidth = styled.div`\n  width: 100%;\n  background: linear-gradient(45deg, rgb(35 35 35) 30%, rgb(45 45 45) 100%);\n  box-shadow: none;\n  display: grid;\n  grid-template-columns: 1fr;\n  margin-bottom: 20px;\n  border-radius: 14px;\n\n  @media (min-width: 991px) {\n    grid-template-columns: 1fr 1fr;\n    margin-bottom: 30px;\n  }\n`\n\nexport default PastRoundCard\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody } from '@luckyswap/uikit'\nimport getLotteryRoundData from 'utils/getLotteryRoundData'\nimport useI18n from 'hooks/useI18n'\nimport useGetRecentLotteryRoundData from 'hooks/useGetRecentLotteryRoundData'\nimport PastLotterySearcher from './PastLotterySearcher'\nimport PastRoundCard from './PastRoundCard'\nimport Loading from '../Loading'\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledCardBody = styled(CardBody)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 552px; // height of final card\n`\n\nconst PastLotteryRoundViewer = () => {\n  const [state, setState] = useState({\n    roundData: null,\n    error: { message: null, type: null },\n    isInitialized: false,\n    isLoading: true,\n  })\n  const { data: initialLotteryData, mostRecentLotteryNumber } = useGetRecentLotteryRoundData()\n  const TranslateString = useI18n()\n  const { roundData, error, isInitialized, isLoading } = state\n\n  useEffect(() => {\n    if (initialLotteryData) {\n      setState((prevState) => ({ ...prevState, isLoading: false, isInitialized: true, roundData: initialLotteryData }))\n    }\n  }, [initialLotteryData, setState])\n\n  const handleSubmit = async (lotteryNumber: number) => {\n    setState((prevState) => ({\n      ...prevState,\n      isLoading: true,\n    }))\n\n    getLotteryRoundData(lotteryNumber)\n      .then((data) => {\n        if (data.error) {\n          setState((prevState) => ({\n            ...prevState,\n            error: {\n              message: TranslateString(1076, 'The lottery number you provided does not exist'),\n              type: 'out of range',\n            },\n            isLoading: false,\n            isInitialized: true,\n          }))\n        } else {\n          setState((prevState) => ({\n            ...prevState,\n            error: { message: null, type: null },\n            roundData: data,\n            isLoading: false,\n            isInitialized: true,\n          }))\n        }\n      })\n      .catch(() => {\n        setState((prevState) => ({\n          ...prevState,\n          error: { message: TranslateString(1078, 'Error fetching data'), type: 'api' },\n          isLoading: false,\n          isInitialized: true,\n        }))\n      })\n  }\n\n  return (\n    <Wrapper>\n      <PastLotterySearcher initialLotteryNumber={mostRecentLotteryNumber} onSubmit={handleSubmit} />\n      {!isInitialized || isLoading ? (\n        <Card>\n          <StyledCardBody>\n            <Loading />\n          </StyledCardBody>\n        </Card>\n      ) : (\n        <PastRoundCard error={error} data={roundData} />\n      )}\n    </Wrapper>\n  )\n}\n\nexport default PastLotteryRoundViewer\n","import React, { lazy, Suspense, useContext } from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@luckyswap/uikit'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport Loading from '../Loading'\n\nconst Line = lazy(() => import('./LineChartWrapper'))\n\nconst InnerWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst HistoryChart: React.FC = () => {\n  const { historyData, historyError } = useContext(PastLotteryDataContext)\n  const getDataArray = (kind) => {\n    return historyData\n      .map((dataPoint) => {\n        return dataPoint[kind]\n      })\n      .reverse()\n  }\n\n  const lineStyles = ({ color }) => {\n    return {\n      borderColor: color,\n      fill: false,\n      borderWidth: 2,\n      pointRadius: 0,\n      pointHitRadius: 10,\n    }\n  }\n\n  const chartData = {\n    labels: getDataArray('lotteryNumber'),\n    datasets: [\n      {\n        label: 'Pool Size',\n        data: getDataArray('poolSize'),\n        yAxisID: 'y-axis-pool',\n        ...lineStyles({ color: '#8F80BA' }),\n      },\n      {\n        label: 'Burned',\n        data: getDataArray('burned'),\n        yAxisID: 'y-axis-burned',\n        ...lineStyles({ color: '#2b2c3a' }),\n      },\n    ],\n  }\n\n  const axesStyles = ({ color, lineHeight }) => {\n    return {\n      borderCapStyle: 'round',\n      gridLines: { display: false },\n      ticks: {\n        fontFamily: 'Kanit, sans-serif',\n        fontColor: color,\n        fontSize: 14,\n        lineHeight,\n        maxRotation: 0,\n        beginAtZero: true,\n        autoSkipPadding: 15,\n        userCallback: (value) => {\n          return value.toLocaleString()\n        },\n      },\n    }\n  }\n\n  const options = {\n    legend: { display: false },\n    scales: {\n      yAxes: [\n        {\n          type: 'linear',\n          display: true,\n          position: 'left',\n          id: 'y-axis-pool',\n          ...axesStyles({ color: '#8f80ba', lineHeight: 1.6 }),\n        },\n        {\n          type: 'linear',\n          display: true,\n          position: 'right',\n          id: 'y-axis-burned',\n          ...axesStyles({ color: '#2b2c3a', lineHeight: 1.5 }),\n        },\n      ],\n      xAxes: [\n        {\n          ...axesStyles({ color: '#2b2c3a', lineHeight: 1 }),\n        },\n      ],\n    },\n  }\n\n  return (\n    <>\n      {historyError && (\n        <InnerWrapper>\n          <Text>Error fetching data</Text>\n        </InnerWrapper>\n      )}\n      {!historyError && historyData.length > 0 ? (\n        <Suspense fallback={<div>Loading...</div>}>\n          <Line data={chartData} options={options} type=\"line\" />\n        </Suspense>\n      ) : (\n        <InnerWrapper>\n          <Loading />\n        </InnerWrapper>\n      )}\n    </>\n  )\n}\n\nexport default HistoryChart\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst Wrapper = styled.div`\n  display: flex;\n  margin: 36px 0 28px;\n`\n\nconst LegendItem = styled.div`\n  display: flex;\n  margin-right: 18px;\n  align-items: center;\n`\n\nconst Circle = styled.div<{ isPoolSize?: boolean }>`\n  width: 20px;\n  height: 20px;\n  border-radius: 10px;\n  background-color: ${({ isPoolSize, theme }) => theme.colors[isPoolSize ? 'textSubtle' : 'primary']};\n  margin-right: 6px;\n`\n\nconst Legend = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <LegendItem>\n        <Circle isPoolSize />\n        <Text>{TranslateString(748, 'Pool Size')}</Text>\n      </LegendItem>\n      <LegendItem>\n        <Circle />\n        <Text>{TranslateString(750, 'Burned')}</Text>\n      </LegendItem>\n    </Wrapper>\n  )\n}\n\nexport default Legend\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport HistoryChart from './HistoryChart'\nimport Legend from './Legend'\n\nconst PastDrawsHistoryCard: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <FullWidth>\n      <CardBody>\n        <Heading size=\"md\">{TranslateString(746, 'History')}</Heading>\n        <Legend />\n        <HistoryChart />\n      </CardBody>\n    </FullWidth>\n  )\n}\n\nconst FullWidth = styled(Card)`\n  max-width: 100%;\n  background: linear-gradient(45deg, rgb(35 35 35) 30%, rgb(45 45 45) 100%);\n  box-shadow: none;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  margin-bottom: 60px;\n  border-radius: 14px;\n`\n\nexport default PastDrawsHistoryCard\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { ButtonMenu, ButtonMenuItem } from '@luckyswap/uikit'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport { getLotteryIssueIndex } from 'utils/lotteryUtils'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { useLottery, useContract } from 'hooks/useContract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport lotteryAbi from 'config/abi/lottery.json'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport Hero from './components/Hero'\nimport WinningNumbers from './components/WinningNumbers'\nimport TotalPrizesCard from './components/TotalPrizesCard'\nimport YourPrizesCard from './components/YourPrizesCard'\nimport UnlockWalletCard from './components/UnlockWalletCard'\nimport TicketCard from './components/TicketCard'\nimport HowItWorks from './components/HowItWorks'\nimport PastLotteryRoundViewer from './components/PastLotteryRoundViewer'\n// import { BaseLayout } from '@luckyswap/uikit'\nimport PastDrawsHistoryCard from './components/PastDrawsHistory/PastDrawsHistoryCard'\nimport Divider from './components/Divider'\nimport NextDrawPage from './NextDrawPage'\nimport PastDrawsPage from './PastDrawsPage'\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 32px;\n`\n\nconst SecondCardColumnWrapper = styled.div<{ isAWin?: boolean }>`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 40px;\n  margin-bottom: 30px;\n\n  @media (min-width: 991px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`\n\nconst Dflex = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 40px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n  margin-bottom: 30px;\n`\n\nconst BoxImg = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    width: 100%;\n    max-width: 750px;\n  }\n`\n\n\nconst Lottery: React.FC = () => {\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n\n  const TranslateString = useI18n()\n  const [activeIndex, setActiveIndex] = useState(0)\n  const [historyData, setHistoryData] = useState([])\n  const [historyError, setHistoryError] = useState(false)\n  const [currentLotteryNumber, setCurrentLotteryNumber] = useState(0)\n  const [mostRecentLotteryNumber, setMostRecentLotteryNumber] = useState(1)\n\n  const { account } = useWeb3React()\n  const { claimAmount } = useTotalClaim()\n  const winnings = getBalanceNumber(claimAmount)\n  const isAWin = winnings > 0\n\n  useEffect(() => {\n    fetch(`https://dashboard.luckyswap.exchange/lotteries/history`)\n      .then((response) => response.json())\n      .then((data) => {\n        data.sort((a, b) => a.lotteryNumber > b.lotteryNumber ? -1 : 1)\n        setHistoryData(data)}\n        )\n      \n      .catch(() => {\n        setHistoryError(true)\n      })\n  }, [])\n\n  useEffect(() => {\n    const getInitialLotteryIndex = async () => {\n      const index = await getLotteryIssueIndex(lotteryContract)\n      const previousLotteryNumber = index - 1\n\n      setCurrentLotteryNumber(index)\n      setMostRecentLotteryNumber(previousLotteryNumber)\n    }\n\n    if (lotteryContract) {\n      getInitialLotteryIndex()\n    }\n  }, [lotteryContract])\n\n  const handleClick = (index) => {\n    setActiveIndex(index)\n  }\n\n  return (\n    <>\n      <Page>\n        {/* <BoxImg>\n          <img src=\"../images/coming-soon-lot.png\" alt=\"\"/>\n        </BoxImg> */}\n        <Hero />\n        <TotalPrizesCard />\n        <SecondCardColumnWrapper isAWin={isAWin}>\n          {!account ? (\n            <UnlockWalletCard />\n          ) : (\n            <>\n              <TicketCard isSecondCard={isAWin} />\n              <YourPrizesCard />\n            </>\n          )}\n        </SecondCardColumnWrapper>\n        <WinningNumbers />\n        <HowItWorks />\n        <PastLotteryDataContext.Provider\n          value={{ historyError, historyData, mostRecentLotteryNumber, currentLotteryNumber }}\n        >\n          <PastLotteryRoundViewer />\n          <PastDrawsHistoryCard />\n        </PastLotteryDataContext.Provider>\n\n        {/* <Wrapper>\n          <ButtonMenu activeIndex={activeIndex} onItemClick={handleClick} scale=\"sm\" variant=\"subtle\">\n            <ButtonMenuItem>{TranslateString(716, 'Next draw')}</ButtonMenuItem>\n            <ButtonMenuItem>{TranslateString(718, 'Past draws')}</ButtonMenuItem>\n          </ButtonMenu>\n        </Wrapper>\n        <Divider />\n        <PastLotteryDataContext.Provider\n          value={{ historyError, historyData, mostRecentLotteryNumber, currentLotteryNumber }}\n        >\n          {activeIndex === 0 ? <NextDrawPage /> : <PastDrawsPage />}\n        </PastLotteryDataContext.Provider> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Lottery\n"],"sourceRoot":""}