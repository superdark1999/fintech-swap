{"version":3,"sources":["views/Staking/Components/Alert.tsx","state/poolsNft/fetchPoolInfo.ts","services/StakingNftService.ts","services/Mapper.ts","services/index.ts","hooks/useCollection.ts","views/Bridge/components/Navbar.tsx","views/Bridge/components/CardToken.tsx","views/Bridge/index.tsx"],"names":["getNotificationStyle","type","success","color","border","backgroundColor","warning","error","info","open","message","description","duration","notification","style","abi","inputs","internalType","name","outputs","stateMutability","fetchNftUser","account","a","fetch","then","response","json","data","result","map","item","tokenID","parseInt","contractAddress","getAddress","catch","Promise","resolve","NFT_SITES","LUCKY_MARKETPLACE","AIRNFTS","BRNFT","getInfoFromLucky","uri","image","getInfoFromAirNFT","axios","get","nft","urlCompressed","console","log","getInfoFromBRNFT","getInfoFromBakery","getInfoFromURI","tokensInfo","all","token","includes","getTokensURI","tokens","calls","t","address","params","multicallv2","requireSuccess","uris","flat","getBoostedPercent","spaceHunterAbi","boostedPercents","index","boostedPercent","toString","getAdditionalInfoNFTs","excludeExistedTokens","userTokens","existedTokens","i","length","existed","j","push","getKey","ethers","utils","excludeSoldTokens","Map","key","to","set","excludeTokensNotTransferToFarm","chainId","addresses","farms","addAdditionalInfoNFTs","additionalInfoNFTs","Object","assign","StakingNftService","options","restConnector","this","urlToken","post","Error","patch","status","MapperService","create","baseURL","input","stakingNftService","mapperService","EtherscanPostfix","1","4","5","BscscanPostfix","56","97","useEthCollectionFullInfo","useActiveWeb3React","useState","myCollection","setMyCollection","useEffect","url","fullInfoTokens","fetchEthCollection","useSpaceHunterCollection","spaceHunter","isUsingToBoost","fetchSpaceHunterCollection","NavBar","activeTab","toggle","BoxNav","Nav","tabs","LeftItem","NavItem","NavLink","className","classnames","active","onClick","RightItem","styled","div","BoxCenter","Figure","Launchers","BoxFooter","Space","button","Ticket","h2","h3","CardNFT","onRegister","Col","sm","md","src","alt","StakingPage","Bridge","setActiveTab","registerMapping","requestMapping","chain_id","child_token","decimals","email","map_type","mintable","tokenName","root_token","symbol","tokenSymbol","token_type","Page","tab","TabContent","TabPane","tabId"],"mappings":"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","file":"static/js/20.8e59b2e0.chunk.js","sourcesContent":["import React from 'react'\nimport {notification } from 'antd'\n\nconst getNotificationStyle = (type) => {\n  return {\n    success: {\n      color: 'rgba(0, 0, 0, 0.65)',\n      border: '1px solid #b7eb8f',\n      backgroundColor: '#f6ffed',\n    },\n    warning: {\n      color: 'rgba(0, 0, 0, 0.65)',\n      border: '1px solid #ffe58f',\n      backgroundColor: '#fffbe6',\n    },\n    error: {\n      color: 'rgba(0, 0, 0, 0.65)',\n      border: '1px solid #ffa39e',\n      backgroundColor: '#fff1f0',\n    },\n    info: {\n      color: 'rgba(0, 0, 0, 0.65)',\n      border: '1px solid #91d5ff',\n      backgroundColor: '#e6f7ff',\n    },\n    open: {\n      color: 'rgba(0, 0, 0, 0.65)',\n      border: '1px solid #91d5ff',\n      backgroundColor: '#e6f7ff',\n    },\n  }[type]\n}\n\nexport default (\n  type,\n  { message, description, duration = 3 },\n  \n) => {\n  notification[type]({\n    message,\n    description,\n    style: getNotificationStyle(type),\n    duration,\n  })\n}\n","import { ChainId } from '@luckyswap/v2-sdk'\nimport axios from 'axios'\nimport nftAbi from 'config/abi/nft.json'\nimport stakingNftAbi from 'config/abi/StakingNft.json'\nimport spaceHunterAbi from 'config/abi/SpaceHunterNFT.json'\nimport addresses from 'config/constants/contracts'\nimport { getAddress } from 'ethers/lib/utils'\nimport { ethers } from 'ethers'\nimport multicall from 'utils/multicall'\nimport Web3 from 'web3'\nimport { AdditionalInfoNFT, BaseNFT, NFT } from '../../config/constants/types'\nimport { RPC_URLS } from '../../constants/index'\nimport { multicallv2 } from '../../utils/multicall'\n\nconst abi = [\n  {\n    inputs: [{ internalType: 'uint256', name: 'tokenId', type: 'uint256' }],\n    name: 'tokenURI',\n    outputs: [{ internalType: 'string', name: '', type: 'string' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n]\n\nexport const fetchUserPendingRewards = async (pools, chainId) => {\n  const calls = pools.map((p) => ({\n    address: addresses.stakingNft[chainId],\n    name: 'pendingReward',\n    params: [p.nftContract, p.tokenId],\n  }))\n\n  let pendingRewards = await multicall(stakingNftAbi, calls)\n\n  pendingRewards = pendingRewards.flat()\n\n  return pendingRewards\n}\n\nexport const fetchURIPool = async (pools, chainId) => {\n  const calls = pools.map((p) => ({\n    address: addresses.nft[chainId],\n    name: 'tokenURI',\n    params: [p.tokenId],\n  }))\n\n  let images = await multicall(nftAbi, calls)\n\n  images = images.flat()\n\n  return images\n}\n\nexport const fetchNftUser = async (account): Promise<BaseNFT[]> => {\n  if (account) {\n    return fetch(\n      `https://api-testnet.bscscan.com/api?module=account&action=tokennfttx&address=${account}&startblock=0&endblock=999999999999&sort=asc`,\n    )\n      .then((response) => response.json())\n      .then((data) =>\n        data.result.map((item) => ({\n          ...item,\n          tokenID: parseInt(item.tokenID),\n          contractAddress: getAddress(item.contractAddress),\n        })),\n      )\n      .catch((error) => {\n        return new Promise((resolve) => resolve([]))\n      })\n  }\n  return new Promise((resolve) => resolve([]))\n}\n\nexport const getImplementationFromProxy = async (contractAddress: string, chainId: ChainId) => {\n  const web3 = new Web3(RPC_URLS[chainId][0])\n  return (web3 as any).eth.getStorageAt(\n    contractAddress,\n    '0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc',\n  )\n}\n\nconst NFT_SITES = {\n  LUCKY_MARKETPLACE: [\n    getAddress('0x969a82989d9e410ed0ae36c12479552421c93eb2'),\n    getAddress('0xb3597830f51a9d57623318D389B38C70c94ADfa8'),\n    getAddress('0x5b89960e8cb3e42e7b96efbcb1f82029f08f910c'),\n  ],\n  AIRNFTS: [getAddress('0xF5db804101d8600c26598A1Ba465166c33CdAA4b')],\n  BRNFT: [getAddress('0x1dDB2C0897daF18632662E71fdD2dbDC0eB3a9Ec')],\n}\n\nconst getInfoFromLucky = async (uri): Promise<AdditionalInfoNFT> => {\n  return { image: uri }\n}\n\nconst getInfoFromAirNFT = async (uri): Promise<AdditionalInfoNFT> => {\n  try {\n    const { data } = await axios.get(uri)\n    const { urlCompressed, name, description } = (data as any)?.nft\n    return {\n      image: urlCompressed,\n      name,\n      description,\n    }\n  } catch (error) {\n    console.log('get info airnft error : ', error)\n    return null\n  }\n}\n\nconst getInfoFromBRNFT = async (uri): Promise<AdditionalInfoNFT> => {\n  try {\n    const { data } = await axios.get(uri)\n    const { name, description, image } = data\n\n    return { name, description, image }\n  } catch (error) {\n    console.log('get image brnft error : ', error)\n    return null\n  }\n}\n\nconst getInfoFromBakery = async (uri): Promise<AdditionalInfoNFT> => {\n  try {\n    const { data } = await axios.get(uri)\n    const { name, description, image } = data\n\n    return { name, description, image }\n  } catch (error) {\n    console.log('get image bakery error : ', error)\n    return null\n  }\n}\n\nexport const getInfoFromURI = async (tokensInfo: BaseNFT[]): Promise<AdditionalInfoNFT[]> => {\n  const result = await Promise.all(\n    tokensInfo.map(async (token) => {\n      token.contractAddress = getAddress(token.contractAddress)\n      if (NFT_SITES.LUCKY_MARKETPLACE.includes(token.contractAddress)) {\n        return getInfoFromLucky(token.uri)\n      }\n      if (NFT_SITES.AIRNFTS.includes(token.contractAddress)) {\n        return getInfoFromAirNFT(token.uri)\n      }\n      if (NFT_SITES.BRNFT.includes(token.contractAddress)) {\n        return getInfoFromBRNFT(token.uri)\n      }\n\n      return getInfoFromBakery(token.uri)\n    }),\n  )\n\n  return result\n}\n\nexport const getTokensURI = async (tokens: BaseNFT[]) => {\n  try {\n    const calls = tokens.map((t) => ({\n      address: t.contractAddress,\n      name: 'tokenURI',\n      params: [t.tokenID],\n    }))\n\n    let uris = await multicallv2(abi, calls, { requireSuccess: false })\n\n    uris = uris.flat()\n\n    return uris\n  } catch (error) {\n    return []\n  }\n}\n\nexport const getBoostedPercent = async (tokens: BaseNFT[]) => {\n  try {\n    const calls = tokens.map((t) => ({\n      address: t.contractAddress,\n      name: 'boostedPercent',\n      params: [t.tokenID],\n    }))\n\n    let boostedPercents = await multicallv2(spaceHunterAbi, calls, { requireSuccess: false })\n\n    boostedPercents = boostedPercents.flat()\n\n    return tokens.map((token, index) => ({\n      ...token,\n      boostedPercent: boostedPercents[index].toString(),\n    }))\n  } catch (error) {\n    console.log('error : ', error)\n    return []\n  }\n}\n\nexport const getAdditionalInfoNFTs = async <T extends BaseNFT>(tokens: T[]): Promise<AdditionalInfoNFT[]> => {\n  const uris = await getTokensURI(tokens)\n\n  const tokensInfo = uris.map((uri, index) => ({\n    uri,\n    contractAddress: tokens[index].contractAddress,\n  }))\n\n  const info = await getInfoFromURI(tokensInfo)\n\n  return info\n}\n\nexport const excludeExistedTokens = (userTokens: BaseNFT[], existedTokens: BaseNFT[]): Array<any> => {\n  const result: BaseNFT[] = []\n  for (let i = 0; i < userTokens.length; i++) {\n    const token = userTokens[i]\n    let existed = false\n    for (let j = 0; j < existedTokens.length; j++) {\n      if (\n        getAddress(existedTokens[j].contractAddress) === token.contractAddress &&\n        (existedTokens[j].tokenID as any) === token.tokenID\n      ) {\n        existed = true\n        break\n      }\n    }\n\n    if (!existed) {\n      result.push(token)\n    }\n  }\n\n  return result\n}\n\nexport const getKey = (token) => {\n  return `${token.tokenID}-${ethers.utils.getAddress(token.contractAddress)}`\n}\n\nexport const excludeSoldTokens = <T extends BaseNFT>(userTokens: T[], account: string): Array<T> => {\n  const map = new Map()\n  const result: T[] = []\n\n  for (let i = (userTokens as any).length - 1; i >= 0; i--) {\n    const key = getKey(userTokens[i])\n\n    if (!map.get(key) && getAddress(userTokens[i].to) === account) {\n      result.push(userTokens[i])\n    }\n    map.set(key, 1)\n  }\n\n  return result\n}\n\nexport const excludeTokensNotTransferToFarm = <T extends BaseNFT>({ tokens, account, chainId }): Array<T> => {\n  const map = new Map()\n  const result: T[] = []\n\n  for (let i = (tokens as any).length - 1; i >= 0; i--) {\n    const key = getKey(tokens[i])\n\n    if (\n      !map.get(key) &&\n      (getAddress(tokens[i].to) === account || getAddress(tokens[i].to) === getAddress(addresses.farms[chainId]))\n    ) {\n      console.log('key : ', key)\n      result.push(tokens[i])\n    }\n    map.set(key, 1)\n  }\n\n  return result\n}\n\nexport const addAdditionalInfoNFTs = async <T extends BaseNFT>(userTokens: T[]): Promise<T[]> => {\n  const additionalInfoNFTs = await getAdditionalInfoNFTs(userTokens)\n\n  for (let i = 0; i < (userTokens as any).length; i++) {\n    Object.assign(userTokens[i], additionalInfoNFTs[i])\n  }\n\n  return userTokens\n}\n","import { AxiosInstance } from 'axios'\nimport { BaseNFT, NFT } from '../config/constants/types'\n\nexport class StakingNftService {\n  private restConnector: AxiosInstance\n\n  constructor(options: { restConnector: AxiosInstance }) {\n    this.restConnector = options.restConnector\n  }\n\n  public async getAllTokens() {\n    const { data } = await this.restConnector.get('/stakingNft')\n    return data\n  }\n\n  public async getAllTokensId(): Promise<BaseNFT[]> {\n    try {\n      const { data } = await this.restConnector.get('/stakingNft/poolsId')\n      return data\n    } catch (error) {\n      return []\n    }\n  }\n\n  public async getPendingTokens() {\n    const { data } = await this.restConnector.get('/stakingNft?status=pending')\n    return data\n  }\n\n  public async getApprovedTokens() {\n    const { data } = await this.restConnector.get('/stakingNft?status=approve')\n    return data\n  }\n\n  public async getStakingTokens() {\n    const { data } = await this.restConnector.get('/stakingNft?status=staking')\n    return data\n  }\n\n  public async registerStakingToken({ name, description, urlToken, image, tokenID, contractAddress }: NFT) {\n    if (name && description && urlToken && image && tokenID && contractAddress) {\n      return this.restConnector.post('/stakingNft', {\n        name,\n        description,\n        urlToken,\n        image,\n        tokenID,\n        contractAddress,\n      })\n    }\n    throw new Error('Not have enough info token')\n  }\n\n  public async stakeToken({ tokenID, contractAddress }) {\n    return this.restConnector.patch(`/stakingNft/`, {\n      tokenID,\n      contractAddress,\n      status: 'staking',\n    })\n  }\n\n  public async getTokenByID({ tokenID, contractAddress }): Promise<any> {\n    const { data } = await this.restConnector.get(`/stakingNft?tokenID=${tokenID}&contractAddress=${contractAddress}`)\n    return data[0]\n  }\n}\n","import axios, { AxiosInstance } from 'axios'\nimport { BaseNFT, NFT } from '../config/constants/types'\n\ninterface RequestMappingInput {\n  chain_id: number\n  child_token?: string\n  decimals?: 0\n  email: string\n  map_type?: string\n  mintable?: boolean\n  name: string\n  root_token: string\n  symbol: string\n  token_type: string\n  uri?: string\n}\n\nexport class MapperService {\n  private restConnector: AxiosInstance\n\n  constructor() {\n    this.restConnector = axios.create({\n      baseURL: 'https://tokenmapper.api.matic.today/api/v1',\n    })\n  }\n\n  public async requestMapping(input: RequestMappingInput): Promise<any> {\n    return this.restConnector.post('/mapping', input)\n  }\n}\n","import axios from 'axios'\nimport { StakingNftService } from './StakingNftService'\nimport { MapperService } from './Mapper'\n\nconst restConnector = axios.create({\n  baseURL: 'http://localhost:3004/',\n})\n\nexport const stakingNftService = new StakingNftService({ restConnector })\nexport const mapperService = new MapperService()\n","import addresses from 'config/constants/contracts'\nimport { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { addAdditionalInfoNFTs } from 'state/poolsNft/fetchPoolInfo'\nimport { getAddress } from 'utils/addressHelpers'\nimport { ethers } from 'ethers'\nimport { useActiveWeb3React } from './index'\nimport { NFT } from '../config/constants/types'\nimport { getBoostedPercent, excludeSoldTokens, excludeTokensNotTransferToFarm } from '../state/poolsNft/fetchPoolInfo'\n\nconst EtherscanPostfix = {\n  1: '',\n  4: '-rinkeby',\n  5: '-goerli',\n}\n\nconst BscscanPostfix = {\n  56: '',\n  97: '-testnet',\n}\n\nexport const useEthereumCollection = () => {\n  const { chainId, account } = useActiveWeb3React()\n  const [myCollection, setMyCollection] = useState<NFT[]>([])\n\n  useEffect(() => {\n    if (account && chainId) {\n      const url = `https://api${\n        EtherscanPostfix[chainId] ?? '-goerli'\n      }.etherscan.io/api?module=account&action=tokennfttx&address=${account}&sort=asc&apikey=H73WJKKZ7PP5WGF9C11EAPU8MJKY9BNHIJ`\n      axios\n        .get(url)\n        .then((response) => {\n          setMyCollection(\n            response.data.result.map((item) => ({\n              ...item,\n              tokenID: parseInt(item.tokenID),\n              contractAddress: getAddress(item.contractAddress),\n            })),\n          )\n        })\n        .catch((error) => {\n          console.log('error get collection : ', error)\n        })\n    }\n  }, [chainId, account])\n\n  return myCollection\n}\n\nexport const useEthCollectionFullInfo = () => {\n  const { chainId, account } = useActiveWeb3React()\n  const [myCollection, setMyCollection] = useState<NFT[]>([])\n\n  useEffect(() => {\n    const fetchEthCollection = async () => {\n      try {\n        const url = `https://api${\n          EtherscanPostfix[chainId] ?? '-goerli'\n        }.etherscan.io/api?module=account&action=tokennfttx&address=${account}&sort=asc&apikey=H73WJKKZ7PP5WGF9C11EAPU8MJKY9BNHIJ`\n        const tokens = (await axios.get(url))?.data?.result\n\n        const fullInfoTokens = await addAdditionalInfoNFTs(tokens)\n        setMyCollection(fullInfoTokens)\n      } catch (error) {\n        console.log('get eth collection error : ', error)\n      }\n    }\n    if (account && chainId) {\n      fetchEthCollection()\n    }\n  }, [chainId, account])\n\n  return myCollection\n}\n\nexport const useSpaceHunterCollection = () => {\n  const { chainId, account } = useActiveWeb3React()\n  const [myCollection, setMyCollection] = useState<NFT[]>([])\n\n  useEffect(() => {\n    const fetchSpaceHunterCollection = async () => {\n      try {\n        const url = `https://api${\n          BscscanPostfix[chainId] ?? '-testnet'\n        }.bscscan.com/api?module=account&action=tokennfttx&address=${account}&contractaddress=${getAddress(\n          addresses.spaceHunter,\n        )}&sort=asc&apikey=8KFSH17E4S26HYAFBGTPCA29NMNCRY4W3K`\n        let tokens = (await axios.get(url))?.data?.result\n        tokens = tokens.map((item) => ({\n          ...item,\n          tokenID: parseInt(item.tokenID as any),\n          contractAddress: ethers.utils.getAddress(item.contractAddress),\n          isUsingToBoost: false,\n        }))\n\n        tokens = excludeTokensNotTransferToFarm({ tokens, account, chainId })\n\n        tokens = await addAdditionalInfoNFTs(tokens)\n        tokens = await getBoostedPercent(tokens)\n        setMyCollection(tokens)\n      } catch (error) {\n        console.log('get space hunter collection error : ', error)\n      }\n    }\n    if (account && chainId) {\n      fetchSpaceHunterCollection()\n    }\n  }, [chainId, account])\n\n  return myCollection\n}\n","import classnames from 'classnames'\nimport React from 'react'\nimport { Nav, NavItem, NavLink } from 'reactstrap'\nimport styled from 'styled-components'\n\ninterface NavbarProps {\n  activeTab?: any\n  toggle?: any\n}\n\nexport default function NavBar({ activeTab, toggle }: NavbarProps) {\n  return (\n    <BoxNav>\n      <Nav tabs>\n        <LeftItem>\n          <NavItem>\n            <NavLink className={classnames({ active: activeTab === '1' })} onClick={() => toggle('1')}>\n              all cards\n            </NavLink>\n          </NavItem>\n        </LeftItem>\n\n        <RightItem>\n          <NavItem>\n            <NavLink className={classnames({ active: activeTab === '1' })} onClick={() => toggle('1')}>\n              My Collection\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink className={classnames({ active: activeTab === '2' })} onClick={() => toggle('2')}>\n              Pending\n            </NavLink>\n          </NavItem>\n\n          <NavItem>\n            <NavLink className={classnames({ active: activeTab === '3' })} onClick={() => toggle('3')}>\n              Mapped\n            </NavLink>\n          </NavItem>\n        </RightItem>\n      </Nav>\n    </BoxNav>\n  )\n}\n\nconst BoxNav = styled.div`\n  margin-top: 20px;\n\n  .nav-tabs {\n    // display: grid;\n    // grid-template-columns: 1fr 239px;\n    display: flex;\n    justify-content: space-between;\n    border-color: transparent;\n    border-bottom: 1px solid #ffffff8b !important;\n  }\n\n  .nav-link {\n    text-transform: capitalize;\n\n    @media (max-width: 768px) {\n      font-size: 16px;\n      white-space: nowrap;\n    }\n\n    &.active {\n      color: #f4c706 !important;\n      border-bottom: none !important;\n    }\n  }\n`\n\nconst LeftItem = styled.div``\n\nconst RightItem = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  justify-items: end;\n`\n","import { BaseNFT } from 'config/constants/types'\nimport React from 'react'\nimport { Col } from 'reactstrap'\nimport styled from 'styled-components'\nimport { NFT } from '../../../config/constants/types'\n\ninterface CardNFTProps extends NFT {\n  onRegister: any\n  index: number\n}\n\nconst CardNFT: React.FC<CardNFTProps> = ({ tokenID, contractAddress, image, onRegister, index }: CardNFTProps) => {\n  return (\n    <Col sm=\"12\" md=\"3\" className=\"align-center space-mb\">\n      <BoxCenter>\n        <Figure>\n          <img src={image} className=\"thumb\" alt=\"\" />\n          <img src=\"/images/staking/box-img.png\" alt=\"\" className=\"line-box\" />\n        </Figure>\n\n        <Launchers>\n          <img src=\"/images/staking/effect.png\" alt=\"\" />\n        </Launchers>\n\n        <BoxFooter>\n          <Space>\n            <Ticket onClick={() => onRegister(index)}>Register</Ticket>\n          </Space>\n        </BoxFooter>\n      </BoxCenter>\n    </Col>\n  )\n}\n\nconst BoxCenter = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  max-width: auto;\n\n  @media (min-width: 768px) {\n    max-width: 230px;\n  }\n`\n\nconst Figure = styled.div`\n  position: relative;\n  width: 180px;\n  height: 276px;\n  overflow: hidden;\n\n  .thumb {\n    height: inherit;\n    transform: scale(1);\n    transition: all 0.9s;\n    object-fit: cover;\n  }\n\n  .line-box {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 2;\n  }\n`\n\nconst Launchers = styled.div`\n  margin-bottom: 15px;\n`\n\nconst BoxFooter = styled.div`\n  background: #2f2f2f;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n  width: 280px;\n\n  @media (min-width: 768px) {\n    width: 100%;\n  }\n`\n\nconst Btn = styled.button`\n  background: url('../images/staking/line-button.png') no-repeat center center;\n  background-size: contain;\n  width: 100%;\n  height: 67px;\n  line-height: 67px;\n  font-size: 20px;\n  font-weight: 700;\n  text-transform: uppercase;\n  text-align: center;\n  color: #ff3b3b;\n  border: 0;\n\n  &.green-color {\n    color: #1cbb1c;\n  }\n\n  &:hover {\n    .effect-light {\n      text-align: center;\n      font-size: 1.2em;\n      color: #fff;\n      font-weight: 700;\n      text-transform: uppercase;\n      animation: blur 0.75s ease-out infinite;\n      text-shadow: 0px 0px 5px #fff, 0px 0px 7px #fff;\n    }\n  }\n\n  @keyframes blur {\n    from {\n      text-shadow: 0px 0px 10px #fff, 0px 0px 10px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff,\n        0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 50px #fff, 0px 0px 50px #fff,\n        0px 0px 50px #7b96b8, 0px 0px 150px #7b96b8, 0px 10px 100px #7b96b8, 0px 10px 100px #7b96b8,\n        0px 10px 100px #7b96b8, 0px 10px 100px #7b96b8, 0px -10px 100px #7b96b8, 0px -10px 100px #7b96b8;\n    }\n  }\n`\n\nconst Space = styled.div`\n  padding: 15px;\n`\n\nconst Title = styled.h2`\n  font-size: 16px;\n  text-transform: capitalize;\n  color: #ffffff;\n  margin-bottom: 10px;\n`\n\nconst Dflex = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  align-items: center;\n`\n\nconst Number = styled.h3`\n  color: #f4c708;\n  font-size: 24px;\n  font-family: 'Roboto Mono', monospace !important;\n  font-weight: 600;\n  position: relative;\n  transform: scale(1);\n  text-shadow: -1px 0 1px #c5a354, 0 1px 1px #e0b649, 5px 5px 10px rgb(179 167 106 / 78%),\n    -5px -5px 10px rgb(183 155 65 / 40%);\n\n  &:before {\n    content: attr(data-heading);\n    left: 0;\n    top: 0;\n    position: absolute;\n    z-index: 1;\n    background: linear-gradient(\n      to bottom,\n      #ffe047 22%,\n      #fff144 24%,\n      #cfc09f 26%,\n      #ffe686 27%,\n      #ffecb3 40%,\n      #ffe14f 78%\n    );\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    text-shadow: none;\n  }\n`\n\nconst Ticket = styled.div`\n  background: url('../images/staking/bg-button.png') no-repeat center center;\n  background-size: contain;\n  width: 100%;\n  height: 36px;\n  text-transform: uppercase;\n  text-align: center;\n  line-height: 36px;\n  font-size: 14px;\n  font-weight: 600;\n`\n\nexport default CardNFT\n","// import axios from 'axios'\nimport Page from 'components/layout/Page'\nimport React, { useState } from 'react'\nimport { TabContent, TabPane } from 'reactstrap'\nimport styled from 'styled-components'\nimport { getAddress } from 'ethers/lib/utils'\nimport { NFT } from '../../config/constants/types'\nimport NavBar from './components/Navbar'\nimport notification from '../Staking/Components/Alert'\nimport { mapperService } from '../../services/index'\nimport { useNFTContract } from '../../hooks/useContract'\nimport { getNFTContract } from '../../utils/contractHelpers'\nimport { useActiveWeb3React } from '../../hooks/index'\nimport useWeb3Provider from '../../hooks/useWeb3Provider'\nimport CardNFT from './components/CardToken'\nimport { useEthCollectionFullInfo } from '../../hooks/useCollection'\n\nconst Bridge: React.FC = () => {\n  const [activeTab, setActiveTab] = useState<string>('1')\n  const myCollection = useEthCollectionFullInfo()\n  console.log('my collection : ', myCollection)\n\n  const registerMapping = async (index: number) => {\n    try {\n      const token = myCollection[index]\n\n      await mapperService.requestMapping({\n        chain_id: 80001,\n        child_token: '',\n        decimals: 0,\n        email: 'kh1em9800@gmail.com',\n        map_type: 'POS',\n        mintable: false,\n        name: `${token.tokenName} (PoS)`,\n        root_token: getAddress(token.contractAddress),\n        symbol: token.tokenSymbol,\n        token_type: 'ERC721',\n        uri: null,\n      })\n\n      notification('success', { message: 'Success', description: 'Mapping request sent to server' })\n    } catch (error) {\n      notification('error', { message: 'Error', description: error?.message })\n    }\n  }\n\n  const toggle = (tab: string) => {\n    if (activeTab !== tab) setActiveTab(tab)\n  }\n\n  return (\n    <Page>\n      <StakingPage>\n        <NavBar activeTab={activeTab} toggle={toggle} />\n        <TabContent activeTab={activeTab}>\n          <TabPane tabId=\"1\">\n            {myCollection.map((item, index) => (\n              <CardNFT\n                tokenID={item.tokenID}\n                contractAddress={item.contractAddress}\n                image={item.image}\n                index={index}\n                onRegister={registerMapping}\n              />\n            ))}\n          </TabPane>\n\n          <TabPane tabId=\"2\"></TabPane>\n\n          <TabPane tabId=\"3\"></TabPane>\n        </TabContent>\n      </StakingPage>\n    </Page>\n  )\n}\n\nconst StakingPage = styled.div`\n  .align-center {\n    display: unset;\n\n    @media (min-width: 768px) {\n      display: flex;\n      justify-content: center;\n    }\n\n    &:hover {\n      cursor: pointer;\n\n      .thumb {\n        transform: scale(0.9);\n        transition: all 0.9s;\n      }\n\n      .effect-light {\n        text-align: center;\n        font-size: 1.2em;\n        color: #fff;\n        font-weight: 700;\n        text-transform: uppercase;\n        animation: blur 0.75s ease-out infinite;\n        text-shadow: 0px 0px 5px #fff, 0px 0px 7px #fff;\n      }\n    }\n  }\n\n  .space-mb {\n    margin-bottom: 40px;\n\n    @media (max-width: 768px) {\n      margin-bottom: 40px;\n      padding-bottom: 40px;\n      border-bottom: 1px solid #ffffff57;\n\n      &:last-child {\n        border: none;\n      }\n    }\n  }\n`\n\nexport default Bridge\n\n// 'https://api-rinkeby.etherscan.io/api?module=account&action=tokennfttx&address=0x0d5375E211Ce255513f4246Bf934C1762cD2B80F&sort=asc&apikey=H73WJKKZ7PP5WGF9C11EAPU8MJKY9BNHIJ'\n"],"sourceRoot":""}