{"version":3,"sources":["views/Lottery/helpers/CountdownHelpers.ts","views/Lottery/components/LotteryProgress.tsx","views/Lottery/components/Hero.tsx","views/Lottery/components/WinningNumbers.tsx","views/Lottery/components/PrizeGrid.tsx","views/Lottery/components/TotalPrizesCard/index.tsx","views/Lottery/components/Loading.tsx","views/Lottery/components/TicketCard/UserTicketsModal.tsx","views/Lottery/components/YourPrizesCard/PrizesWonContent.tsx","views/Lottery/components/YourPrizesCard/NoPrizesContent.tsx","views/Lottery/components/YourPrizesCard/index.tsx","views/Lottery/components/UnlockWalletCard.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx","views/Lottery/components/TicketCard/PurchaseWarningModal.tsx","views/Lottery/components/TicketCard/TicketActions.tsx","views/Lottery/components/TicketCard/index.tsx","views/Lottery/components/HowItWorks.tsx","views/Lottery/components/PastLotteryRoundViewer/PastRoundCardError.tsx","views/Lottery/components/LotteryCardHeading.tsx","views/Lottery/components/PastLotteryRoundViewer/PastLotteryActions.tsx","views/Lottery/helpers/formatLotteryDate.ts","views/Lottery/components/Timestamp.tsx","views/Lottery/components/PastLotteryRoundViewer/PastLotterySearcher.tsx","views/Lottery/components/PastLotteryRoundViewer/PastRoundCardDetails.tsx","views/Lottery/components/PastLotteryRoundViewer/PastRoundCard.tsx","views/Lottery/components/PastLotteryRoundViewer/index.tsx","views/Lottery/components/PastDrawsHistory/HistoryChart.tsx","views/Lottery/components/PastDrawsHistory/Legend.tsx","views/Lottery/components/PastDrawsHistory/PastDrawsHistoryCard.tsx","views/Lottery/Lottery.tsx"],"names":["hoursAndMinutesString","hours","minutes","parseInt","getTicketSaleTime","currentMillis","msUntilNextTicketSale","getNextTicketSaleTime","getTimePeriods","getTimeRemainDraw","endTime","now","Date","getTime","setDate","getDate","remain","hh","pad","Math","floor","mm","num","concat","toString","substr","ProgressWrapper","styled","div","TopTextWrapper","BottomTextWrapper","StyledPrimaryText","Text","LotteryProgress","chainId","useActiveWeb3React","fastRefresh","useRefresh","useState","timeRemainDraw","setTimeRemainDraw","timeRemainSale","setTimeRemainSale","percentRemain","setPercentRemain","TranslateString","useI18n","lotteryHasDrawn","useGetLotteryHasDrawn","URL","useCurrentTime","BASE_API_ADMIN_PRO","BASE_API_ADMIN","useEffect","a","timeEndLottery","timeStartLottery","axios","get","data","setHours","timeDrawLottery","timeStartNewPhase","fetchTimeLottery","primaryStep","secondaryStep","fontSize","bold","color","Title","Heading","attrs","as","size","Blurb","StyledHero","StyledContainer","Container","theme","mediaQueries","sm","LeftWrapper","lg","RightWrapper","ContentDes","Hero","src","alt","CardBodyNew","Row","RowNoPadding","Column","CenteredText","CenteredTextWithPadding","TicketNumberBox","StyledCardHeader","CardWrapper","props","colors","secondary","StyledCardContentInner","WinningNumbers","account","useWeb3React","winNumbers","useWinningNumbers","MatchedNumber4","useMatchingRewardLength","MatchedNumber3","MatchedNumber2","style","map","number","index","CardValue","value","decimals","fontWeight","Grid","pastDraw","RightAlignedText","RightAlignedHeading","GridItem","marginBottom","PastDrawGridItem","GridPrize","CardBusd","span","PrizeGrid","lotteryPrizeAmount","jackpotMatches","twoTicketMatches","threeTicketMatches","fourMatchesAmount","toFixed","threeMatchesAmount","twoMatchesAmount","burnAmount","cakeBusdPrice","usePriceLuckyBusd","getCakeBusdValue","amount","BigNumber","multipliedBy","toNumber","padding","className","textShadow","eq","CardBusdValue","BoxTotal","CardHeading","Right","Left","IconWrapper","PrizeCountWrapper","ExpandingWrapper","showFooter","BoxLucky","Dollar","RoundPrize","TotalPrizesCard","indexRoute","setIndexRoute","setShowFooter","getBalanceNumber","useTotalRewards","lotteryPrizeAmountBusd","lotteryPrizeWithCommaSeparators","toLocaleString","currentLotteryNumber","useContext","PastLotteryDataContext","lotteryContract","useContract","getLotteryAddress","lotteryAbi","getLotteryIssueIndex","fetchLotteryIndex","mb","alignItems","justifyContent","height","width","ExpandableSectionButton","onClick","expanded","StyledLoading","Loading","RewardP","TicketsList","primary","StyledButton","Button","spacing","UserTicketsModal","myTicketNumbers","onDismiss","from","rewardMatch","useCallback","n","i","length","listItems","emoji","Array","join","title","TICKETS","variant","WinningsWrapper","StyledCardActions","spinnerIcon","spin","PrizesWonContent","requestedClaim","setRequestedClaim","isClaimLoading","setIsClaimLoading","useTotalClaim","claimLoading","claimAmount","onMultiClaim","useMultiClaimLottery","tickets","useTickets","useModal","onPresentMyTickets","addTransaction","useTransactionAdder","handleClaim","txHash","summary","console","error","on","winnings","marginRight","disabled","Wrapper","TextWrapper","StyledText","Image","img","md","NoPrizesContent","StyledCard","Card","isDisabled","textDisabled","YourPrizesCard","isAWin","isActive","StyledCardBody","CardBody","StyledHeading","UnlockWalletCard","UnlockButton","BuyTicketModal","max","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","getFullDisplayBalance","maxTickets","LOTTERY_TICKET_PRICE","ticketsLength","onMultiBuy","useMultiBuyLottery","maxNumber","useMaxNumber","handleBuy","numbers","apply","random","multiBuy","times","pow","then","response","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","LOTTERY_MAX_TICKET_IN_ROUND","TicketInput","onSelectMax","onChange","e","currentTarget","symbol","availableSymbol","Tips","Announce","Final","ModalActions","id","WarningModal","newTransactionsFirst","b","addedTime","CardActions","Dflex","TicketCard","balanceToken","setBalanceToken","setTickets","allowance","setAllowance","contractBEP20","XLUCKY_TESTNET_ADDRESSES","bep20Abi","useContractTemp","ticketsContract","getLotteryTicketAddress","lotteryTicketAbi","PurchaseWarningModal","tokenName","onPresentBuy","listenApproveEvent","useUtilityToken","getTickets","res","fetchBalance","fetchApprovalData","log","balanceOf","catch","requestedApproval","setRequestedApproval","useApproveCallbackCustom","approval","onAttemptToApprove","handleApprove","allTransactions","useAllTransactions","sortedRecentTransactions","Object","values","filter","isTransactionRecent","sort","getStatus","tx","receipt","hash","isSecondCard","CardHeader","TicketCountWrapper","TicketActions","LayoutWrapper","SectionTitle","TitleMain","h2","SubTitle","p","BoxItem","Item","InerItem","h3","Desc","Step","HowItWorks","PastRoundCardError","message","BoxContent","NumberValue","LotteryCardHeading","valueToDisplay","children","Icon","Ic","flexDirection","item","key","defaultProps","LinkExternal","contractLink","lotteryNumber","formatLotteryDate","lotteryDate","date","dateString","toDateString","getUTCHours","monthAndDay","split","splice","Timestamp","timeValue","SearchWrapper","InputWrapper","StyledInput","Input","ButtonWrapper","StyledBtn","PastLotterySearcher","initialLotteryNumber","onSubmit","setLotteryNumber","isError","setIsError","evt","preventDefault","type","scale","fill","isWarning","placeholder","paddingLeft","TopLotteryCardHeading","BoxCard","StyledBox","TopCard","PastRoundCardDetails","jackpotTicket","lotteryNumbers","match1Ticket","match2Ticket","match3Ticket","poolSize","oneTicketMatches","PastLotteryActions","FullWidth","PastRoundCard","PastLotteryRoundViewer","roundData","isInitialized","isLoading","state","setState","useGetRecentLotteryRoundData","initialLotteryData","mostRecentLotteryNumber","prevState","handleSubmit","getLotteryRoundData","Line","lazy","InnerWrapper","HistoryChart","historyData","historyError","getDataArray","kind","dataPoint","reverse","lineStyles","borderColor","borderWidth","pointRadius","pointHitRadius","chartData","labels","datasets","label","yAxisID","axesStyles","borderCapStyle","gridLines","display","ticks","fontFamily","fontColor","lineHeight","maxRotation","beginAtZero","autoSkipPadding","userCallback","options","legend","scales","yAxes","position","xAxes","fallback","LegendItem","Circle","isPoolSize","Legend","PastDrawsHistoryCard","SecondCardColumnWrapper","Lottery","setHistoryData","setHistoryError","setCurrentLotteryNumber","setMostRecentLotteryNumber","url","fetch","json","previousLotteryNumber","getInitialLotteryIndex","Page","Provider"],"mappings":"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","file":"static/js/21.d0eb533d.chunk.js","sourcesContent":["import getTimePeriods from 'utils/getTimePeriods'\n\n// lottery draws UTC: 02:00 (10:00 SGT), 14:00 (22:00 SGT)\nconst lotteryDrawHoursUtc = [2, 14]\n\nconst getClosestLotteryHour = (currentHour) => {\n  switch (true) {\n    case currentHour < lotteryDrawHoursUtc[0] || currentHour >= lotteryDrawHoursUtc[1]:\n      return lotteryDrawHoursUtc[0]\n    case currentHour < lotteryDrawHoursUtc[1]:\n      return lotteryDrawHoursUtc[1]\n    default:\n      return 0\n  }\n}\n\nconst getNextLotteryDrawTime = (currentMillis) => {\n  const date = new Date(currentMillis)\n  const currentHour = date.getUTCHours()\n  const nextLotteryHour = getClosestLotteryHour(currentHour)\n  // next lottery is tomorrow if the next lottery is at 2am UTC...\n  // ...and current time is between 02:00am & 23:59pm UTC\n  const nextLotteryIsTomorrow = nextLotteryHour === 2 && currentHour >= 2 && currentHour <= 23\n  let millisTimeOfNextDraw\n\n  if (nextLotteryIsTomorrow) {\n    const tomorrow = new Date(currentMillis)\n    const nextDay = tomorrow.getUTCDate() + 1\n    tomorrow.setUTCDate(nextDay)\n    millisTimeOfNextDraw = tomorrow.setUTCHours(nextLotteryHour, 0, 0, 0)\n  } else {\n    millisTimeOfNextDraw = date.setUTCHours(nextLotteryHour, 0, 0, 0)\n  }\n\n  return millisTimeOfNextDraw\n}\n\n// @ts-ignore\nconst getNextTicketSaleTime = (currentMillis) => (parseInt(currentMillis / 3600000) + 1) * 3600000\nconst hoursAndMinutesString = (hours, minutes) => `${parseInt(hours)}h, ${parseInt(minutes)}m`\n\nexport const getTicketSaleTime = (currentMillis): string => {\n  const nextTicketSaleTime = getNextTicketSaleTime(currentMillis)\n  const msUntilNextTicketSale = nextTicketSaleTime - currentMillis\n  const { minutes } = getTimePeriods(msUntilNextTicketSale / 1000)\n  const { hours } = getTimePeriods(msUntilNextTicketSale / 1000)\n  return hoursAndMinutesString(hours, minutes)\n}\n\nexport const getLotteryDrawTime = (currentMillis): string => {\n  const nextLotteryDrawTime = getNextLotteryDrawTime(currentMillis)\n  const msUntilLotteryDraw = nextLotteryDrawTime - currentMillis\n  const { minutes } = getTimePeriods(msUntilLotteryDraw / 1000)\n  const { hours } = getTimePeriods(msUntilLotteryDraw / 1000)\n  return hoursAndMinutesString(hours, minutes)\n}\n\nexport const getTicketSaleStep = () => (1 / 12) * 100\n\nexport const getLotteryDrawStep = (currentMillis) => {\n  const msBetweenLotteries = 43200000 * 2\n  const endTime = getNextLotteryDrawTime(currentMillis)\n  const msUntilLotteryDraw = endTime - currentMillis\n  const percentageRemaining = (msUntilLotteryDraw / msBetweenLotteries) * 100\n  return 100 - percentageRemaining\n}\n\nexport const getTimeRemainDraw = (endTime: Date) => {\n  const now = new Date();\n  if (now.getTime() > endTime.getTime()){\n    endTime.setDate(endTime.getDate() + 1);\n  }\n  const remain = ((endTime.getTime() - now.getTime()) / 1000);\n  const hh = pad(Math.floor((remain / 60 / 60) % 60));\n  const mm = pad(Math.floor((remain / 60) % 60));\n\n  return `${hh}h: ${mm}m`;\n}\nfunction pad(num) {\n  return (\"0\".concat(num.toString())).substr(-2);\n}","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Text, Progress } from '@luckyswap/uikit'\nimport axios from 'axios'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport { useCurrentTime } from 'hooks/useTimer'\nimport { BASE_API_ADMIN, BASE_API_ADMIN_PRO } from 'config'\nimport useRefresh from 'hooks/useRefresh'\nimport { useActiveWeb3React } from 'hooks'\nimport {\n  getLotteryDrawTime,\n  getLotteryDrawStep,\n  getTicketSaleTime,\n  getTicketSaleStep,\n  getTimeRemainDraw,\n} from '../helpers/CountdownHelpers'\n\nconst ProgressWrapper = styled.div`\n  display: block;\n  width: 100%;\n`\n\nconst TopTextWrapper = styled.div`\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`\n\nconst BottomTextWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`\n\nconst StyledPrimaryText = styled(Text)`\n  margin-right: 16px;\n`\n// const timeEndLottery = new Date;\n// timeEndLottery.setHours(23, 0, 0);\n\n// const timeStartLottery = new Date;\n// timeStartLottery.setHours(24, 0, 0);\n\n// const timeStartLottery = new Date(19, 0, 0);\n\nconst LotteryProgress = () => {\n  const { chainId } = useActiveWeb3React();\n  const { fastRefresh } = useRefresh()\n  const [timeRemainDraw, setTimeRemainDraw] = useState(\"\");\n  const [timeRemainSale, setTimeRemainSale] = useState(\"\");\n  const [percentRemain, setPercentRemain] = useState(0)\n  \n\n  const TranslateString = useI18n()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const currentMillis = useCurrentTime()  \n\n  const URL = chainId === 56 ? BASE_API_ADMIN_PRO : BASE_API_ADMIN;\n\n\n  useEffect(() => {\n    const fetchTimeLottery = async () => {\n      const timeEndLottery = new Date();\n      const timeStartLottery = new Date();\n      const {data} = await axios.get(`${URL}/lotteries`);\n      const now = new Date();\n\n      // set time remain to end lottery phase\n      timeEndLottery.setHours(data[0].timeDrawLottery.hh, data[0].timeDrawLottery.mm, 0);\n      setTimeRemainDraw(getTimeRemainDraw(timeEndLottery));\n\n      // set time remain to start new lottery phase\n      timeStartLottery.setHours(data[0].timeStartNewPhase.hh, data[0].timeStartNewPhase.mm, 0);\n      setTimeRemainSale(getTimeRemainDraw(timeStartLottery));\n\n      \n      if (lotteryHasDrawn){\n        setPercentRemain( 100 - ((timeStartLottery.getTime() - now.getTime()) * 100 / 86400000));\n      }\n      else \n        setPercentRemain( 100 - ((timeEndLottery.getTime() - now.getTime()) * 100 / 86400000));\n    }\n    fetchTimeLottery();\n  },[fastRefresh, lotteryHasDrawn, URL])\n\n  return (\n    <ProgressWrapper>\n      <Progress primaryStep={percentRemain} secondaryStep={ (1/24) / 100} />\n      <TopTextWrapper>\n        <StyledPrimaryText fontSize=\"20px\" bold color=\"yellow\">\n          {lotteryHasDrawn ? timeRemainSale : timeRemainDraw}\n        </StyledPrimaryText>\n        <Text fontSize=\"20px\" bold color=\"invertedContrast\">\n          {lotteryHasDrawn ? TranslateString(434, 'Until ticket sale') : TranslateString(492, 'Until lottery draw')}\n        </Text>\n      </TopTextWrapper>\n      {lotteryHasDrawn && (\n        <BottomTextWrapper>\n          <Text color=\"invertedContrast\">\n            {/* {timeUntilLotteryDraw} {TranslateString(492, 'Until lottery draw')} */}\n          </Text>\n        </BottomTextWrapper>\n      )}\n    </ProgressWrapper>\n  )\n}\n\nexport default LotteryProgress\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Container from 'components/layout/Container'\nimport LotteryProgress from './LotteryProgress'\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: rgb(243, 193, 17);\n  margin-bottom: 5px;\n`\n\nconst Blurb = styled(Text)`\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst StyledHero = styled.div`\n  // background: url('../images/large-pc.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  padding-bottom: 60px;\n  padding-top: 60px;\n  background-color: #0000001a;\n`\n\nconst StyledContainer = styled(Container)`\n  display: grid;\n  grid-template-columns: 1fr;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: 1fr 400px;\n  }\n`\n\nconst LeftWrapper = styled.div`\n  flex: 1;\n  padding-right: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-right: 32px;\n  }\n`\n\nconst RightWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  flex: 1;\n  padding-left: 0;\n  margin-top: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0;\n    padding-left: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-left: 32px;\n  }\n`\n\nconst ContentDes = styled.div`\n  margin-bottom: 20px;\n`\n\nconst Hero = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledHero>\n      <StyledContainer>\n        <LeftWrapper>\n          <img src=\"images/banner-jackpot.png\" alt=\"\" />\n        </LeftWrapper>\n\n        <RightWrapper>\n          <ContentDes>\n            <Title>{TranslateString(708, 'The LUCKY Lottery')}</Title>\n            <Blurb>{TranslateString(710, 'Buy tickets with LUCKY for collect more NFTs')}</Blurb>\n            <Blurb>{TranslateString(712, 'Win if 2, 3, or 4 of your ticket numbers match!')}</Blurb>\n          </ContentDes>\n          <LotteryProgress />\n        </RightWrapper>\n      </StyledContainer>\n    </StyledHero>\n  )\n}\n\nexport default Hero\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Card, CardBody } from '@luckyswap/uikit'\nimport { useWinningNumbers, useMatchingRewardLength } from 'hooks/useTickets'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport CardValue from '../../Home/components/CardValue'\n\nconst WinningNumbers: React.FC = () => {\n  const { account } = useWeb3React()\n  const winNumbers = useWinningNumbers()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const MatchedNumber4 = useMatchingRewardLength(4)\n  const MatchedNumber3 = useMatchingRewardLength(3)\n  const MatchedNumber2 = useMatchingRewardLength(2)\n  const TranslateString = useI18n()\n\n  return (\n    <CardWrapper>\n      <CardBodyNew>\n        <StyledCardContentInner>\n          <StyledCardHeader>\n            <Title style={{ color: 'rgb(243, 193, 17)' }}>\n              {account && lotteryHasDrawn\n                ? `${TranslateString(570, 'Latest Winning Numbers')}`\n                : TranslateString(440, 'Latest Winning Numbers')}\n            </Title>\n          </StyledCardHeader>\n          <Row>\n            {/* <img\n              alt=\"\"\n              src=\"https://merlinlab.com/static/media/leftGoldenCoin.6aef3b76.svg\"\n              className=\"sc-iCfLBT sc-ezbkgU gvyEtt jElfkq\"\n            />\n            <img\n              alt=\"\"\n              src=\"https://merlinlab.com/static/media/rightGoldenCoin.e795d41c.svg\"\n              className=\"sc-iCfLBT sc-ezbkgU KkWOV jElfkq\"\n            /> */}\n            {winNumbers.map((number, index) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <TicketNumberBox key={index}>\n                <CenteredText>\n                  <CardValue\n                bold\n                color=\"\"\n                value={number}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n                  </CenteredText>\n              </TicketNumberBox>\n            ))}\n          </Row>\n          <Column>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {/* {TranslateString(442, 'Tickets matching 4 numbers:')} */}\n                Tickets matching<strong style={{fontWeight: 900}}> 4 </strong>numbers:\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111', fontWeight: 900 }}>{MatchedNumber4}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {/* {TranslateString(444, 'Tickets matching 3 numbers:')} */}\n                Tickets matching<strong style={{fontWeight: 900}}> 3 </strong>numbers:\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111', fontWeight: 900 }}>{MatchedNumber3}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {/* {TranslateString(446, 'Tickets matching 2 numbers:')} */}\n                Tickets matching<strong style={{fontWeight: 900}}> 2 </strong>numbers:\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111', fontWeight: 900 }}>{MatchedNumber2}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n          </Column>\n\n          {/* <Link href=\"/\" target=\"_blank\">\n            {TranslateString(448, 'Export recent winning numbers')}\n          </Link> */}\n        </StyledCardContentInner>\n      </CardBodyNew>\n    </CardWrapper>\n  )\n}\n\nconst CardBodyNew = styled.div`\n  position: relative;\n  background-color: rgb(43 41 41);\n  border: 0.0625rem solid rgba(255, 255, 255, 0.2);\n  border-radius: 1.25rem;\n  padding: 24px;\n  min-height: 496px;\n`\n\nconst Link = styled.a`\n  margin-top: 1em;\n  text-decoration: none;\n  color: #101010;\n  background-color: transparent ;\n  border-radius: 12px;\n  padding: 17px 25px;\n  font-weight: 500;\n  white-space: nowrap;\n  border-radius: 100px;\n  border: 1px solid #F3C111;\n  color: #F3C111;\n  padding: 11px 60px;\n  font-size: 26px;\n  line-height: 30px;\n\n  @media (min-width) {\n    padding: 10px 25px;\n  }\n\n  &:hover {\n    background-color: #ffda3b;\n    color: #101010;\n    transition: 0.5s;\n  }\n`\n\nconst Row = styled.div`\n  margin-top: 1em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  border: 1px solid #f3c111;\n  border-radius: 14px;\n`\n\nconst RabbitRow = styled.div`\n  margin-top: -2.3em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n\n  @media (max-width: 768px) {\n    display: none;\n  }\n`\n\nconst RabbitRowSmall = styled.div`\n  margin-top: -2.3em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n\n  @media (min-width: 768px) {\n    display: none;\n  }\n`\n\nconst CardImage = styled.div`\n  text-align: center;\n`\n\nconst CardImageFirst = styled.div`\n  text-align: center;\n  margin-left: -1.2em;\n\n  @media (max-width: 600) {\n    margin-left: -0.2em;\n  }\n`\n\nconst RowNoPadding = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 10px;\n`\n\nconst Column = styled.div`\n  margin-top: 1em;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`\n\nconst CenteredText = styled.div`\n  text-align: center;\n  align-items: center;\n`\n\nconst CenteredTextWithPadding = styled.div`\n  text-align: center;\n  align-items: center;\n  padding-left: 2px;\n  padding-right: 2px;\n  font-weight: 500;\n  font-size: 26px;\n`\n\nconst TicketNumberBox = styled.div`\n  padding: 10px;\n  border-radius: 12px;\n  // text-shadow: rgb(255 214 0) 0px 0px 12px;\n  // background: linear-gradient(180deg, #54dade 0%, #24c7d6 76.22%);\n  color: white;\n  font-size: 20px;\n  font-weight: 900;\n  margin: 10px;\n  margin-bottom: 7px;\n  width: 40px;\n  color: #F3C111;\n\n  @media (min-width: 768px) {\n    font-size: 64px;\n    margin: 20px;\n    background: url('../images/bg-number.svg');\n    background-repeat: no-repeat;\n    width: 120px;\n    min-height: 150px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n  }\n`\n\nconst RabbitBox = styled.div`\n  /* padding: 10px; */\n  border-radius: 12px;\n  margin: 16px 20px;\n  width: 60px;\n`\n\nconst RabbitBoxSmall = styled.div`\n  padding-top: 10px;\n  padding-left: 10px;\n  border-radius: 12px;\n  margin: 20px;\n  width: 20px;\n`\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`\n\nconst CardWrapper = styled.div`\n  margin-bottom: 30px;\n`\n\nconst Title = styled.div`\n  color: ${(props) => props.theme.colors.secondary};\n  font-size: 34px;\n  width: 50vw;\n  text-align: center;\n  font-weight: 1000;\n`\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n\n  &:before {\n    position: absolute;\n    top: 0;\n    left: 0;\n    content: '';\n    background: url('../images/jackpot-l.png');\n    width: 220px;\n    height: 496px;\n\n    @media (max-width: 991px) {\n      opacity: 0.2;\n    }\n  }\n\n  &:after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    content: '';\n    background: url('../images/jackpot-r.png');\n    width: 220px;\n    height: 496px;\n\n    @media (max-width: 991px) {\n      opacity: 0.2;\n    }\n  }\n`\n\nexport default WinningNumbers\n","import React from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { Heading, Text } from '@luckyswap/uikit'\nimport { BigNumber } from 'bignumber.js'\nimport { usePriceLuckyBusd } from 'state/hooks'\nimport CardBusdValue from '../../Home/components/CardBusdValue'\nimport CardValue from '../../Home/components/CardValue';\n\nexport interface PrizeGridProps {\n  lotteryPrizeAmount?: number\n  pastDraw?: boolean\n  jackpotMatches?: number\n  oneTicketMatches?: number\n  twoTicketMatches?: number\n  threeTicketMatches?: number\n}\n\nconst Grid = styled.div<{ pastDraw?: boolean }>`\n  display: grid;\n  grid-template-columns: repeat(${(props) => (props.pastDraw ? 3 : 2)}, 1fr);\n  grid-template-rows: repeat(4, auto);\n`\n\nconst RightAlignedText = styled(Text)`\n  padding: 8px 0;\n`\n\nconst RightAlignedHeading = styled(Heading)`\n  \n`\n\nconst GridItem = styled.div<{ marginBottom?: string }>`\n  margin-bottom: ${(props) => (props.marginBottom ? props.marginBottom : '10px')};\n  text-align: center;\n  &:nth-child(3), &:nth-child(4){\n    background: rgba(243, 193, 17, 0.15);\n  }\n  &:nth-child(5), &:nth-child(6){\n    background: rgba(255, 255, 255, 0.15);\n  }\n  &:nth-child(7), &:nth-child(8){\n    background: rgba(255, 255, 255, 0.05);\n  }\n`\n\nconst PastDrawGridItem = styled(GridItem)`\n  transform: translate(-40%, 0%);\n`\nconst GridPrize = styled.div`\n  .text{\n    padding: 8px 0;\n  }\n`\nconst CardBusd = styled.span`\n  font-size: 13px;\n  margin-right: 20px;\n  color: #F3C111;\n`\n\nconst PrizeGrid: React.FC<PrizeGridProps> = ({\n  lotteryPrizeAmount = 0,\n  pastDraw = false,\n  jackpotMatches,\n  twoTicketMatches,\n  threeTicketMatches,\n}) => {\n  const fourMatchesAmount = +((lotteryPrizeAmount / 100) * 50).toFixed(0)\n  const threeMatchesAmount = +((lotteryPrizeAmount / 100) * 20).toFixed(0)\n  const twoMatchesAmount = +((lotteryPrizeAmount / 100) * 10).toFixed(0)\n  const burnAmount = +((lotteryPrizeAmount / 100) * 20).toFixed(0)\n  const TranslateString = useI18n()\n  const cakeBusdPrice = usePriceLuckyBusd()\n\n  const getCakeBusdValue = (amount: number) => {\n    return new BigNumber(amount).multipliedBy(cakeBusdPrice).toNumber()\n  }\n\n  return (\n    <GridPrize>\n    <Grid pastDraw={pastDraw}>\n      <GridItem>\n        <Text fontSize=\"24px\" color=\"#F3C111\">\n          {TranslateString(756, 'No. Matched')}\n        </Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedText padding=\"0px\" fontSize=\"14px\" color=\"textSubtle\">\n            {TranslateString(754, 'Winners')}\n          </RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText style={{padding: 0}}  fontSize=\"24px\" color=\"#F3C111\">\n          {TranslateString(752, 'Prize Pot')}\n        </RightAlignedText>\n      </GridItem>\n      {/* 4 matches row */}\n      <GridItem>\n        <Heading className=\"text\" style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }} size=\"md\">\n          4\n        </Heading>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedHeading className=\"text\" size=\"md\">{jackpotMatches}</RightAlignedHeading>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedHeading className=\"text\" size=\"md\">\n          <CardBusd>\n            {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getCakeBusdValue(fourMatchesAmount)} />}  \n          </CardBusd>\n          <CardValue\n                bold\n                color=\"\"\n                value={fourMatchesAmount}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n          {/* {fourMatchesAmount.toLocaleString()} */}\n        </RightAlignedHeading>\n      </GridItem>\n      {/* 3 matches row */}\n      <GridItem style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }}>\n        <Text className=\"text\" padding=\"8px 0\" bold>3</Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem >\n          <RightAlignedText className=\"text\" bold>{threeTicketMatches}</RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText>\n          <CardBusd>\n            {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getCakeBusdValue(threeMatchesAmount)} />}  \n          </CardBusd>\n          <CardValue\n                bold\n                color=\"\"\n                value={threeMatchesAmount}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n          {/* {threeMatchesAmount.toLocaleString()} */}\n        </RightAlignedText>\n      </GridItem>\n      {/* 2 matches row */}\n      <GridItem style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }}>\n        <Text className=\"text\">2</Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedText className=\"text\">{twoTicketMatches}</RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText>\n          <CardBusd>\n            {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getCakeBusdValue(twoMatchesAmount)} />}\n          </CardBusd>\n          <CardValue\n                bold\n                color=\"\"\n                value={twoMatchesAmount}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n          {/* {twoMatchesAmount.toLocaleString()} */}\n        </RightAlignedText>\n      </GridItem>\n      {/* Burn row */}\n      <GridItem marginBottom=\"0\">\n        <Text>{TranslateString(999, `${pastDraw ? 'Burned' : 'To burn'}`)}:</Text>\n      </GridItem>\n      {pastDraw ? (\n        <>\n          <GridItem marginBottom=\"0\" />\n          <GridItem marginBottom=\"0\">\n            <RightAlignedText>\n              <CardBusd>\n                {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getCakeBusdValue(burnAmount)} />}\n              </CardBusd>\n              <CardValue\n                bold\n                color=\"\"\n                value={burnAmount}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n              {/* {burnAmount.toLocaleString()} */}\n            </RightAlignedText>\n          </GridItem>\n        </>\n      ) : (\n        <GridItem marginBottom=\"0\">\n          <RightAlignedText>\n            <CardBusd>\n              {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getCakeBusdValue(burnAmount)} />}\n            </CardBusd>\n            <CardValue\n                bold\n                color=\"\"\n                value={burnAmount}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n            {/* {burnAmount.toLocaleString()} */}\n            </RightAlignedText>\n        </GridItem>\n      )}\n    </Grid>\n    </GridPrize>\n  )\n}\n\nexport default PrizeGrid\n","import React, { useContext, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Card, CardBody, CardFooter, Text, PancakeRoundIcon, Flex, Skeleton } from '@luckyswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useTotalRewards } from 'hooks/useTickets'\nimport { getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { useContract } from 'hooks/useContract'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { getLotteryIssueIndex } from 'utils/lotteryUtils'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton/ExpandableSectionButton'\nimport { BigNumber } from 'bignumber.js'\nimport { usePriceLuckyBusd } from 'state/hooks'\nimport PrizeGrid from '../PrizeGrid'\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\nimport CardValue from '../../../Home/components/CardValue'\n\n// const Container = styled.div`\n//   margin-left: auto;\n//   margin-right: auto;\n//   max-width: 1200px;\n//   margin-bottom: 30px;\n// `\ninterface Props {\n  account: any\n}\n\nconst BoxTotal = styled.div`\n  background: linear-gradient(45deg, rgb(35 35 35) 30%, rgb(45 45 45) 100%);\n  box-shadow: 0px 0px 11px 0px rgb(16 16 16 / 57%);\n  color: #ffffff;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n  margin-bottom: 20px;\n  display: grid;\n  grid-template-columns: 1fr;\n\n  @media (min-width: 991px) {\n    grid-template-columns: 1fr 1fr ;\n    margin: 0 auto 60px;\n  }\n`\n\nconst CardHeading = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n`\n\nconst Right = styled.div`\n  display: flex;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: none;\n  }\n`\n\nconst Left = styled.div`\n  display: flex;\n`\n\nconst IconWrapper = styled.div`\n  margin-right: 16px;\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\n\nconst PrizeCountWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst ExpandingWrapper = styled.div<{ showFooter: boolean }>`\n  height: ${(props) => (props.showFooter ? '100%' : '0px')};\n  padding: 15px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 100%;\n  }\n`\nconst CardBodyNew = styled.div`\n  background-color: rgba(255, 255, 255, 0.1);\n  border: 0.0625rem solid rgba(255, 255, 255, 0.2);\n  border-radius: 1.25rem;\n  padding: 24px;\n`\n\nconst BoxLucky = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  padding: 15px 0 5px;\n\n  h2 {\n    font-size: 44px;\n    position: relative;\n    color: #f3c111;\n    font-weight: 700;\n  }\n\n  span {\n    font-size: 16px;\n    position: absolute;\n    top: 0;\n  }\n`\n\nconst Dollar = styled.div`\n  padding-left: 60px;\n`\n\nconst RoundPrize = styled.div`\n  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@500;600;700&display=swap');\n  font-family: 'Montserrat', sans-serif;\n  font-weight: 900;\n  font-size: 36px;\n  line-height: 44px;\n    color: #252525;\n    text-shadow: 1px 1px 0 #F3C111,\n    -1px 1px 0 #F3C111,\n    1px -1px 0 #F3C111,\n    -1px -1px 0 #F3C111,\n    0px 1px 0 #F3C111,\n    0px -1px 0 #F3C111,\n    -1px 0px 0 #F3C111,\n    1px 0px 0 #F3C111,\n    2px 2px 0 #F3C111,\n    -2px 2px 0 #F3C111,\n    2px -2px 0 #F3C111,\n    -2px -2px 0 #F3C111,\n    0px 2px 0 #F3C111,\n    0px -2px 0 #F3C111,\n    -2px 0px 0 #F3C111,\n    2px 0px 0 #F3C111,\n    1px 2px 0 #F3C111,\n    -1px 2px 0 #F3C111,\n    1px -2px 0 #F3C111,\n    -1px -2px 0 #F3C111,\n    2px 1px 0 #F3C111,\n    -2px 1px 0 #F3C111,\n    2px -1px 0 #F3C111,\n    -2px -1px 0 #F3C111;\n`\n\nconst TotalPrizesCard = () => {\n  const [indexRoute, setIndexRoute]  = useState(0)\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const [showFooter, setShowFooter] = useState(false)\n  const lotteryPrizeAmount = +getBalanceNumber(useTotalRewards()).toFixed(0)\n  const lotteryPrizeAmountBusd = new BigNumber(lotteryPrizeAmount).multipliedBy(usePriceLuckyBusd()).toNumber()\n  const lotteryPrizeWithCommaSeparators = lotteryPrizeAmount.toLocaleString()\n  const { currentLotteryNumber } = useContext(PastLotteryDataContext)\n\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  \n  useEffect(() => {\n    const fetchLotteryIndex = async () => {\n      if (lotteryContract) {\n        const index = await getLotteryIssueIndex(lotteryContract)\n\n        setIndexRoute(index)\n      }\n    }\n\n    fetchLotteryIndex()\n  }, [lotteryContract])\n\n\n  return (\n    <BoxTotal>\n      <CardBody>\n        {account && (\n          <Flex mb=\"55px\" alignItems=\"center\" justifyContent=\"space-between\">\n            {currentLotteryNumber === 0 && <Skeleton height={20} width={56} />}\n            <>\n              <RoundPrize>\n                {TranslateString(720, `Round #${indexRoute}`, { num: currentLotteryNumber })}\n              </RoundPrize>\n            </>\n            {/* {currentLotteryNumber > 0 && (\n                <>\n                  <Text fontSize=\"12px\" style={{ fontWeight: 600 }}>\n                    {TranslateString(720, `Round #${currentLotteryNumber}`, { num: currentLotteryNumber })}\n                  </Text>\n                </>\n              )} */}\n          </Flex>\n        )}\n        <CardHeading>\n          <Left>\n            <PrizeCountWrapper>\n              <Text fontSize=\"24px\" fontWeight=\"500\" color=\"textSubtle\">\n                {TranslateString(722, 'Total Pot:')}\n              </Text>\n              <BoxLucky>\n                <IconWrapper>\n                  <img width=\"75px\" alt=\"\" src=\"/images/icon-logo-y.png\" />\n                </IconWrapper>\n                <Heading style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px', fontSize: '44' }} size=\"lg\">\n                <CardValue\n                bold\n                color=\"\"\n                value={parseInt(lotteryPrizeWithCommaSeparators)}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue> <span>LUCKY</span>\n                </Heading>\n              </BoxLucky>\n              <Dollar>{lotteryPrizeAmountBusd !== 0 && <CardBusdValue value={lotteryPrizeAmountBusd} />}</Dollar>\n\n            </PrizeCountWrapper>\n          </Left>\n          <Right>\n            <ExpandableSectionButton onClick={() => setShowFooter(!showFooter)} expanded={showFooter} />\n          </Right>\n        </CardHeading>\n      </CardBody>\n      <ExpandingWrapper showFooter={showFooter}>\n        <CardFooter className=\"no-border\">\n          <PrizeGrid lotteryPrizeAmount={lotteryPrizeAmount} />\n        </CardFooter>\n      </ExpandingWrapper>\n    </BoxTotal>\n  )\n}\n\nexport default TotalPrizesCard\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Loading: React.FC = () => <StyledLoading />\n\nconst StyledLoading = styled.div`\n  border: 8px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 8px solid #ddd;\n  border-bottom: 8px solid #ddd;\n  width: 20px;\n  height: 20px;\n  -webkit-animation: spin 2s linear infinite;\n  animation: spin 2s linear infinite;\n  @-webkit-keyframes spin {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`\n\nexport default Loading\n","import React, { useCallback } from 'react'\nimport { Button, Modal } from '@luckyswap/uikit'\nimport styled from 'styled-components'\nimport { useWinningNumbers } from 'hooks/useTickets'\nimport useI18n from 'hooks/useI18n'\n\ninterface UserTicketsModalProps {\n  myTicketNumbers: Array<any>\n  from?: string\n  onDismiss?: () => void\n}\n\nconst UserTicketsModal: React.FC<UserTicketsModalProps> = ({ myTicketNumbers, onDismiss, from }) => {\n  const winNumbers = useWinningNumbers()\n  const TranslateString = useI18n()\n  const rewardMatch = useCallback(\n    (number) => {\n      let n = 0\n      for (let i = winNumbers.length - 1; i >= 0; i--) {\n        // eslint-disable-next-line eqeqeq\n        if (winNumbers[i] == number[i]) n++\n      }\n      return n\n    },\n    [winNumbers],\n  )\n\n  const listItems = myTicketNumbers.map((number, index) => {\n    if (rewardMatch(number[0]) > 1 && from !== 'buy') {\n      const emoji = new Array(rewardMatch(number[0]) + 1).join('🤑')\n      return (\n        // eslint-disable-next-line react/no-array-index-key\n        <RewardP key={index}>\n          {emoji}\n          {number.toString()}\n          {emoji}\n        </RewardP>\n      )\n    }\n    // eslint-disable-next-line react/no-array-index-key\n    return (\n      <p style={{ color: 'yellow' }} key={index}>\n        {number.toString()}\n      </p>\n    )\n  })\n\n  return (\n    <Modal\n      title={TranslateString(490, `My Tickets (Total: ${myTicketNumbers.length})`, { TICKETS: myTicketNumbers.length })}\n      onDismiss={onDismiss}\n    >\n      <TicketsList>\n        <h2>{listItems}</h2>\n      </TicketsList>\n      <StyledButton variant=\"secondary\" onClick={onDismiss}>\n        {TranslateString(438, 'Close')}\n      </StyledButton>\n    </Modal>\n  )\n}\n\nconst RewardP = styled.div`\n  color: #ff8c28;\n`\n\nconst TicketsList = styled.div`\n  text-align: center;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst StyledButton = styled(Button)`\n  margin-top: ${(props) => props.theme.spacing[2]}px;\n`\n\nexport default UserTicketsModal\n","import React, { useCallback, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Button, Heading, Won, useModal, AutoRenewIcon } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\nimport useTickets, { useTotalClaim } from 'hooks/useTickets'\nimport {  useContract } from 'hooks/useContract'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport Loading from '../Loading'\nimport MyTicketsModal from '../TicketCard/UserTicketsModal'\nimport CardValue from '../../../Home/components/CardValue'\n\nconst WinningsWrapper = styled.div`\n  display: flex;\n  align-items: baseline;\n`\n\nconst IconWrapper = styled.div`\n  margin-bottom: 16px;\n\n  svg {\n    width: 80px;\n    height: 80px;\n  }\n`\n\nconst StyledCardActions = styled.div`\n  margin-top: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`\n\nconst StyledButton = styled(Button)`\n  margin-top: ${(props) => props.theme.spacing[1]}px;\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\n\nconst PrizesWonContent: React.FC = () => {\n  const [requestedClaim, setRequestedClaim] = useState(false)\n  const [isClaimLoading, setIsClaimLoading] = useState(false);\n  const TranslateString = useI18n()\n  const { claimLoading, claimAmount } = useTotalClaim()\n  const { onMultiClaim } = useMultiClaimLottery()\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n\n  const tickets = useTickets()\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n  const addTransaction = useTransactionAdder()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setRequestedClaim(true)\n      setIsClaimLoading(true);\n      const txHash = await onMultiClaim();\n      if (!txHash) \n        setIsClaimLoading(false);\n        setRequestedClaim(false)\n      addTransaction(txHash, {\n        summary: 'Claim successfully!',\n      })\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedClaim(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onMultiClaim, setRequestedClaim])\n\n  useEffect(() => {\n    lotteryContract.on(\"MultiClaim\", () => {\n      setIsClaimLoading(false);\n    })\n  })\n\n  const winnings = getBalanceNumber(claimAmount).toFixed(2)\n\n\n  return (\n    <StyledCardContentInner>\n      <IconWrapper>\n        <img src=\"images/icon-gif.svg\" alt=\"gif\" />\n      </IconWrapper>\n      <Heading as=\"h3\" size=\"lg\" color=\"#1CFFBB\">\n        {TranslateString(660, 'You won!')}\n      </Heading>\n      {claimLoading && <Loading />}\n      {!claimLoading && (\n        <>\n          <WinningsWrapper>\n            <Heading as=\"h4\" size=\"xl\" style={{ marginRight: '6px' }}>\n              {winnings}\n            </Heading>\n            <Heading as=\"h4\" size=\"lg\">\n              LUCKY\n            </Heading>\n          </WinningsWrapper>\n        </>\n      )}\n      <StyledCardActions>\n        <Button\n          className=\"border-yellow\"\n          variant=\"secondary\"\n          width=\"100%\"\n          disabled={requestedClaim || isClaimLoading}\n          onClick={handleClaim}\n        >\n          {isClaimLoading && spinnerIcon}\n          {TranslateString(1056, 'Collect')}\n        </Button>\n      </StyledCardActions>\n      <StyledButton variant=\"text\" onClick={onPresentMyTickets}>\n        {TranslateString(432, 'View your tickets')}\n      </StyledButton>\n    </StyledCardContentInner>\n  )\n}\n\nexport default PrizesWonContent\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, useModal } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useTickets from 'hooks/useTickets'\nimport MyTicketsModal from '../TicketCard/UserTicketsModal'\n\nconst Wrapper = styled.div`\n  display: flex;\n`\n\nconst TextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledText = styled(Text)`\n  padding-left: 12px;\n`\n\nconst Image = styled.img`\n  margin-right: 6px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 20px;\n  }\n`\nconst StyledButton = styled(Button)`\n  padding: 0 12px;\n  height: unset;\n`\n\nconst NoPrizesContent: React.FC = () => {\n  const TranslateString = useI18n()\n  const tickets = useTickets()\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n\n  return (\n    <Wrapper>\n      <Image src=\"/images/no-prize.svg\" alt=\"no prizes won\" />\n      <TextWrapper>\n        <StyledText>{TranslateString(726, 'Sorry, no prizes to collect')}</StyledText>\n        <StyledButton variant=\"text\" onClick={onPresentMyTickets}>\n          {TranslateString(432, 'View your tickets and NFTs')}\n        </StyledButton>\n      </TextWrapper>\n    </Wrapper>\n  )\n}\n\nexport default NoPrizesContent\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody } from '@luckyswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport PrizesWonContent from './PrizesWonContent'\nimport NoPrizesContent from './NoPrizesContent'\n\nconst StyledCard = styled(Card)`\n  margin: 0 !important;\n  max-width: 100% !important;\n  border-radius: 14px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  ${(props) =>\n    props.isDisabled\n      ? `  \n        margin-top: 0;\n        background-color: unset;\n        box-shadow: unset;\n        border: 1px solid ${props.theme.colors.textDisabled};\n\n        ${props.theme.mediaQueries.sm} {\n          margin-top: 0;\n        }\n\n        ${props.theme.mediaQueries.lg} {\n          margin-top: 0;\n        }\n        `\n      : ``}\n`\n\nconst YourPrizesCard: React.FC = () => {\n  const { claimAmount } = useTotalClaim()\n\n  const winnings = getBalanceNumber(claimAmount)\n  const isAWin = winnings > 0\n\n  return (\n    <StyledCard isDisabled={!isAWin} isActive={isAWin}>\n      <CardBody>{isAWin ? <PrizesWonContent /> : <NoPrizesContent />}</CardBody>\n    </StyledCard>\n  )\n}\n\nexport default YourPrizesCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Ticket } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\n\nconst StyledCardBody = styled(CardBody)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n\nconst StyledHeading = styled(Heading)`\n  margin: 16px 0;\n`\n\nconst IconWrapper = styled.div`\n  svg {\n    width: 80px;\n    height: 80px;\n  }\n`\n\nconst UnlockWalletCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card isActive>\n      <StyledCardBody>\n        <IconWrapper>\n          <img src=\"https://merlinlab.com/assets/lottery/lottery.svg\" alt=\"\" />\n        </IconWrapper>\n        <StyledHeading size=\"md\">{TranslateString(1080, 'Unlock wallet to access lottery')}</StyledHeading>\n        <UnlockButton />\n      </StyledCardBody>\n    </Card>\n  )\n}\n\nexport default UnlockWalletCard\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@luckyswap/uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\nimport useI18n from 'hooks/useI18n'\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE, LOTTERY_MAX_TICKET_IN_ROUND } from 'config'\nimport { useContract } from 'hooks/useContract'\nimport useTickets from 'hooks/useTickets'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { useTransactionAdder } from 'state/transactions/hooks'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onConfirm?: (amount: string, numbers: Array<number>) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, 18)\n  }, [max])\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\n  }, [max])\n\n  const tickets = useTickets()\n  const ticketsLength = tickets.length\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\n\n  const { onMultiBuy } = useMultiBuyLottery()\n  const maxNumber = useMaxNumber()\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  const addTransaction = useTransactionAdder()\n\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      // await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\n      const txHash = await lotteryContract\n        .multiBuy(new BigNumber(LOTTERY_TICKET_PRICE.toString()).times(new BigNumber(10).pow(18)).toString(), numbers)\n        .then((response) => {\n          addTransaction(response, {\n            summary: 'Buy ticket successfully!',\n          })\n        })\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n  \n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\n      if (LOTTERY_MAX_TICKET_IN_ROUND - ticketsLength > LOTTERY_MAX_NUMBER_OF_TICKETS)\n        setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\n      else\n        setVal((LOTTERY_MAX_TICKET_IN_ROUND - ticketsLength).toString())\n    } else if((LOTTERY_MAX_TICKET_IN_ROUND - ticketsLength > Number(maxTickets))) {\n      setVal(maxTickets.toString())\n    } else {\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\n    }\n  }, [maxTickets, ticketsLength])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * LOTTERY_TICKET_PRICE\n  }\n  return (\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"LUCKY\"\n      />\n      <div>\n        <Tips>{TranslateString(999, `1 Ticket = ${LOTTERY_TICKET_PRICE} LUCKY`, { num: LOTTERY_TICKET_PRICE })}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {TranslateString(\n            478,\n            'Ticket purchases are final. Your LUCKY cannot be returned to you after buying tickets.',\n          )}\n        </Announce>\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} LUCKY`)}</Final>\n        <Final>{TranslateString(999, `Your ticket: ${ticketsLength}`)}</Final>\n\n      </div>\n      <ModalActions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n\n        \n        <Button\n          id=\"lottery-buy-complete\"\n          width=\"100%\"\n          variant=\"secondary\"\n          disabled={\n            pendingTx ||\n            parseInt(val) > Number(maxTickets) ||\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\n            parseInt(val) + ticketsLength > LOTTERY_MAX_TICKET_IN_ROUND ||\n            parseInt(val) < 1\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #fff;\n`\n","import React from 'react'\nimport { Button, Modal } from '@luckyswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\n\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Modal title={TranslateString(466, 'Warning')} onDismiss={onDismiss}>\n      <TicketsList>\n        {TranslateString(468, 'Lottery ticket purchases are final.')}\n        <br />\n        {TranslateString(470, 'Your CAKE will not be returned to you after you spend it to buy tickets.')}\n        <br />\n        {TranslateString(472, 'Tickets are only valid for one lottery draw, and will be burned after the draw.')}\n        <br />\n        {TranslateString(\n          474,\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\n        )}\n      </TicketsList>\n      <ModalActions>\n        <Button width=\"100%\" onClick={onDismiss}>\n          {TranslateString(476, 'I understand')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nconst TicketsList = styled.div`\n  text-align: left;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nexport default WarningModal\n","import React, { useMemo, useCallback, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, useModal } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { useContract } from 'hooks/useContract'\nimport { useApproveCallbackCustom } from 'hooks/useApproveCallback'\nimport { XLUCKY_TESTNET_ADDRESSES } from 'config'\nimport bep20Abi from 'config/abi/erc20.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport useRefresh from 'hooks/useRefresh'\nimport useUtilityToken from 'hooks/useUtilityToken'\nimport { getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport lotteryTicketAbi from 'config/abi/lotteryNft.json'\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks'\nimport { TransactionDetails } from 'state/transactions/reducer'\nimport { getTickets } from 'utils/lotteryUtils'\nimport BuyTicketModal from './BuyTicketModal'\nimport MyTicketsModal from './UserTicketsModal'\nimport PurchaseWarningModal from './PurchaseWarningModal'\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst CardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: ${(props) => props.theme.spacing[3]}px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    justify-content: space-between;\n  }\n`\n\nconst TicketCard: React.FC = () => {\n  const TranslateString = useI18n()\n  const [balanceToken, setBalanceToken] = useState(0)\n  const [tickets, setTickets] = useState([])\n  const [allowance, setAllowance] = useState(0)\n  // const allowance = useLotteryAllowance()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n\n  const { account, chainId } = useWeb3React()\n  const contractBEP20 = useContract(XLUCKY_TESTNET_ADDRESSES[chainId], bep20Abi)\n\n  const useContractTemp = useContract(XLUCKY_TESTNET_ADDRESSES[chainId], bep20Abi)\n\n  const ticketsContract = useContract(getLotteryTicketAddress(), lotteryTicketAbi)\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  const { fastRefresh } = useRefresh()\n\n  const ticketsLength = tickets.length\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\n  const [onPresentBuy] = useModal(<BuyTicketModal max={new BigNumber(balanceToken)} tokenName=\"CAKE\" />)\n\n  const { listenApproveEvent } = useUtilityToken(XLUCKY_TESTNET_ADDRESSES[chainId])\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, null)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, lotteryContract, fastRefresh, ticketsContract])\n\n  useEffect(() => {\n    const fetchApprovalData = async () => {\n      if (account && contractBEP20) {\n        try {\n          // const response = await contractBEP20?.allowance?.(account, getLotteryAddress())\n          setAllowance(new BigNumber('10000000000000000000000000000000').toNumber())\n        } catch (error) {\n          console.log(' error fetch approval data')\n        }\n      }\n    }\n    listenApproveEvent(() => fetchApprovalData())\n  }, [listenApproveEvent, account, contractBEP20])\n\n\n  useEffect(() => {\n    if (useContractTemp) {\n      useContractTemp\n        .balanceOf(account)\n        .then((data) => {\n          setBalanceToken(data.toString())\n        })\n        .catch((error) => console.log('lottery : ', error))\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account])\n\n  useEffect(() => {\n    if (useContractTemp) {\n      useContractTemp\n        .balanceOf(account)\n        .then((data) => {\n          setBalanceToken(data.toString())\n        })\n        .catch((error) => console.log('lottery : ', error))\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, fastRefresh])\n\n  useEffect(() => {\n    const fetchApprovalData = async () => {\n      if (account && contractBEP20) {\n        try {\n          const response = await contractBEP20?.allowance?.(account, getLotteryAddress())\n          setAllowance(response.toString())\n        } catch (error) {\n          console.log(' error fetch approval data')\n        }\n      }\n    }\n\n    fetchApprovalData()\n  }, [account, contractBEP20])\n  const [requestedApproval, setRequestedApproval] = useState(false)\n\n  const [approval] = useApproveCallbackCustom(XLUCKY_TESTNET_ADDRESSES[chainId], getLotteryAddress())\n\n  async function onAttemptToApprove() {\n    return approval()\n  }\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onAttemptToApprove().then()\n    } catch (e) {\n      console.error(e)\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [approval, setRequestedApproval])\n\n  const allTransactions = useAllTransactions()\n\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  const getStatus = () => {\n    const pending = sortedRecentTransactions.filter((tx) => !tx.receipt).map((tx) => tx.hash)\n    return !!pending.length\n  }\n\n  const renderLotteryTicketButtons = () => {\n    if (allowance.toString() === '0') {\n      return (\n        <Dflex>\n          <Button\n            style={{ marginRight: '8px' }}\n            width=\"100%\"\n            disabled={ticketsLength === 0}\n            variant=\"secondary\"\n            onClick={onPresentMyTickets}\n          >\n            {TranslateString(432, 'View your tickets')}\n          </Button>\n          <Button\n            className=\"border-yellow\"\n            width=\"100%\"\n            disabled={requestedApproval || getStatus()}\n            onClick={handleApprove}\n          >\n            {getStatus() ? spinnerIcon : ''}\n            {TranslateString(494, 'Approve')}\n          </Button>\n        </Dflex>\n      )\n    }\n    return (\n      <>\n        <Button\n          style={{ marginRight: '8px' }}\n          width=\"100%\"\n          disabled={ticketsLength === 0}\n          variant=\"secondary\"\n          onClick={onPresentMyTickets}\n        >\n          {TranslateString(432, 'View your tickets')}\n        </Button>\n        <Button variant=\"secondary\" id=\"lottery-buy-start\" width=\"100%\" onClick={onPresentBuy}>\n          {getStatus() ? spinnerIcon : ''}\n          {TranslateString(430, 'Buy ticket')}\n        </Button>\n      </>\n    )\n  }\n\n  return (\n    <CardActions>\n      {lotteryHasDrawn ? (\n        <Button className=\"btn-center\" disabled> {TranslateString(874, 'On sale soon')}</Button>\n      ) : (\n        renderLotteryTicketButtons()\n      )}\n    </CardActions>\n  )\n}\n\nconst Dflex = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 20px;\n  width: 100%;\n`\n\nexport default TicketCard\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, TicketRound, Text, Heading } from '@luckyswap/uikit'\nimport axios from 'axios'\n\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport useTickets from 'hooks/useTickets'\nimport { useCurrentTime } from 'hooks/useTimer'\nimport useRefresh from 'hooks/useRefresh'\nimport { useActiveWeb3React } from 'hooks';\nimport { BASE_API_ADMIN, BASE_API_ADMIN_PRO } from 'config'\nimport TicketActions from './TicketActions'\nimport { getTicketSaleTime, getTimeRemainDraw } from '../../helpers/CountdownHelpers'\n\n\ninterface CardProps {\n  isSecondCard?: boolean\n}\n\nconst StyledCard = styled(Card)<CardProps>`\n  margin: 0 !important;\n  max-width: 100% !important;\n  border-radius: 14px;\n\n  ${(props) =>\n    props.isSecondCard\n      ? `  \n        margin-top: 0;\n\n        ${props.theme.mediaQueries.sm} {\n          margin-top: 0;\n        }\n\n        ${props.theme.mediaQueries.lg} {\n          margin-top: 0;\n        }\n        `\n      : ``}\n`\n\nconst CardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n`\n\nconst IconWrapper = styled.div`\n  margin-bottom: 16px;\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\n\nconst TicketCountWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`\n\nconst TicketCard: React.FC<CardProps> = ({ isSecondCard = false }) => {\n  const { chainId }  = useActiveWeb3React();\n  const TranslateString = useI18n()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n\n  const tickets = useTickets()\n  const ticketsLength = tickets.length\n\n  const currentMillis = useCurrentTime()\n  const timeUntilTicketSale = lotteryHasDrawn && getTicketSaleTime(currentMillis)\n\n  const { fastRefresh } = useRefresh()\n  const [timeRemainDraw, setTimeRemainDraw] = useState(\"\");\n  const [timeRemainSale, setTimeRemainSale] = useState(\"\");\n\n  const URL = chainId === 56 ? BASE_API_ADMIN_PRO : BASE_API_ADMIN;\n\n  useEffect(() => {\n    const fetchTimeLottery = async () => {\n      const timeEndLottery = new Date();\n      const timeStartLottery = new Date();\n      const {data} = await axios.get(`${URL}/lotteries`);\n\n      // set time remain to end lottery phase\n      timeEndLottery.setHours(data[0].timeDrawLottery.hh, data[0].timeDrawLottery.mm, 0);\n      setTimeRemainDraw(getTimeRemainDraw(timeEndLottery));\n\n      // set time remain to start new lottery phase\n      timeStartLottery.setHours(data[0].timeStartNewPhase.hh, data[0].timeStartNewPhase.mm, 0);\n      setTimeRemainSale(getTimeRemainDraw(timeStartLottery));\n    }\n    fetchTimeLottery();\n  },[fastRefresh, URL])\n  // 12\n  return (\n    <StyledCard isSecondCard={isSecondCard}>\n      <CardBody>\n        <CardHeader>\n          <IconWrapper>\n            <img alt=\"\" src=\"../images/icon-lottery.svg\" />\n          </IconWrapper>\n          {lotteryHasDrawn ? (\n            <TicketCountWrapper>\n              <Text fontSize=\"20px\" color=\"textSubtle\">\n                {TranslateString(870, 'Your ticket for this round')}\n              </Text>\n              <Heading size=\"lg\" style={{ color: '#F3C111', fontSize: '30px' }}>\n                {timeRemainSale}\n              </Heading>\n            </TicketCountWrapper>\n          ) : (\n            <TicketCountWrapper>\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {TranslateString(724, 'Your tickets for this round')}\n              </Text>\n              <Heading size=\"lg\">{ticketsLength}</Heading>\n            </TicketCountWrapper>\n          )}\n        </CardHeader>\n        <TicketActions />\n      </CardBody>\n    </StyledCard>\n  )\n}\n\nexport default TicketCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Heading, Link, Image } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst LayoutWrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n  margin-bottom: 30px;\n  margin: 0 auto 40px;\n  display: flex;\n  flex-direction: column;\n  border-radius: 14px;\n  padding: 20px;\n  background-color: #2b2a2a;\n  text-align: center;\n`\n\nconst SectionTitle = styled.div`\n\n`\n\nconst TitleMain = styled.h2`\n  font-size: 40px;\n  line-height: 50px;\n  margin-bottom: 13px;\n  color: #fff;\n  font-weight: 700;\n  text-transform: capitalize;\n`\n\nconst SubTitle = styled.p`\n  max-width: 650px;\n  font-size: 16px;\n  line-height: 26px;\n  color: #fff;\n  margin: 0 auto;\n`\n\nconst BoxItem = styled.h2`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 20px;\n  margin-top: 30px;\n\n  @media (min-width: 768px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`\n\nconst Item = styled.div`\n  text-align: left;\n  overflow: hidden;\n  position: relative;\n  margin-bottom: 30px;\n  background: #f4c706;\n  box-shadow: 0px 30px 20px 0px rgb(0 37 93 / 15%);\n  border-radius: 15px;\n  transition: all 0.3s ease-in;\n  cursor: pointer;\n\n  &:after {\n    position: absolute;\n    content: \"\";\n    background: linear-gradient(to right,#ffd009,#f97503);\n    width: 0%;\n    height: 0%;\n    top: 50%;\n    left: 50%;\n    bottom: 0px;\n    opacity: 0;\n    transform: translate(-50%, -50%);\n    transition: all 0.3s ease-in;\n    border-radius: 50%;\n  }\n\n  &:hover {\n    transform: translateY(0px) !important;\n\n    &:after {\n      width: 100%;\n      height: 100%;\n      opacity: 1;\n      border-radius: 0%;\n    }\n\n    .btn-step {\n      color: #1a1a1a;\n\n      &:before {\n        background-color: #fce307;\n      }\n    }\n  }\n`\n\nconst InerItem = styled.div`\n  width: 100%;\n  position: relative;\n  z-index: 99;\n  padding: 30px 22px;\n  transition: 0.3s ease-in;\n`\n\nconst Title = styled.h3`\n  color: #1a1a1a;\n  font-size: 24px;\n  font-weight: 600;\n  margin-bottom: 15px;\n`\n\nconst Desc = styled.p`\n  font-size: 16px;\n  color: #464646;\n`\n\nconst Step = styled.span`\n\tdisplay: flex;\n  justify-content: center;\n  margin-left: auto;\n  width: 80px;\n\tpadding: 10px 0;\n\tborder-radius: 10rem;\n\tcolor: #fff;\n\ttext-transform: uppercase;\n\tfont-size: 1rem;\n\ttransition: all .3s;\n\tposition: relative;\n\toverflow: hidden;\n\tz-index: 1;\n\n\t&:after {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tbackground-color: #c5892e;\n\t\tborder-radius: 10rem;\n\t\tz-index: -2;\n\t}\n\n\t&:before {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\ttransition: all .3s;\n\t\tborder-radius: 10rem;\n\t\tz-index: -1;\n\t}\n`\n\nconst HowItWorks = () => {\n  // const TranslateString = useI18n()\n\n  return (\n    <LayoutWrapper>\n      <SectionTitle>\n        <TitleMain>How to Play</TitleMain>\n        <SubTitle>If the digits on your tickets match the winning numbers in the correct order, you win a portion of the prize pool Simple!</SubTitle>\n      </SectionTitle>\n\n      <BoxItem>\n        <Item>\n          <InerItem>\n            <Step className=\"btn-step\">  \n              STEP 1\n            </Step>\n\n            <Title>Buy tickets</Title>\n\n            <Desc>\n              Prices are set when the round starts, equal to 1 LUCKY per ticket.\n            </Desc>\n          </InerItem>\n        </Item>\n\n        <Item>\n          <InerItem>\n            <Step className=\"btn-step\">  \n              STEP 2\n            </Step>\n\n            <Title>Wait for the Draw</Title>\n\n            <Desc>\n              There are two draws every day: once every 24h.\n            </Desc>\n          </InerItem>\n        </Item>\n\n        <Item>\n          <InerItem>\n            <Step className=\"btn-step\">  \n              step 3\n            </Step>\n\n            <Title>Check for Prizes</Title>\n\n            <Desc>\n              Once the round&apos;s over, come back to the page and check to see if you&apos;ve won!\n            </Desc>\n          </InerItem>\n        </Item>\n      </BoxItem>\n    </LayoutWrapper>\n  )\n}\nexport default HowItWorks\n","import React from 'react'\nimport { Text } from '@luckyswap/uikit'\n\ninterface PastRoundCardErrorProps {\n  error: {\n    message: string\n  }\n}\n\nconst PastRoundCardError: React.FC<PastRoundCardErrorProps> = ({ error }) => {\n  return <Text p=\"24px\">{error.message}</Text>\n}\n\nexport default PastRoundCardError\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading, Text } from '@luckyswap/uikit'\n\ninterface HeadingProps {\n  valueToDisplay?: any\n  children?: string\n  Icon?: React.ComponentType\n  Ic?: boolean\n}\ninterface Props {\n  Icon?: React.ComponentType\n}\nconst IconWrapper = styled.div<Props>`\n  margin-right: 16px;\n\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\nconst BoxContent = styled.div`\n  display: flex;\n  img{\n    width: 75px;\n    margin-right: 20px\n  }\n`\nconst NumberValue = styled.div`\n  width: 70px;\n  height: 70px;\n  font-weight: 900;\n  margin-right: 10px;\n  border-radius: 10px;\n  color: #F3C111;\n  font-size: 34px;\n  background-image: url(../images/border.png);\n  position: relative;\n  span{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n`\n\nconst LotteryCardHeading: React.FC<HeadingProps> = ({ valueToDisplay, children, Icon, Ic, ...props }) => {\n  return (\n    <Flex {...props}>\n      {Icon && (\n        <IconWrapper>\n          <Icon />\n        </IconWrapper>\n      )}\n      <Flex className=\"box-lucky\" flexDirection=\"column\">\n        <Text fontSize=\"24px\" mb=\"20px\" color=\"textSubtle\">\n          {children}\n        </Text>\n        <BoxContent>\n          {Ic && <img src=\"../images/icon-lottery.svg\" alt=\"\" />}\n          {/* <Heading size=\"lg\">{valueToDisplay}</Heading> */}\n          {valueToDisplay?.map((item: any, key:any) => {\n            return (\n              <NumberValue><span>{item}</span></NumberValue>\n            )\n          })}\n        </BoxContent>\n      </Flex>\n    </Flex>\n  )\n}\n\nLotteryCardHeading.defaultProps = {\n  valueToDisplay: [],\n  children: '',\n}\n\nexport default LotteryCardHeading\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, LinkExternal, useModal } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useWeb3React } from '@web3-react/core'\nimport useTickets from 'hooks/useTickets'\nimport UnlockButton from 'components/UnlockButton'\nimport { SCAN_SITES } from '../../../../constants'\nimport MyTicketsModal from '../TicketCard/UserTicketsModal'\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding-top: 24px;\n  margin: 0 auto;\n  margin-bottom: 40px;\n  display: block;\n  width: max-content;\n  & > div {\n    flex: 1;\n    width: 100%;\n  }\n`\n\nconst ExternalLinkWrap = styled(LinkExternal)`\n  align-items: center;\n  display: flex;\n  height: 48px;\n  justify-content: center;\n  text-decoration: none;\n  width: 100%;\n`\nconst StyledButton = styled(Button)`\n  width: max-content;\n  color: #f3c111 !important;\n  padding: 0 70px;\n  border-radius: 100px;\n  border-color: #F3C111 !important;\n  margin: 0 auto;\n  display: block;\n  margin-right: auto !important;\n`\n\nconst TicketCard: React.FC<{ contractLink?: string; lotteryNumber?: number }> = ({ contractLink, lotteryNumber }) => {\n  const TranslateString = useI18n()\n  const tickets = useTickets(lotteryNumber)\n  const ticketsLength = tickets.length\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n  const { account, chainId } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Wrapper>\n        <UnlockButton />\n      </Wrapper>\n    )\n  }\n\n  return (\n    <Wrapper>\n      <div>\n        {/* <StyledButton\n          \n          width=\"100%\"\n          variant=\"secondary\"\n          disabled={ticketsLength === 0}\n          onClick={onPresentMyTickets}\n        >\n          {TranslateString(432, 'View Your ticket')}\n        </StyledButton> */}\n      </div>\n      {/* <div>\n        <ExternalLinkWrap href={contractLink}>\n          {TranslateString(356, `View on ${SCAN_SITES[chainId]}`)}\n        </ExternalLinkWrap>\n      </div> */}\n    </Wrapper>\n  )\n}\n\nexport default TicketCard\n","const formatLotteryDate = (lotteryDate: string) => {\n  if (!lotteryDate) {\n    return {}\n  }\n\n  const date = new Date(lotteryDate)\n\n  const dateString = date.toDateString()\n  const hours = date.getUTCHours()\n  const monthAndDay = dateString.split(' ').splice(1, 2).join(' ')\n\n  return { hours, monthAndDay }\n}\n\nexport default formatLotteryDate\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@luckyswap/uikit'\nimport formatLotteryDate from '../helpers/formatLotteryDate'\n\nconst Wrapper = styled.div`\n  padding-top: 20px;\n`\n\nconst Timestamp = ({ timeValue }) => {\n  const { monthAndDay, hours } = formatLotteryDate(timeValue)\n\n  return (\n    <Wrapper>\n      <Text fontSize=\"14px\">\n        {monthAndDay}, {hours}:00 UTC\n      </Text>\n    </Wrapper>\n  )\n}\n\nexport default Timestamp\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Text, Input, Button, SearchIcon } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n// import Search from '../../../../../public/images/search.svg'\n\n\ninterface PastLotterySearcherProps {\n  initialLotteryNumber: number\n  onSubmit: (num: number) => void\n}\n\nconst Wrapper = styled.div`\n  margin-bottom: 24px;\n`\n\nconst SearchWrapper = styled.div`\n  position: relative;\n  border-radius: 20px;\n  background: #FFFFFF;\n  ::placeholder {\n    color: #828282 !important;\n    opacity: 1;\n  }\n`\nconst InputWrapper = styled.div`\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  /* Firefox */\n  input[type='number'] {\n    -moz-appearance: textfield;\n  }\n`\nconst StyledInput = styled(Input)`\n  padding-right: 30px;\n  border: 1px solid;\n  // background: #FFFFFF;\n  color: #828282; \n  padding-left: 50px;\n  background: transparent;\n  ::placeholder {\n    color: #828282 !important;\n    opacity: 1;\n  }\n`\nconst ButtonWrapper = styled.div`\n  position: absolute;\n  left: 0px;\n  top: 50%;\n  transform: translate(0%, -50%);\n  width: auto;\n  \n`\nconst StyledBtn = styled(Button)`\n  border: unset;\n\n`\n\nconst PastLotterySearcher: React.FC<PastLotterySearcherProps> = ({ initialLotteryNumber, onSubmit }) => {\n  const [lotteryNumber, setLotteryNumber] = useState(initialLotteryNumber)\n  const [isError, setIsError] = useState(false)\n  const TranslateString = useI18n()\n\n  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault()\n    onSubmit(lotteryNumber)\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseInt(evt.currentTarget.value, 10)\n\n    // The max value will always be the initialLotteryNumber which equals\n    // the latest lottery round\n    setIsError(value > initialLotteryNumber)\n    setLotteryNumber(value)\n  }\n\n  return (\n    <Wrapper>\n      {/* <Text>{TranslateString(742, 'Select lottery number:')}</Text> */}\n      <form onSubmit={handleSubmit}>\n        <SearchWrapper>\n          <ButtonWrapper>\n            <StyledBtn variant=\"secondary\" type=\"submit\" scale=\"sm\" disabled={isError}>\n              {/* {TranslateString(744, 'Search')} */}\n              <SearchIcon style={{fill:\"#828282\", width:\"25px\"}}/>\n              {/* <img width=\"20px\" src=\"../images/search.png\" alt=\"\" /> */}\n            </StyledBtn>\n          </ButtonWrapper>\n          <InputWrapper>\n            <StyledInput\n              value={lotteryNumber}\n              type=\"number\"\n              isWarning={isError}\n              max={initialLotteryNumber}\n              onChange={handleChange}\n              placeholder=\"Enter Round Number...\"\n              style={{ paddingLeft:\"50px\"}}\n            />\n          </InputWrapper>\n          \n        </SearchWrapper>\n      </form>\n    </Wrapper>\n  )\n}\n\nexport default PastLotterySearcher\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalRewards } from 'hooks/useTickets'\nimport { BigNumber } from 'bignumber.js'\nimport { usePriceLuckyBusd } from 'state/hooks'\nimport useGetRecentLotteryRoundData from 'hooks/useGetRecentLotteryRoundData'\n\n\nimport { Heading, CardBody, CardFooter, PancakeRoundIcon, TicketRound, Text } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { DataResponse } from 'utils/getLotteryRoundData'\n\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\n\nimport LotteryCardHeading from '../LotteryCardHeading'\nimport PastLotteryActions from './PastLotteryActions'\nimport PrizeGrid from '../PrizeGrid'\nimport Timest from '../Timestamp'\nimport PastLotterySearcher from './PastLotterySearcher'\n\n\ninterface PastRoundCardDetailsProps {\n  data: DataResponse\n  initialLotteryNumber: number\n  onSubmit: (num: number) => void\n}\n\nconst CardHeading = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`\n\nconst TopLotteryCardHeading = styled(LotteryCardHeading)`\n  margin-bottom: ${(props) => props.theme.spacing[4]}px;\n  \n`\n\nconst BoxCard = styled.div`\n  padding: 10px;\n`\n// const StyledTime = styled(Timest)`\n//   padding-top: 20px;\n//   position: unset !important;\n//   top: 20px;\n// `\n// const StyledTime = styled(Timest)`\n// padding-top: 20px;\n//   position: unset !important;\n//    top: 20px;\n// `\n\nconst Dflex = styled.div`\n  \n  align-items: center;\n`\nconst StyledBox = styled.div`\n  display: grid;\n  @media (min-width: 991px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`\nconst RoundPrize = styled.div`\n  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@500;600;700&display=swap');\n  font-family: 'Montserrat', sans-serif;\n  font-weight: 900;\n  font-size: 36px;\n  line-height: 44px;\n    color: #252525;\n    text-shadow: 1px 1px 0 #F3C111,\n    -1px 1px 0 #F3C111,\n    1px -1px 0 #F3C111,\n    -1px -1px 0 #F3C111,\n    0px 1px 0 #F3C111,\n    0px -1px 0 #F3C111,\n    -1px 0px 0 #F3C111,\n    1px 0px 0 #F3C111,\n    2px 2px 0 #F3C111,\n    -2px 2px 0 #F3C111,\n    2px -2px 0 #F3C111,\n    -2px -2px 0 #F3C111,\n    0px 2px 0 #F3C111,\n    0px -2px 0 #F3C111,\n    -2px 0px 0 #F3C111,\n    2px 0px 0 #F3C111,\n    1px 2px 0 #F3C111,\n    -1px 2px 0 #F3C111,\n    1px -2px 0 #F3C111,\n    -1px -2px 0 #F3C111,\n    2px 1px 0 #F3C111,\n    -2px 1px 0 #F3C111,\n    2px -1px 0 #F3C111,\n    -2px -1px 0 #F3C111;\n`\nconst TopCard = styled.div`\n  margin-bottom: 23px;\n  display: flex;\n  margin-top: 20px;\n  justify-content: space-around;\n  position: relative;\n`\nconst BoxLucky = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  padding: 15px 0 5px;\n\n  h2 {\n    font-size: 44px;\n    position: relative;\n    color: #f3c111;\n    font-weight: 700;\n  }\n\n  span {\n    font-size: 16px;\n    position: absolute;\n    top: 0;\n  }\n`\nconst IconWrapper = styled.div`\n  margin-right: 16px;\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\nconst Dollar = styled.div`\n  padding-left: 60px;\n`\n\nconst PastRoundCardDetails: React.FC<PastRoundCardDetailsProps> = ({ data, initialLotteryNumber,onSubmit }) => {\n  const TranslateString = useI18n()\n  const lotteryPrizeAmount = +getBalanceNumber(useTotalRewards()).toFixed(0)\n  const lotteryPrizeWithCommaSeparators = lotteryPrizeAmount.toLocaleString()\n  const lotteryPrizeAmountBusd = new BigNumber(lotteryPrizeAmount).multipliedBy(usePriceLuckyBusd()).toNumber() \n  const {\n    contractLink,\n    jackpotTicket,\n    lotteryDate,\n    lotteryNumber,\n    lotteryNumbers,\n    match1Ticket,\n    match2Ticket,\n    match3Ticket,\n    poolSize,\n  } = data\n\n  return (\n    !data.error &&\n    data && (\n      <>\n        <StyledBox>\n          <CardBody>\n            <CardHeading>\n               {/* search */}\n              <PastLotterySearcher initialLotteryNumber={initialLotteryNumber} onSubmit={onSubmit} />\n\n              <TopLotteryCardHeading\n                valueToDisplay={[lotteryNumbers[0], lotteryNumbers[1], lotteryNumbers[2], lotteryNumbers[3] ]}\n                //  Icon={TicketRound}\n                Ic\n              >\n                {TranslateString(999, 'Winning numbers')}\n                {/* <img src=\"\" alt=\"\" /> */}\n              </TopLotteryCardHeading>\n              <Dflex>\n                <Text fontSize=\"24px\" fontWeight=\"500\" color=\"textSubtle\">\n                  {TranslateString(722, 'Total Pot:')}\n                </Text>\n                <BoxLucky>\n                  <IconWrapper>\n                    <img width=\"75px\" alt=\"\" src=\"/images/icon-logo-y.png\" />\n                  </IconWrapper>\n                  <Heading style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px', fontSize: '44' }} size=\"lg\">\n                    {lotteryPrizeWithCommaSeparators} <span>LUCKY</span>\n                  </Heading>\n                </BoxLucky>\n                <Dollar>{lotteryPrizeAmountBusd !== 0 && <CardBusdValue value={lotteryPrizeAmountBusd} />}</Dollar>\n              </Dflex>\n            </CardHeading>\n          </CardBody>\n          <BoxCard>\n            <TopCard>\n              <RoundPrize>\n                Round #{lotteryNumber}\n              </RoundPrize>\n              <Timest timeValue={lotteryDate} />\n            </TopCard>\n            \n            <CardFooter className=\"no-border\">\n              <PrizeGrid\n                lotteryPrizeAmount={poolSize}\n                jackpotMatches={jackpotTicket}\n                oneTicketMatches={match1Ticket}\n                twoTicketMatches={match2Ticket}\n                threeTicketMatches={match3Ticket}\n              />\n              {/* <PastLotteryActions contractLink={contractLink} lotteryNumber={lotteryNumber} /> */}\n            </CardFooter>\n          </BoxCard>\n        \n        </StyledBox>\n\n        <PastLotteryActions contractLink={contractLink} lotteryNumber={lotteryNumber} />\n      </>\n    )\n  )\n}\n\nexport default PastRoundCardDetails\n","import React from 'react'\nimport styled from 'styled-components'\n// import { Card } from '@luckyswap/uikit'\nimport { DataResponse } from 'utils/getLotteryRoundData'\nimport PastRoundCardError from './PastRoundCardError'\nimport PastRoundCardDetails from './PastRoundCardDetails'\n\ninterface PastRoundCardProps {\n  error: {\n    message: string\n  }\n  data: DataResponse\n  initialLotteryNumber: number\n  onSubmit: (num: number) => void\n}\n\nconst PastRoundCard: React.FC<PastRoundCardProps> = ({ error, data, initialLotteryNumber, onSubmit }) => {\n  return (\n    <FullWidth>{error.message ? <PastRoundCardError error={error} /> \n    : <PastRoundCardDetails data={data}\n    initialLotteryNumber={initialLotteryNumber} \n    onSubmit={onSubmit} />}</FullWidth>\n  )\n}\n\nconst FullWidth = styled.div`\n  width: 100%;\n  background: linear-gradient(45deg, rgb(35 35 35) 30%, rgb(45 45 45) 100%);\n  box-shadow: none;\n  display: block;\n  margin-bottom: 20px;\n  border-radius: 14px;\n\n  @media (min-width: 991px) {\n    margin-bottom: 30px;\n  }\n`\n\nexport default PastRoundCard\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody } from '@luckyswap/uikit'\nimport getLotteryRoundData from 'utils/getLotteryRoundData'\nimport useI18n from 'hooks/useI18n'\nimport useGetRecentLotteryRoundData from 'hooks/useGetRecentLotteryRoundData'\nimport PastLotterySearcher from './PastLotterySearcher'\nimport PastRoundCard from './PastRoundCard'\nimport Loading from '../Loading'\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledCardBody = styled(CardBody)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 552px; // height of final card\n`\n\nconst PastLotteryRoundViewer = () => {\n  const [state, setState] = useState({\n    roundData: null,\n    error: { message: null, type: null },\n    isInitialized: false,\n    isLoading: true,\n  })\n  const { data: initialLotteryData, mostRecentLotteryNumber } = useGetRecentLotteryRoundData()\n  const TranslateString = useI18n()\n  const { roundData, error, isInitialized, isLoading } = state\n\n  useEffect(() => {\n    if (initialLotteryData) {\n      setState((prevState) => ({ ...prevState, isLoading: false, isInitialized: true, roundData: initialLotteryData }))\n    }\n  }, [initialLotteryData, setState])\n\n  const handleSubmit = async (lotteryNumber: number) => {\n    setState((prevState) => ({\n      ...prevState,\n      isLoading: true,\n    }))\n\n    getLotteryRoundData(lotteryNumber)\n      .then((data) => {\n        if (data.error) {\n          setState((prevState) => ({\n            ...prevState,\n            error: {\n              message: TranslateString(1076, 'The lottery number you provided does not exist'),\n              type: 'out of range',\n            },\n            isLoading: false,\n            isInitialized: true,\n          }))\n        } else {\n          setState((prevState) => ({\n            ...prevState,\n            error: { message: null, type: null },\n            roundData: data,\n            isLoading: false,\n            isInitialized: true,\n          }))\n        }\n      })\n      .catch(() => {\n        setState((prevState) => ({\n          ...prevState,\n          error: { message: TranslateString(1078, 'Error fetching data'), type: 'api' },\n          isLoading: false,\n          isInitialized: true,\n        }))\n      })\n  }\n\n  return (\n    <Wrapper>\n      {mostRecentLotteryNumber !== -1 && (\n      <div>\n        {(!isInitialized || isLoading) ? ( \n        <Card>\n          <StyledCardBody>\n            <Loading />\n          </StyledCardBody>\n        </Card>\n      ) : (\n        <PastRoundCard initialLotteryNumber={mostRecentLotteryNumber} onSubmit={handleSubmit} error={error} data={roundData} />\n      )}\n      </div>\n    )}\n      {/* <PastLotterySearcher initialLotteryNumber={mostRecentLotteryNumber} onSubmit={handleSubmit} /> */}\n      \n    </Wrapper>\n  )\n}\n\nexport default PastLotteryRoundViewer\n","import React, { lazy, Suspense, useContext } from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@luckyswap/uikit'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport Loading from '../Loading'\n\nconst Line = lazy(() => import('./LineChartWrapper'))\n\nconst InnerWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst HistoryChart: React.FC = () => {\n  const { historyData, historyError } = useContext(PastLotteryDataContext)\n  const getDataArray = (kind) => {\n    return historyData\n      .map((dataPoint) => {\n        return dataPoint[kind]\n      })\n      .reverse()\n  }\n\n  const lineStyles = ({ color }) => {\n    return {\n      borderColor: color,\n      fill: false,\n      borderWidth: 2,\n      pointRadius: 0,\n      pointHitRadius: 10,\n    }\n  }\n\n  const chartData = {\n    labels: getDataArray('lotteryNumber'),\n    datasets: [\n      {\n        label: 'Pool Size',\n        data: getDataArray('poolSize'),\n        yAxisID: 'y-axis-pool',\n        ...lineStyles({ color: '#f89a0e' }),\n      },\n      {\n        label: 'Burned',\n        data: getDataArray('burned'),\n        yAxisID: 'y-axis-burned',\n        ...lineStyles({ color: '#fadc56b2' }),\n      },\n    ],\n  }\n\n  const axesStyles = ({ color, lineHeight }) => {\n    return {\n      borderCapStyle: 'round',\n      gridLines: { display: false },\n      ticks: {\n        fontFamily: 'Kanit, sans-serif',\n        fontColor: color,\n        fontSize: 14,\n        lineHeight,\n        maxRotation: 0,\n        beginAtZero: true,\n        autoSkipPadding: 15,\n        userCallback: (value) => {\n          return value.toLocaleString()\n        },\n      },\n    }\n  }\n\n  const options = {\n    legend: { display: false },\n    scales: {\n      yAxes: [\n        {\n          type: 'linear',\n          display: true,\n          position: 'left',\n          id: 'y-axis-pool',\n          ...axesStyles({ color: '#f3c111', lineHeight: 1.6 }),\n        },\n        {\n          type: 'linear',\n          display: true,\n          position: 'right',\n          id: 'y-axis-burned',\n          ...axesStyles({ color: '#f3c111', lineHeight: 1.5 }),\n        },\n      ],\n      xAxes: [\n        {\n          ...axesStyles({ color: '#f3c111', lineHeight: 1 }),\n        },\n      ],\n    },\n  }\n\n  return (\n    <>\n      {historyError && (\n        <InnerWrapper>\n          <Text>Error fetching data</Text>\n        </InnerWrapper>\n      )}\n      {!historyError && historyData.length > 0 ? (\n        <Suspense fallback={<div>Loading...</div>}>\n          <Line data={chartData} options={options} type=\"line\" />\n        </Suspense>\n      ) : (\n        <InnerWrapper>\n          <Loading />\n        </InnerWrapper>\n      )}\n    </>\n  )\n}\n\nexport default HistoryChart\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst Wrapper = styled.div`\n  display: flex;\n  margin: 36px 0 28px;\n`\n\nconst LegendItem = styled.div`\n  display: flex;\n  margin-right: 18px;\n  align-items: center;\n`\n\nconst Circle = styled.div<{ isPoolSize?: boolean }>`\n  width: 20px;\n  height: 20px;\n  border-radius: 10px;\n  background-color: ${({ isPoolSize, theme }) => theme.colors[isPoolSize ? 'textSubtle' : 'primary']};\n  margin-right: 6px;\n`\n\nconst Legend = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <LegendItem>\n        <Circle isPoolSize />\n        <Text>{TranslateString(748, 'Pool Size')}</Text>\n      </LegendItem>\n      <LegendItem>\n        <Circle />\n        <Text>{TranslateString(750, 'Burned')}</Text>\n      </LegendItem>\n    </Wrapper>\n  )\n}\n\nexport default Legend\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport HistoryChart from './HistoryChart'\nimport Legend from './Legend'\n\nconst PastDrawsHistoryCard: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <FullWidth>\n      <CardBody>\n        <Heading size=\"md\">{TranslateString(746, 'History')}</Heading>\n        <Legend />\n        <HistoryChart />\n      </CardBody>\n    </FullWidth>\n  )\n}\n\nconst FullWidth = styled(Card)`\n  max-width: 100%;\n  background: linear-gradient(45deg, rgb(35 35 35) 30%, rgb(45 45 45) 100%);\n  box-shadow: none;\n  display: grid;\n  grid-template-columns: 1fr;\n  margin-bottom: 60px;\n  border-radius: 14px;\n`\n\nexport default PastDrawsHistoryCard\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { ButtonMenu, ButtonMenuItem } from '@luckyswap/uikit'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport { getLotteryIssueIndex } from 'utils/lotteryUtils'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { useLottery, useContract } from 'hooks/useContract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { useActiveWeb3React } from 'hooks'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { BASE_API_ADMIN, BASE_API_ADMIN_PRO } from 'config'\nimport Hero from './components/Hero'\nimport WinningNumbers from './components/WinningNumbers'\nimport TotalPrizesCard from './components/TotalPrizesCard'\nimport YourPrizesCard from './components/YourPrizesCard'\nimport UnlockWalletCard from './components/UnlockWalletCard'\nimport TicketCard from './components/TicketCard'\nimport HowItWorks from './components/HowItWorks'\nimport PastLotteryRoundViewer from './components/PastLotteryRoundViewer'\n// import { BaseLayout } from '@luckyswap/uikit'\nimport PastDrawsHistoryCard from './components/PastDrawsHistory/PastDrawsHistoryCard'\nimport Divider from './components/Divider'\nimport NextDrawPage from './NextDrawPage'\nimport PastDrawsPage from './PastDrawsPage'\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 32px;\n`\n\nconst SecondCardColumnWrapper = styled.div<{ isAWin?: boolean, account?:any }>`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 40px;\n  margin-bottom: 30px;\n\n  @media (min-width: 991px) {\n    grid-template-columns: ${(props) => props.account ? \"1fr 1fr\" : \"unset\"};\n  }\n`\n\nconst Dflex = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 40px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n  margin-bottom: 30px;\n`\n\nconst BoxImg = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    width: 100%;\n    max-width: 750px;\n  }\n`\n\n\nconst Lottery: React.FC = () => {\n  const { chainId } = useActiveWeb3React();\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n\n  const TranslateString = useI18n()\n  const [activeIndex, setActiveIndex] = useState(0)\n  const [historyData, setHistoryData] = useState([])\n  const [historyError, setHistoryError] = useState(false)\n  const [currentLotteryNumber, setCurrentLotteryNumber] = useState(0)\n  const [mostRecentLotteryNumber, setMostRecentLotteryNumber] = useState(null)\n\n  const { account } = useWeb3React()\n  const { claimAmount } = useTotalClaim()\n  const winnings = getBalanceNumber(claimAmount)\n  const isAWin = winnings > 0\n\n  const url = chainId === 56 ? BASE_API_ADMIN_PRO : BASE_API_ADMIN\n\n  useEffect(() => {\n    fetch(`${url}/lotteries/history`)\n      .then((response) => response.json())\n      .then((data) => {\n        data.sort((a, b) => a.lotteryNumber > b.lotteryNumber ? -1 : 1)\n        setHistoryData(data)}\n        )\n      \n      .catch(() => {\n        setHistoryError(true)\n      })\n  }, [url])\n\n  useEffect(() => {\n    const getInitialLotteryIndex = async () => {\n      const index = await getLotteryIssueIndex(lotteryContract)\n      const previousLotteryNumber = index - 1\n\n      setCurrentLotteryNumber(index)\n      setMostRecentLotteryNumber(previousLotteryNumber)\n    }\n\n    if (lotteryContract) {\n      getInitialLotteryIndex()\n    }\n  }, [lotteryContract])\n\n  const handleClick = (index) => {\n    setActiveIndex(index)\n  }\n\n  return (\n    <>\n      <Page>\n        {/* <BoxImg>\n          <img src=\"../images/coming-soon-lot.png\" alt=\"\"/>\n        </BoxImg> */}\n        <Hero />\n        <TotalPrizesCard />\n        <SecondCardColumnWrapper account={account} isAWin={isAWin}>\n          {!account ? (\n            <UnlockWalletCard />\n          ) : (\n            <>\n              <TicketCard isSecondCard={isAWin} />\n              <YourPrizesCard />\n            </>\n          )}\n        </SecondCardColumnWrapper>\n        <WinningNumbers />\n        <HowItWorks />\n        <PastLotteryDataContext.Provider\n          value={{ historyError, historyData, mostRecentLotteryNumber, currentLotteryNumber }}\n        >\n          <PastLotteryRoundViewer />\n          <PastDrawsHistoryCard />\n        </PastLotteryDataContext.Provider>\n\n        {/* <Wrapper>\n          <ButtonMenu activeIndex={activeIndex} onItemClick={handleClick} scale=\"sm\" variant=\"subtle\">\n            <ButtonMenuItem>{TranslateString(716, 'Next draw')}</ButtonMenuItem>\n            <ButtonMenuItem>{TranslateString(718, 'Past draws')}</ButtonMenuItem>\n          </ButtonMenu>\n        </Wrapper>\n        <Divider />\n        <PastLotteryDataContext.Provider\n          value={{ historyError, historyData, mostRecentLotteryNumber, currentLotteryNumber }}\n        >\n          {activeIndex === 0 ? <NextDrawPage /> : <PastDrawsPage />}\n        </PastLotteryDataContext.Provider> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Lottery\n"],"sourceRoot":""}