{"version":3,"sources":["utils/lotteryUtils.ts","views/Lottery/Lottery.tsx","hooks/useTickets.ts"],"names":["multiCall","abi","calls","a","getChainId","chainId","web3","getWeb3NoAccount","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","res","length","i","newCalls","slice","calldata","map","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","concat","index","decodeFunctionResult","getTicketsAmount","ticketsContract","account","balanceOf","catch","error","console","log","getTotalClaim","lotteryContract","issueIndex","calls1","Array","apply","address","ticketAbi","tokenIds","id","toString","calls2","ticketIssues","calls3","claimedStatus","getLotteryStatus","drawed","finalTokenIds","forEach","ticketIssue","push","calls4","lotteryAbi","rewards","claim","reduce","p","c","BigNumber","sum","getLotteryIssueIndex","BoxImg","styled","div","Lottery","useContract","getLotteryAddress","useI18n","useState","setHistoryData","setHistoryError","setCurrentLotteryNumber","setMostRecentLotteryNumber","claimAmount","useWeb3React","setClaimAmount","claimLoading","setClaimLoading","getLotteryTicketAddress","lotteryTicketAbi","fetchBalance","useCallback","useEffect","useTotalClaim","getBalanceNumber","fetch","then","response","json","data","previousLotteryNumber","getInitialLotteryIndex","Page","src","alt"],"mappings":"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","file":"static/js/18.0a875fa5.chunk.js","sourcesContent":["/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3NoAccount } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { LOTTERY_TICKET_PRICE } from 'config'\nimport { AbiItem } from 'web3-utils'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport { getMulticallAddress } from './addressHelpers'\nimport { getChainId } from './web3React'\n\nexport const multiCall = async (abi, calls) => {\n  const chainId = await getChainId()\n  const web3 = getWeb3NoAccount(chainId)\n  const multi = new web3.eth.Contract(MultiCallAbi as unknown as AbiItem, getMulticallAddress(chainId))\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\n      .then((tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIndex = customLotteryNum || (await lotteryContract.issueIndex())\n\n  const length = await ticketsContract.balanceOf(account).catch((error) => console.log('length error : ', error))\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (ticketIssue.toString() === issueIndex.toString()) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n  return tickets\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.balanceOf(account).catch((error) => console.log('ticket amount : ', error))\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.issueIndex()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finalTokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finalTokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finalTokenIds.length > 200) {\n    finalTokenIds = finalTokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.multiClaim(finalTokenIds)\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIndex = await lotteryContract.issueIndex()\n    const length = await getTicketsAmount(ticketsContract, account)\n    // eslint-disable-next-line prefer-spread\n    const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n      ticketsContract.address,\n      'tokenOfOwnerByIndex',\n      [account, i],\n    ])\n    const res = await multiCall(ticketAbi, calls1)\n    const tokenIds = res.map((id) => id.toString())\n    const calls2 = tokenIds.map((id) => [ticketsContract.address, 'getLotteryIssueIndex', [id]])\n    const ticketIssues = await multiCall(ticketAbi, calls2)\n    const calls3 = tokenIds.map((id) => [ticketsContract.address, 'getClaimStatus', [id]])\n    const claimedStatus = await multiCall(ticketAbi, calls3)\n\n    const drawed = await getLotteryStatus(lotteryContract)\n\n    const finalTokenIds = []\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIndex) {\n      } else if (!claimedStatus[i][0]) {\n        finalTokenIds.push(tokenIds[i])\n      }\n    })\n\n    const calls4 = finalTokenIds.map((id) => [lotteryContract.address, 'getRewardView', [id]])\n\n    const rewards = await multiCall(lotteryAbi, calls4)\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), new BigNumber(0))\n\n    return claim\n  } catch (err) {\n    console.error(err)\n  }\n  return new BigNumber(0)\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.issueIndex()\n  return lotteryContract.getTotalRewards(issueIndex)\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.maxNumber()\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.issueIndex()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.drawed()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIndex = await lotteryContract.issueIndex()\n  const drawed = await lotteryContract.drawed()\n  if (!drawed) {\n    issueIndex -= 1\n  }\n  try {\n    const amount = await lotteryContract.historyAmount(issueIndex, 5 - matchNumber)\n    return new BigNumber(amount.toString()).div(new BigNumber(10).pow(18)).div(LOTTERY_TICKET_PRICE).toNumber()\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.issueIndex()\n  const numbers = []\n  const drawed = await lotteryContract.drawed()\n\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.historyNumbers(issueIndex - 1, i)).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.winningNumbers(i)).toString())\n    }\n  }\n  return numbers\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { ButtonMenu, ButtonMenuItem } from '@luckyswap/uikit'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport { getLotteryIssueIndex } from 'utils/lotteryUtils'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { useLottery, useContract } from 'hooks/useContract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport lotteryAbi from 'config/abi/lottery.json'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport Hero from './components/Hero'\nimport WinningNumbers from './components/WinningNumbers'\nimport TotalPrizesCard from './components/TotalPrizesCard'\nimport YourPrizesCard from './components/YourPrizesCard'\nimport UnlockWalletCard from './components/UnlockWalletCard'\nimport TicketCard from './components/TicketCard'\nimport HowItWorks from './components/HowItWorks'\nimport PastLotteryRoundViewer from './components/PastLotteryRoundViewer'\n// import { BaseLayout } from '@luckyswap/uikit'\nimport PastDrawsHistoryCard from './components/PastDrawsHistory/PastDrawsHistoryCard'\nimport Divider from './components/Divider'\nimport NextDrawPage from './NextDrawPage'\nimport PastDrawsPage from './PastDrawsPage'\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 32px;\n`\n\nconst SecondCardColumnWrapper = styled.div<{ isAWin?: boolean }>`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 40px;\n  margin-bottom: 30px;\n\n  @media (min-width: 991px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`\n\nconst Dflex = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 40px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n  margin-bottom: 30px;\n`\n\nconst BoxImg = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    width: 100%;\n    max-width: 750px;\n  }\n`\n\nconst Lottery: React.FC = () => {\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n\n  const TranslateString = useI18n()\n  const [activeIndex, setActiveIndex] = useState(0)\n  const [historyData, setHistoryData] = useState([])\n  const [historyError, setHistoryError] = useState(false)\n  const [currentLotteryNumber, setCurrentLotteryNumber] = useState(0)\n  const [mostRecentLotteryNumber, setMostRecentLotteryNumber] = useState(1)\n\n  const { account } = useWeb3React()\n  const { claimAmount } = useTotalClaim()\n  const winnings = getBalanceNumber(claimAmount)\n  const isAWin = winnings > 0\n\n  useEffect(() => {\n    fetch(`https://api.pancakeswap.com/api/lotteryHistory`)\n      .then((response) => response.json())\n      .then((data) => setHistoryData(data))\n      .catch(() => {\n        setHistoryError(true)\n      })\n  }, [])\n\n  useEffect(() => {\n    const getInitialLotteryIndex = async () => {\n      const index = await getLotteryIssueIndex(lotteryContract)\n      const previousLotteryNumber = index - 1\n\n      setCurrentLotteryNumber(index)\n      setMostRecentLotteryNumber(previousLotteryNumber)\n    }\n\n    if (lotteryContract) {\n      getInitialLotteryIndex()\n    }\n  }, [lotteryContract])\n\n  const handleClick = (index) => {\n    setActiveIndex(index)\n  }\n\n  return (\n    <>\n      <Page>\n        <BoxImg>\n          <img src=\"../images/coming-soon-lot.png\" alt=\"\"/>\n        </BoxImg>\n        {/* <Hero />\n        <TotalPrizesCard />\n        <SecondCardColumnWrapper isAWin={isAWin}>\n          {!account ? (\n            <UnlockWalletCard />\n          ) : (\n            <>\n              <TicketCard isSecondCard={isAWin} />\n              <YourPrizesCard />\n            </>\n          )}\n        </SecondCardColumnWrapper>\n        <WinningNumbers />\n        <HowItWorks />\n        <PastLotteryRoundViewer />\n        <PastDrawsHistoryCard /> */}\n\n        {/* <Wrapper>\n          <ButtonMenu activeIndex={activeIndex} onItemClick={handleClick} scale=\"sm\" variant=\"subtle\">\n            <ButtonMenuItem>{TranslateString(716, 'Next draw')}</ButtonMenuItem>\n            <ButtonMenuItem>{TranslateString(718, 'Past draws')}</ButtonMenuItem>\n          </ButtonMenu>\n        </Wrapper>\n        <Divider />\n        <PastLotteryDataContext.Provider\n          value={{ historyError, historyData, mostRecentLotteryNumber, currentLotteryNumber }}\n        >\n          {activeIndex === 0 ? <NextDrawPage /> : <PastDrawsPage />}\n        </PastLotteryDataContext.Provider> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Lottery\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useContract, useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport lotteryTicketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport useRefresh from './useRefresh'\nimport {\n  getTotalRewards,\n  getTotalClaim,\n  getMatchingRewardLength,\n  getWinningNumbers,\n  getTickets,\n} from '../utils/lotteryUtils'\n\nconst useTickets = (lotteryNumber = null) => {\n  const [tickets, setTickets] = useState([])\n  const { account } = useWeb3React()\n  const ticketsContract = useContract(getLotteryTicketAddress(), lotteryTicketAbi)\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\n\n  return tickets\n}\n\nexport const useTotalRewards = () => {\n  const [rewards, setRewards] = useState(new BigNumber(0))\n  const { fastRefresh } = useRefresh()\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTotalRewards(lotteryContract)\n\n      setRewards(new BigNumber(res.toString()))\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, fastRefresh])\n  return rewards\n}\n\nexport const useTotalClaim = () => {\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\n  const [claimLoading, setClaimLoading] = useState(false)\n  const { account } = useWeb3React()\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  const ticketsContract = useContract(getLotteryTicketAddress(), lotteryTicketAbi)\n\n  const fetchBalance = useCallback(async () => {\n    setClaimLoading(true)\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\n    setClaimAmount(claim)\n    setClaimLoading(false)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, lotteryContract, ticketsContract])\n\n  useEffect(() => {\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, fetchBalance, lotteryContract, ticketsContract])\n  return { claimLoading, claimAmount }\n}\n\nexport const useWinningNumbers = () => {\n  const [winningNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rewards = await getWinningNumbers(lotteryContract)\n      setWinningNumbers(rewards)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\n\n  return winningNumbers\n}\n\nexport const useMatchingRewardLength = (numbers) => {\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const matchedNumbaers = await getMatchingRewardLength(lotteryContract, numbers)\n\n      setMatchingNumbers(matchedNumbaers)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, numbers, fastRefresh])\n  return matchingNumbers\n}\n\nexport default useTickets\n"],"sourceRoot":""}