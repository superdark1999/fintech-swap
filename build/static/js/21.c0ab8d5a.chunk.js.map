{"version":3,"sources":["views/Lottery/helpers/CountdownHelpers.ts","views/Lottery/components/LotteryProgress.tsx","views/Lottery/components/Hero.tsx","views/Lottery/components/WinningNumbers.tsx","views/Lottery/components/PrizeGrid.tsx","views/Lottery/components/TotalPrizesCard/index.tsx","views/Lottery/components/Loading.tsx","views/Lottery/components/TicketCard/UserTicketsModal.tsx","views/Lottery/components/YourPrizesCard/PrizesWonContent.tsx","views/Lottery/components/YourPrizesCard/NoPrizesContent.tsx","views/Lottery/components/YourPrizesCard/index.tsx","views/Lottery/components/UnlockWalletCard.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx","views/Lottery/components/TicketCard/PurchaseWarningModal.tsx","views/Lottery/components/TicketCard/TicketActions.tsx","views/Lottery/components/TicketCard/index.tsx","views/Lottery/components/HowItWorks.tsx","views/Lottery/components/PastLotteryRoundViewer/PastLotterySearcher.tsx","views/Lottery/components/PastLotteryRoundViewer/PastRoundCardError.tsx","views/Lottery/components/LotteryCardHeading.tsx","views/Lottery/components/PastLotteryRoundViewer/PastLotteryActions.tsx","views/Lottery/helpers/formatLotteryDate.ts","views/Lottery/components/Timestamp.tsx","views/Lottery/components/PastLotteryRoundViewer/PastRoundCardDetails.tsx","views/Lottery/components/PastLotteryRoundViewer/PastRoundCard.tsx","views/Lottery/components/PastLotteryRoundViewer/index.tsx","views/Lottery/components/PastDrawsHistory/HistoryChart.tsx","views/Lottery/components/PastDrawsHistory/Legend.tsx","views/Lottery/components/PastDrawsHistory/PastDrawsHistoryCard.tsx","views/Lottery/Lottery.tsx"],"names":["hoursAndMinutesString","hours","minutes","parseInt","getTicketSaleTime","currentMillis","msUntilNextTicketSale","getNextTicketSaleTime","getTimePeriods","getTimeRemainDraw","endTime","now","Date","getTime","setDate","getDate","remain","hh","pad","Math","floor","mm","num","concat","toString","substr","ProgressWrapper","styled","div","TopTextWrapper","BottomTextWrapper","StyledPrimaryText","Text","LotteryProgress","fastRefresh","useRefresh","useState","timeRemainDraw","setTimeRemainDraw","timeRemainSale","setTimeRemainSale","percentRemain","setPercentRemain","TranslateString","useI18n","lotteryHasDrawn","useGetLotteryHasDrawn","useCurrentTime","useEffect","a","timeEndLottery","timeStartLottery","axios","get","BASE_API_ADMIN","data","setHours","timeDrawLottery","timeStartNewPhase","fetchTimeLottery","primaryStep","secondaryStep","fontSize","bold","color","Title","Heading","attrs","as","size","Blurb","StyledHero","StyledContainer","Container","theme","mediaQueries","sm","LeftWrapper","lg","RightWrapper","ContentDes","Hero","src","alt","CardBodyNew","Link","Row","RowNoPadding","Column","CenteredText","CenteredTextWithPadding","TicketNumberBox","StyledCardHeader","CardWrapper","props","colors","secondary","StyledCardContentInner","WinningNumbers","account","useWeb3React","winNumbers","useWinningNumbers","MatchedNumber4","useMatchingRewardLength","MatchedNumber3","MatchedNumber2","style","map","number","index","href","target","Grid","pastDraw","RightAlignedText","RightAlignedHeading","GridItem","marginBottom","PastDrawGridItem","GridPrize","CardBusd","span","PrizeGrid","lotteryPrizeAmount","jackpotMatches","twoTicketMatches","threeTicketMatches","fourMatchesAmount","toFixed","threeMatchesAmount","twoMatchesAmount","burnAmount","cakeBusdPrice","usePriceLuckyBusd","getCakeBusdValue","amount","BigNumber","multipliedBy","toNumber","padding","className","textShadow","eq","CardBusdValue","value","toLocaleString","BoxTotal","CardHeading","Right","Left","IconWrapper","PrizeCountWrapper","ExpandingWrapper","showFooter","BoxLucky","Dollar","RoundPrize","TotalPrizesCard","indexRoute","setIndexRoute","setShowFooter","getBalanceNumber","useTotalRewards","lotteryPrizeAmountBusd","lotteryPrizeWithCommaSeparators","currentLotteryNumber","useContext","PastLotteryDataContext","lotteryContract","useContract","getLotteryAddress","lotteryAbi","getLotteryIssueIndex","fetchLotteryIndex","mb","alignItems","justifyContent","height","width","fontWeight","ExpandableSectionButton","onClick","expanded","StyledLoading","Loading","RewardP","TicketsList","primary","StyledButton","Button","spacing","UserTicketsModal","myTicketNumbers","onDismiss","from","rewardMatch","useCallback","n","i","length","listItems","emoji","Array","join","title","TICKETS","variant","WinningsWrapper","StyledCardActions","spinnerIcon","spin","PrizesWonContent","requestedClaim","setRequestedClaim","isClaimLoading","setIsClaimLoading","useTotalClaim","claimLoading","claimAmount","onMultiClaim","useMultiClaimLottery","tickets","useTickets","useModal","onPresentMyTickets","addTransaction","useTransactionAdder","handleClaim","txHash","summary","console","error","on","winnings","marginRight","disabled","Wrapper","TextWrapper","StyledText","Image","img","md","NoPrizesContent","StyledCard","Card","isDisabled","textDisabled","YourPrizesCard","isAWin","isActive","StyledCardBody","CardBody","StyledHeading","UnlockWalletCard","UnlockButton","BuyTicketModal","max","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","getFullDisplayBalance","maxTickets","LOTTERY_TICKET_PRICE","onMultiBuy","useMultiBuyLottery","maxNumber","useMaxNumber","handleBuy","numbers","apply","random","multiBuy","times","pow","then","response","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","TicketInput","onSelectMax","onChange","e","currentTarget","symbol","availableSymbol","Tips","Announce","Final","ModalActions","id","WarningModal","newTransactionsFirst","b","addedTime","CardActions","Dflex","TicketCard","balanceToken","setBalanceToken","setTickets","allowance","setAllowance","chainId","contractBEP20","XLUCKY_TESTNET_ADDRESSES","bep20Abi","useContractTemp","ticketsContract","getLotteryTicketAddress","lotteryTicketAbi","ticketsLength","PurchaseWarningModal","tokenName","onPresentBuy","listenApproveEvent","useUtilityToken","getTickets","res","fetchBalance","fetchApprovalData","log","balanceOf","catch","requestedApproval","setRequestedApproval","useApproveCallbackCustom","approval","onAttemptToApprove","handleApprove","allTransactions","useAllTransactions","sortedRecentTransactions","Object","values","filter","isTransactionRecent","sort","getStatus","tx","receipt","hash","isSecondCard","CardHeader","TicketCountWrapper","TicketActions","LayoutWrapper","SectionTitle","TitleMain","h2","SubTitle","p","BoxItem","Item","InerItem","h3","Desc","Step","HowItWorks","SearchWrapper","InputWrapper","ButtonWrapper","PastLotterySearcher","initialLotteryNumber","onSubmit","lotteryNumber","setLotteryNumber","isError","setIsError","evt","preventDefault","type","isWarning","scale","PastRoundCardError","message","LotteryCardHeading","valueToDisplay","children","Icon","flexDirection","defaultProps","ExternalLinkWrap","LinkExternal","contractLink","SCAN_SITES","formatLotteryDate","lotteryDate","date","dateString","toDateString","getUTCHours","monthAndDay","split","splice","Timestamp","timeValue","TopLotteryCardHeading","BoxCard","PastRoundCardDetails","jackpotTicket","lotteryNumbers","match1Ticket","match2Ticket","match3Ticket","poolSize","oneTicketMatches","PastLotteryActions","FullWidth","PastRoundCard","PastLotteryRoundViewer","roundData","isInitialized","isLoading","state","setState","useGetRecentLotteryRoundData","initialLotteryData","mostRecentLotteryNumber","prevState","handleSubmit","getLotteryRoundData","Line","lazy","InnerWrapper","HistoryChart","historyData","historyError","getDataArray","kind","dataPoint","reverse","lineStyles","borderColor","fill","borderWidth","pointRadius","pointHitRadius","chartData","labels","datasets","label","yAxisID","axesStyles","borderCapStyle","gridLines","display","ticks","fontFamily","fontColor","lineHeight","maxRotation","beginAtZero","autoSkipPadding","userCallback","options","legend","scales","yAxes","position","xAxes","fallback","LegendItem","Circle","isPoolSize","Legend","PastDrawsHistoryCard","SecondCardColumnWrapper","Lottery","setHistoryData","setHistoryError","setCurrentLotteryNumber","setMostRecentLotteryNumber","fetch","json","previousLotteryNumber","getInitialLotteryIndex","Page","Provider"],"mappings":"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","file":"static/js/21.c0ab8d5a.chunk.js","sourcesContent":["import getTimePeriods from 'utils/getTimePeriods'\n\n// lottery draws UTC: 02:00 (10:00 SGT), 14:00 (22:00 SGT)\nconst lotteryDrawHoursUtc = [2, 14]\n\nconst getClosestLotteryHour = (currentHour) => {\n  switch (true) {\n    case currentHour < lotteryDrawHoursUtc[0] || currentHour >= lotteryDrawHoursUtc[1]:\n      return lotteryDrawHoursUtc[0]\n    case currentHour < lotteryDrawHoursUtc[1]:\n      return lotteryDrawHoursUtc[1]\n    default:\n      return 0\n  }\n}\n\nconst getNextLotteryDrawTime = (currentMillis) => {\n  const date = new Date(currentMillis)\n  const currentHour = date.getUTCHours()\n  const nextLotteryHour = getClosestLotteryHour(currentHour)\n  // next lottery is tomorrow if the next lottery is at 2am UTC...\n  // ...and current time is between 02:00am & 23:59pm UTC\n  const nextLotteryIsTomorrow = nextLotteryHour === 2 && currentHour >= 2 && currentHour <= 23\n  let millisTimeOfNextDraw\n\n  if (nextLotteryIsTomorrow) {\n    const tomorrow = new Date(currentMillis)\n    const nextDay = tomorrow.getUTCDate() + 1\n    tomorrow.setUTCDate(nextDay)\n    millisTimeOfNextDraw = tomorrow.setUTCHours(nextLotteryHour, 0, 0, 0)\n  } else {\n    millisTimeOfNextDraw = date.setUTCHours(nextLotteryHour, 0, 0, 0)\n  }\n\n  return millisTimeOfNextDraw\n}\n\n// @ts-ignore\nconst getNextTicketSaleTime = (currentMillis) => (parseInt(currentMillis / 3600000) + 1) * 3600000\nconst hoursAndMinutesString = (hours, minutes) => `${parseInt(hours)}h, ${parseInt(minutes)}m`\n\nexport const getTicketSaleTime = (currentMillis): string => {\n  const nextTicketSaleTime = getNextTicketSaleTime(currentMillis)\n  const msUntilNextTicketSale = nextTicketSaleTime - currentMillis\n  const { minutes } = getTimePeriods(msUntilNextTicketSale / 1000)\n  const { hours } = getTimePeriods(msUntilNextTicketSale / 1000)\n  return hoursAndMinutesString(hours, minutes)\n}\n\nexport const getLotteryDrawTime = (currentMillis): string => {\n  const nextLotteryDrawTime = getNextLotteryDrawTime(currentMillis)\n  const msUntilLotteryDraw = nextLotteryDrawTime - currentMillis\n  const { minutes } = getTimePeriods(msUntilLotteryDraw / 1000)\n  const { hours } = getTimePeriods(msUntilLotteryDraw / 1000)\n  return hoursAndMinutesString(hours, minutes)\n}\n\nexport const getTicketSaleStep = () => (1 / 12) * 100\n\nexport const getLotteryDrawStep = (currentMillis) => {\n  const msBetweenLotteries = 43200000 * 2\n  const endTime = getNextLotteryDrawTime(currentMillis)\n  const msUntilLotteryDraw = endTime - currentMillis\n  const percentageRemaining = (msUntilLotteryDraw / msBetweenLotteries) * 100\n  return 100 - percentageRemaining\n}\n\nexport const getTimeRemainDraw = (endTime: Date) => {\n  const now = new Date();\n  if (now.getTime() > endTime.getTime()){\n    endTime.setDate(endTime.getDate() + 1);\n  }\n  const remain = ((endTime.getTime() - now.getTime()) / 1000);\n  const hh = pad(Math.floor((remain / 60 / 60) % 60));\n  const mm = pad(Math.floor((remain / 60) % 60));\n\n  return `${hh}h: ${mm}m`;\n}\nfunction pad(num) {\n  return (\"0\".concat(num.toString())).substr(-2);\n}","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Text, Progress } from '@luckyswap/uikit'\nimport axios from 'axios'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport { useCurrentTime } from 'hooks/useTimer'\nimport { BASE_API_ADMIN } from 'config'\nimport useRefresh from 'hooks/useRefresh'\nimport {\n  getLotteryDrawTime,\n  getLotteryDrawStep,\n  getTicketSaleTime,\n  getTicketSaleStep,\n  getTimeRemainDraw,\n} from '../helpers/CountdownHelpers'\n\nconst ProgressWrapper = styled.div`\n  display: block;\n  width: 100%;\n`\n\nconst TopTextWrapper = styled.div`\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`\n\nconst BottomTextWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`\n\nconst StyledPrimaryText = styled(Text)`\n  margin-right: 16px;\n`\n// const timeEndLottery = new Date;\n// timeEndLottery.setHours(23, 0, 0);\n\n// const timeStartLottery = new Date;\n// timeStartLottery.setHours(24, 0, 0);\n\n// const timeStartLottery = new Date(19, 0, 0);\n\nconst LotteryProgress = () => {\n  const { fastRefresh } = useRefresh()\n  const [timeRemainDraw, setTimeRemainDraw] = useState(\"\");\n  const [timeRemainSale, setTimeRemainSale] = useState(\"\");\n  const [percentRemain, setPercentRemain] = useState(0)\n  \n\n  const TranslateString = useI18n()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const currentMillis = useCurrentTime()  \n\n\n  useEffect(() => {\n    const fetchTimeLottery = async () => {\n      const timeEndLottery = new Date();\n      const timeStartLottery = new Date();\n      const {data} = await axios.get(`${BASE_API_ADMIN}/lotteries`);\n\n      // set time remain to end lottery phase\n      timeEndLottery.setHours(data[0].timeDrawLottery.hh, data[0].timeDrawLottery.mm, 0);\n      setTimeRemainDraw(getTimeRemainDraw(timeEndLottery));\n\n      // set time remain to start new lottery phase\n      timeStartLottery.setHours(data[0].timeStartNewPhase.hh, data[0].timeStartNewPhase.mm, 0);\n      setTimeRemainSale(getTimeRemainDraw(timeStartLottery));\n\n      if (lotteryHasDrawn){\n        setPercentRemain( 100 - ((timeStartLottery.getTime() - currentMillis) * 100 / 86400000));\n      }\n      else \n        setPercentRemain( 100 - ((timeEndLottery.getTime() - currentMillis) * 100 / 86400000));\n\n    }\n    fetchTimeLottery();\n  },[fastRefresh, lotteryHasDrawn, currentMillis])\n\n  return (\n    <ProgressWrapper>\n      <Progress primaryStep={percentRemain} secondaryStep={ (1/24) / 100} />\n      <TopTextWrapper>\n        <StyledPrimaryText fontSize=\"20px\" bold color=\"yellow\">\n          {lotteryHasDrawn ? timeRemainSale : timeRemainDraw}\n        </StyledPrimaryText>\n        <Text fontSize=\"20px\" bold color=\"invertedContrast\">\n          {lotteryHasDrawn ? TranslateString(434, 'Until ticket sale') : TranslateString(492, 'Until lottery draw')}\n        </Text>\n      </TopTextWrapper>\n      {lotteryHasDrawn && (\n        <BottomTextWrapper>\n          <Text color=\"invertedContrast\">\n            {/* {timeUntilLotteryDraw} {TranslateString(492, 'Until lottery draw')} */}\n          </Text>\n        </BottomTextWrapper>\n      )}\n    </ProgressWrapper>\n  )\n}\n\nexport default LotteryProgress\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Container from 'components/layout/Container'\nimport LotteryProgress from './LotteryProgress'\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: rgb(243, 193, 17);\n  margin-bottom: 5px;\n`\n\nconst Blurb = styled(Text)`\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst StyledHero = styled.div`\n  // background: url('../images/large-pc.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  padding-bottom: 60px;\n  padding-top: 60px;\n  background-color: #0000001a;\n`\n\nconst StyledContainer = styled(Container)`\n  display: grid;\n  grid-template-columns: 1fr;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: 1fr 400px;\n  }\n`\n\nconst LeftWrapper = styled.div`\n  flex: 1;\n  padding-right: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-right: 32px;\n  }\n`\n\nconst RightWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  flex: 1;\n  padding-left: 0;\n  margin-top: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0;\n    padding-left: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-left: 32px;\n  }\n`\n\nconst ContentDes = styled.div`\n  margin-bottom: 20px;\n`\n\nconst Hero = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledHero>\n      <StyledContainer>\n        <LeftWrapper>\n          <img src=\"images/banner-jackpot.png\" alt=\"\" />\n        </LeftWrapper>\n\n        <RightWrapper>\n          <ContentDes>\n            <Title>{TranslateString(708, 'The LUCKY Lottery')}</Title>\n            <Blurb>{TranslateString(710, 'Buy tickets with LUCKY for collect more NFTs')}</Blurb>\n            <Blurb>{TranslateString(712, 'Win if 2, 3, or 4 of your ticket numbers match!')}</Blurb>\n          </ContentDes>\n          <LotteryProgress />\n        </RightWrapper>\n      </StyledContainer>\n    </StyledHero>\n  )\n}\n\nexport default Hero\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Card, CardBody } from '@luckyswap/uikit'\nimport { useWinningNumbers, useMatchingRewardLength } from 'hooks/useTickets'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\n\nconst WinningNumbers: React.FC = () => {\n  const { account } = useWeb3React()\n  const winNumbers = useWinningNumbers()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const MatchedNumber4 = useMatchingRewardLength(4)\n  const MatchedNumber3 = useMatchingRewardLength(3)\n  const MatchedNumber2 = useMatchingRewardLength(2)\n  const TranslateString = useI18n()\n\n  return (\n    <CardWrapper>\n      <CardBodyNew>\n        <StyledCardContentInner>\n          <StyledCardHeader>\n            <Title style={{ color: 'rgb(243, 193, 17)' }}>\n              {account && lotteryHasDrawn\n                ? `${TranslateString(570, 'Latest Winning Numbers')}`\n                : TranslateString(440, 'Latest Winning Numbers')}\n            </Title>\n          </StyledCardHeader>\n          <Row>\n            {/* <img\n              alt=\"\"\n              src=\"https://merlinlab.com/static/media/leftGoldenCoin.6aef3b76.svg\"\n              className=\"sc-iCfLBT sc-ezbkgU gvyEtt jElfkq\"\n            />\n            <img\n              alt=\"\"\n              src=\"https://merlinlab.com/static/media/rightGoldenCoin.e795d41c.svg\"\n              className=\"sc-iCfLBT sc-ezbkgU KkWOV jElfkq\"\n            /> */}\n            {winNumbers.map((number, index) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <TicketNumberBox key={index}>\n                <CenteredText>{number}</CenteredText>\n              </TicketNumberBox>\n            ))}\n          </Row>\n          <Column>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {TranslateString(442, 'Tickets matching 4 numbers:')}\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111' }}>{MatchedNumber4}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {TranslateString(444, 'Tickets matching 3 numbers:')}\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111' }}>{MatchedNumber3}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {TranslateString(446, 'Tickets matching 2 numbers:')}\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111' }}>{MatchedNumber2}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n          </Column>\n\n          <Link href=\"/\" target=\"_blank\">\n            {TranslateString(448, 'Export recent winning numbers')}\n          </Link>\n        </StyledCardContentInner>\n      </CardBodyNew>\n    </CardWrapper>\n  )\n}\n\nconst CardBodyNew = styled.div`\n  position: relative;\n  background-color: rgb(43 41 41);\n  border: 0.0625rem solid rgba(255, 255, 255, 0.2);\n  border-radius: 1.25rem;\n  padding: 24px;\n  min-height: 496px;\n`\n\nconst Link = styled.a`\n  margin-top: 1em;\n  text-decoration: none;\n  color: #101010;\n  background-color: #f3c111;\n  border-radius: 12px;\n  padding: 17px 25px;\n  font-weight: 500;\n  white-space: nowrap;\n\n  @media (min-width) {\n    padding: 10px 25px;\n  }\n\n  &:hover {\n    background-color: #ffda3b;\n    color: #101010;\n    transition: 0.5s;\n  }\n`\n\nconst Row = styled.div`\n  margin-top: 1em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  border: 1px solid #f3c111;\n  border-radius: 14px;\n`\n\nconst RabbitRow = styled.div`\n  margin-top: -2.3em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n\n  @media (max-width: 768px) {\n    display: none;\n  }\n`\n\nconst RabbitRowSmall = styled.div`\n  margin-top: -2.3em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n\n  @media (min-width: 768px) {\n    display: none;\n  }\n`\n\nconst CardImage = styled.div`\n  text-align: center;\n`\n\nconst CardImageFirst = styled.div`\n  text-align: center;\n  margin-left: -1.2em;\n\n  @media (max-width: 600) {\n    margin-left: -0.2em;\n  }\n`\n\nconst RowNoPadding = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 10px;\n`\n\nconst Column = styled.div`\n  margin-top: 1em;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`\n\nconst CenteredText = styled.div`\n  text-align: center;\n  align-items: center;\n`\n\nconst CenteredTextWithPadding = styled.div`\n  text-align: center;\n  align-items: center;\n  padding-left: 2px;\n  padding-right: 2px;\n  font-weight: 600;\n`\n\nconst TicketNumberBox = styled.div`\n  padding: 10px;\n  border-radius: 12px;\n  text-shadow: rgb(255 214 0) 0px 0px 12px;\n  // background: linear-gradient(180deg, #54dade 0%, #24c7d6 76.22%);\n  color: white;\n  font-size: 20px;\n  font-weight: 900;\n  margin: 10px;\n  margin-bottom: 7px;\n  width: 40px;\n\n  @media (min-width: 768px) {\n    font-size: 40px;\n    margin: 20px;\n    background: url('../images/bg-number.svg');\n    background-repeat: no-repeat;\n    width: 120px;\n    min-height: 150px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n`\n\nconst RabbitBox = styled.div`\n  /* padding: 10px; */\n  border-radius: 12px;\n  margin: 16px 20px;\n  width: 60px;\n`\n\nconst RabbitBoxSmall = styled.div`\n  padding-top: 10px;\n  padding-left: 10px;\n  border-radius: 12px;\n  margin: 20px;\n  width: 20px;\n`\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`\n\nconst CardWrapper = styled.div`\n  margin-bottom: 30px;\n`\n\nconst Title = styled.div`\n  color: ${(props) => props.theme.colors.secondary};\n  font-size: 24px;\n  width: 50vw;\n  text-align: center;\n  font-weight: 1000;\n`\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n\n  &:before {\n    position: absolute;\n    top: 0;\n    left: 0;\n    content: '';\n    background: url('../images/jackpot-l.png');\n    width: 220px;\n    height: 496px;\n\n    @media (max-width: 991px) {\n      opacity: 0.2;\n    }\n  }\n\n  &:after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    content: '';\n    background: url('../images/jackpot-r.png');\n    width: 220px;\n    height: 496px;\n\n    @media (max-width: 991px) {\n      opacity: 0.2;\n    }\n  }\n`\n\nexport default WinningNumbers\n","import React from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { Heading, Text } from '@luckyswap/uikit'\nimport { BigNumber } from 'bignumber.js'\nimport { usePriceLuckyBusd } from 'state/hooks'\nimport CardBusdValue from '../../Home/components/CardBusdValue'\n\nexport interface PrizeGridProps {\n  lotteryPrizeAmount?: number\n  pastDraw?: boolean\n  jackpotMatches?: number\n  oneTicketMatches?: number\n  twoTicketMatches?: number\n  threeTicketMatches?: number\n}\n\nconst Grid = styled.div<{ pastDraw?: boolean }>`\n  display: grid;\n  grid-template-columns: repeat(${(props) => (props.pastDraw ? 3 : 2)}, 1fr);\n  grid-template-rows: repeat(4, auto);\n`\n\nconst RightAlignedText = styled(Text)`\n  padding: 8px 0;\n`\n\nconst RightAlignedHeading = styled(Heading)`\n  \n`\n\nconst GridItem = styled.div<{ marginBottom?: string }>`\n  margin-bottom: ${(props) => (props.marginBottom ? props.marginBottom : '10px')};\n  text-align: center;\n  &:nth-child(3), &:nth-child(4){\n    background: rgba(243, 193, 17, 0.15);\n  }\n  &:nth-child(5), &:nth-child(6){\n    background: rgba(255, 255, 255, 0.15);\n  }\n  &:nth-child(7), &:nth-child(8){\n    background: rgba(255, 255, 255, 0.05);\n  }\n`\n\nconst PastDrawGridItem = styled(GridItem)`\n  transform: translate(-40%, 0%);\n`\nconst GridPrize = styled.div`\n  .text{\n    padding: 8px 0;\n  }\n`\nconst CardBusd = styled.span`\n  font-size: 13px;\n  margin-right: 20px;\n  color: #F3C111;\n`\n\nconst PrizeGrid: React.FC<PrizeGridProps> = ({\n  lotteryPrizeAmount = 0,\n  pastDraw = false,\n  jackpotMatches,\n  twoTicketMatches,\n  threeTicketMatches,\n}) => {\n  const fourMatchesAmount = +((lotteryPrizeAmount / 100) * 50).toFixed(0)\n  const threeMatchesAmount = +((lotteryPrizeAmount / 100) * 20).toFixed(0)\n  const twoMatchesAmount = +((lotteryPrizeAmount / 100) * 10).toFixed(0)\n  const burnAmount = +((lotteryPrizeAmount / 100) * 20).toFixed(0)\n  const TranslateString = useI18n()\n  const cakeBusdPrice = usePriceLuckyBusd()\n\n  const getCakeBusdValue = (amount: number) => {\n    return new BigNumber(amount).multipliedBy(cakeBusdPrice).toNumber()\n  }\n\n  return (\n    <GridPrize>\n    <Grid pastDraw={pastDraw}>\n      <GridItem>\n        <Text fontSize=\"24px\" color=\"#F3C111\">\n          {TranslateString(756, 'No. Matched')}\n        </Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedText padding=\"0px\" fontSize=\"14px\" color=\"textSubtle\">\n            {TranslateString(754, 'Winners')}\n          </RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText style={{padding: 0}}  fontSize=\"24px\" color=\"#F3C111\">\n          {TranslateString(752, 'Prize Pot')}\n        </RightAlignedText>\n      </GridItem>\n      {/* 4 matches row */}\n      <GridItem>\n        <Heading className=\"text\" style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }} size=\"md\">\n          4\n        </Heading>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedHeading className=\"text\" size=\"md\">{jackpotMatches}</RightAlignedHeading>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedHeading className=\"text\" size=\"md\">\n          <CardBusd>\n            {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getCakeBusdValue(fourMatchesAmount)} />}  \n          </CardBusd>\n          {fourMatchesAmount.toLocaleString()}\n        </RightAlignedHeading>\n      </GridItem>\n      {/* 3 matches row */}\n      <GridItem style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }}>\n        <Text className=\"text\" padding=\"8px 0\" bold>3</Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem >\n          <RightAlignedText className=\"text\" bold>{threeTicketMatches}</RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText>\n          <CardBusd>\n            {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getCakeBusdValue(threeMatchesAmount)} />}  \n          </CardBusd>\n          {threeMatchesAmount.toLocaleString()}\n        </RightAlignedText>\n      </GridItem>\n      {/* 2 matches row */}\n      <GridItem style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }}>\n        <Text className=\"text\">2</Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedText className=\"text\">{twoTicketMatches}</RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText>\n          <CardBusd>\n            {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getCakeBusdValue(twoMatchesAmount)} />}\n          </CardBusd>\n          {twoMatchesAmount.toLocaleString()}\n        </RightAlignedText>\n      </GridItem>\n      {/* Burn row */}\n      <GridItem marginBottom=\"0\">\n        <Text>{TranslateString(999, `${pastDraw ? 'Burned' : 'To burn'}`)}:</Text>\n      </GridItem>\n      {pastDraw ? (\n        <>\n          <GridItem marginBottom=\"0\" />\n          <GridItem marginBottom=\"0\">\n            <RightAlignedText>\n              <CardBusd>\n                {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getCakeBusdValue(burnAmount)} />}\n              </CardBusd>\n              {burnAmount.toLocaleString()}\n            </RightAlignedText>\n          </GridItem>\n        </>\n      ) : (\n        <GridItem marginBottom=\"0\">\n          <RightAlignedText>\n            <CardBusd>\n              {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getCakeBusdValue(burnAmount)} />}\n            </CardBusd>\n            {burnAmount.toLocaleString()}\n            </RightAlignedText>\n        </GridItem>\n      )}\n    </Grid>\n    </GridPrize>\n  )\n}\n\nexport default PrizeGrid\n","import React, { useContext, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Card, CardBody, CardFooter, Text, PancakeRoundIcon, Flex, Skeleton } from '@luckyswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useTotalRewards } from 'hooks/useTickets'\nimport { getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { useContract } from 'hooks/useContract'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { getLotteryIssueIndex } from 'utils/lotteryUtils'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton/ExpandableSectionButton'\nimport { BigNumber } from 'bignumber.js'\nimport { usePriceLuckyBusd } from 'state/hooks'\nimport PrizeGrid from '../PrizeGrid'\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\nimport CardValue from '../../../Home/components/CardValue'\n\n// const Container = styled.div`\n//   margin-left: auto;\n//   margin-right: auto;\n//   max-width: 1200px;\n//   margin-bottom: 30px;\n// `\n\nconst BoxTotal = styled.div`\n  background: linear-gradient(45deg, rgb(35 35 35) 30%, rgb(45 45 45) 100%);\n  box-shadow: 0px 0px 11px 0px rgb(16 16 16 / 57%);\n  color: #ffffff;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n  margin-bottom: 20px;\n  display: grid;\n  grid-template-columns: 1fr;\n\n  @media (min-width: 991px) {\n    grid-template-columns: 1fr 1fr;\n    margin: 0 auto 60px;\n  }\n`\n\nconst CardHeading = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n`\n\nconst Right = styled.div`\n  display: flex;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: none;\n  }\n`\n\nconst Left = styled.div`\n  display: flex;\n`\n\nconst IconWrapper = styled.div`\n  margin-right: 16px;\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\n\nconst PrizeCountWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst ExpandingWrapper = styled.div<{ showFooter: boolean }>`\n  height: ${(props) => (props.showFooter ? '100%' : '0px')};\n  padding: 15px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 100%;\n  }\n`\nconst CardBodyNew = styled.div`\n  background-color: rgba(255, 255, 255, 0.1);\n  border: 0.0625rem solid rgba(255, 255, 255, 0.2);\n  border-radius: 1.25rem;\n  padding: 24px;\n`\n\nconst BoxLucky = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  padding: 15px 0 5px;\n\n  h2 {\n    font-size: 44px;\n    position: relative;\n    color: #f3c111;\n    font-weight: 700;\n  }\n\n  span {\n    font-size: 16px;\n    position: absolute;\n    top: 0;\n  }\n`\n\nconst Dollar = styled.div`\n  padding-left: 60px;\n`\n\nconst RoundPrize = styled.div`\n  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@500;600;700&display=swap');\n  font-family: 'Montserrat', sans-serif;\n  font-weight: 900;\n  font-size: 36px;\n  line-height: 44px;\n    color: #252525;\n    text-shadow: 1px 1px 0 #F3C111,\n    -1px 1px 0 #F3C111,\n    1px -1px 0 #F3C111,\n    -1px -1px 0 #F3C111,\n    0px 1px 0 #F3C111,\n    0px -1px 0 #F3C111,\n    -1px 0px 0 #F3C111,\n    1px 0px 0 #F3C111,\n    2px 2px 0 #F3C111,\n    -2px 2px 0 #F3C111,\n    2px -2px 0 #F3C111,\n    -2px -2px 0 #F3C111,\n    0px 2px 0 #F3C111,\n    0px -2px 0 #F3C111,\n    -2px 0px 0 #F3C111,\n    2px 0px 0 #F3C111,\n    1px 2px 0 #F3C111,\n    -1px 2px 0 #F3C111,\n    1px -2px 0 #F3C111,\n    -1px -2px 0 #F3C111,\n    2px 1px 0 #F3C111,\n    -2px 1px 0 #F3C111,\n    2px -1px 0 #F3C111,\n    -2px -1px 0 #F3C111;\n`\n\nconst TotalPrizesCard = () => {\n  const [indexRoute, setIndexRoute]  = useState(0)\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const [showFooter, setShowFooter] = useState(false)\n  const lotteryPrizeAmount = +getBalanceNumber(useTotalRewards()).toFixed(0)\n  const lotteryPrizeAmountBusd = new BigNumber(lotteryPrizeAmount).multipliedBy(usePriceLuckyBusd()).toNumber()\n  const lotteryPrizeWithCommaSeparators = lotteryPrizeAmount.toLocaleString()\n  const { currentLotteryNumber } = useContext(PastLotteryDataContext)\n\n\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n\n  useEffect(() => {\n    const fetchLotteryIndex = async () => {\n      if (lotteryContract) {\n        const index = await getLotteryIssueIndex(lotteryContract)\n\n        setIndexRoute(index)\n      }\n    }\n\n    fetchLotteryIndex()\n  }, [lotteryContract])\n\n\n  return (\n    <BoxTotal>\n      <CardBody>\n        {account && (\n          <Flex mb=\"55px\" alignItems=\"center\" justifyContent=\"space-between\">\n            {currentLotteryNumber === 0 && <Skeleton height={20} width={56} />}\n            <>\n              <RoundPrize>\n                {TranslateString(720, `Round #${indexRoute}`, { num: currentLotteryNumber })}\n              </RoundPrize>\n            </>\n            {/* {currentLotteryNumber > 0 && (\n                <>\n                  <Text fontSize=\"12px\" style={{ fontWeight: 600 }}>\n                    {TranslateString(720, `Round #${currentLotteryNumber}`, { num: currentLotteryNumber })}\n                  </Text>\n                </>\n              )} */}\n          </Flex>\n        )}\n        <CardHeading>\n          <Left>\n            <PrizeCountWrapper>\n              <Text fontSize=\"24px\" fontWeight=\"500\" color=\"textSubtle\">\n                {TranslateString(722, 'Total Pot:')}\n              </Text>\n              <BoxLucky>\n                <IconWrapper>\n                  <img width=\"75px\" alt=\"\" src=\"/images/icon-logo-y.png\" />\n                </IconWrapper>\n                <Heading style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px', fontSize: '44' }} size=\"lg\">\n                  {lotteryPrizeWithCommaSeparators} <span>LUCKY</span>\n                </Heading>\n              </BoxLucky>\n              <Dollar>{lotteryPrizeAmountBusd !== 0 && <CardBusdValue value={lotteryPrizeAmountBusd} />}</Dollar>\n\n            </PrizeCountWrapper>\n          </Left>\n          <Right>\n            <ExpandableSectionButton onClick={() => setShowFooter(!showFooter)} expanded={showFooter} />\n          </Right>\n        </CardHeading>\n      </CardBody>\n      <ExpandingWrapper showFooter={showFooter}>\n        <CardFooter className=\"no-border\">\n          <PrizeGrid lotteryPrizeAmount={lotteryPrizeAmount} />\n        </CardFooter>\n      </ExpandingWrapper>\n    </BoxTotal>\n  )\n}\n\nexport default TotalPrizesCard\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Loading: React.FC = () => <StyledLoading />\n\nconst StyledLoading = styled.div`\n  border: 8px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 8px solid #ddd;\n  border-bottom: 8px solid #ddd;\n  width: 20px;\n  height: 20px;\n  -webkit-animation: spin 2s linear infinite;\n  animation: spin 2s linear infinite;\n  @-webkit-keyframes spin {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`\n\nexport default Loading\n","import React, { useCallback } from 'react'\nimport { Button, Modal } from '@luckyswap/uikit'\nimport styled from 'styled-components'\nimport { useWinningNumbers } from 'hooks/useTickets'\nimport useI18n from 'hooks/useI18n'\n\ninterface UserTicketsModalProps {\n  myTicketNumbers: Array<any>\n  from?: string\n  onDismiss?: () => void\n}\n\nconst UserTicketsModal: React.FC<UserTicketsModalProps> = ({ myTicketNumbers, onDismiss, from }) => {\n  const winNumbers = useWinningNumbers()\n  const TranslateString = useI18n()\n  const rewardMatch = useCallback(\n    (number) => {\n      let n = 0\n      for (let i = winNumbers.length - 1; i >= 0; i--) {\n        // eslint-disable-next-line eqeqeq\n        if (winNumbers[i] == number[i]) n++\n      }\n      return n\n    },\n    [winNumbers],\n  )\n\n  const listItems = myTicketNumbers.map((number, index) => {\n    if (rewardMatch(number[0]) > 1 && from !== 'buy') {\n      const emoji = new Array(rewardMatch(number[0]) + 1).join('🤑')\n      return (\n        // eslint-disable-next-line react/no-array-index-key\n        <RewardP key={index}>\n          {emoji}\n          {number.toString()}\n          {emoji}\n        </RewardP>\n      )\n    }\n    // eslint-disable-next-line react/no-array-index-key\n    return (\n      <p style={{ color: 'yellow' }} key={index}>\n        {number.toString()}\n      </p>\n    )\n  })\n\n  return (\n    <Modal\n      title={TranslateString(490, `My Tickets (Total: ${myTicketNumbers.length})`, { TICKETS: myTicketNumbers.length })}\n      onDismiss={onDismiss}\n    >\n      <TicketsList>\n        <h2>{listItems}</h2>\n      </TicketsList>\n      <StyledButton variant=\"secondary\" onClick={onDismiss}>\n        {TranslateString(438, 'Close')}\n      </StyledButton>\n    </Modal>\n  )\n}\n\nconst RewardP = styled.div`\n  color: #ff8c28;\n`\n\nconst TicketsList = styled.div`\n  text-align: center;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst StyledButton = styled(Button)`\n  margin-top: ${(props) => props.theme.spacing[2]}px;\n`\n\nexport default UserTicketsModal\n","import React, { useCallback, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Button, Heading, Won, useModal, AutoRenewIcon } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\nimport useTickets, { useTotalClaim } from 'hooks/useTickets'\nimport {  useContract } from 'hooks/useContract'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport Loading from '../Loading'\nimport MyTicketsModal from '../TicketCard/UserTicketsModal'\n\nconst WinningsWrapper = styled.div`\n  display: flex;\n  align-items: baseline;\n`\n\nconst IconWrapper = styled.div`\n  margin-bottom: 16px;\n\n  svg {\n    width: 80px;\n    height: 80px;\n  }\n`\n\nconst StyledCardActions = styled.div`\n  margin-top: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`\n\nconst StyledButton = styled(Button)`\n  margin-top: ${(props) => props.theme.spacing[1]}px;\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\n\nconst PrizesWonContent: React.FC = () => {\n  const [requestedClaim, setRequestedClaim] = useState(false)\n  const [isClaimLoading, setIsClaimLoading] = useState(false);\n  const TranslateString = useI18n()\n  const { claimLoading, claimAmount } = useTotalClaim()\n  const { onMultiClaim } = useMultiClaimLottery()\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n\n  const tickets = useTickets()\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n  const addTransaction = useTransactionAdder()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setRequestedClaim(true)\n      setIsClaimLoading(true);\n      const txHash = await onMultiClaim();\n      if (!txHash) \n        setIsClaimLoading(false);\n        setRequestedClaim(false)\n      addTransaction(txHash, {\n        summary: 'Claim successfully!',\n      })\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedClaim(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onMultiClaim, setRequestedClaim])\n\n  useEffect(() => {\n    lotteryContract.on(\"MultiClaim\", () => {\n      setIsClaimLoading(false);\n    })\n  })\n\n  const winnings = getBalanceNumber(claimAmount).toFixed(2)\n\n\n  return (\n    <StyledCardContentInner>\n      <IconWrapper>\n        <img src=\"images/icon-gif.svg\" alt=\"gif\" />\n      </IconWrapper>\n      <Heading as=\"h3\" size=\"lg\" color=\"#1CFFBB\">\n        {TranslateString(660, 'You won!')}\n      </Heading>\n      {claimLoading && <Loading />}\n      {!claimLoading && (\n        <>\n          <WinningsWrapper>\n            <Heading as=\"h4\" size=\"xl\" style={{ marginRight: '6px' }}>\n              {winnings}\n            </Heading>\n            <Heading as=\"h4\" size=\"lg\">\n              LUCKY\n            </Heading>\n          </WinningsWrapper>\n        </>\n      )}\n      <StyledCardActions>\n        <Button\n          className=\"border-yellow\"\n          variant=\"secondary\"\n          width=\"100%\"\n          disabled={requestedClaim || isClaimLoading}\n          onClick={handleClaim}\n        >\n          {isClaimLoading && spinnerIcon}\n          {TranslateString(1056, 'Collect')}\n        </Button>\n      </StyledCardActions>\n      <StyledButton variant=\"text\" onClick={onPresentMyTickets}>\n        {TranslateString(432, 'View your tickets')}\n      </StyledButton>\n    </StyledCardContentInner>\n  )\n}\n\nexport default PrizesWonContent\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, useModal } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useTickets from 'hooks/useTickets'\nimport MyTicketsModal from '../TicketCard/UserTicketsModal'\n\nconst Wrapper = styled.div`\n  display: flex;\n`\n\nconst TextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledText = styled(Text)`\n  padding-left: 12px;\n`\n\nconst Image = styled.img`\n  margin-right: 6px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 20px;\n  }\n`\nconst StyledButton = styled(Button)`\n  padding: 0 12px;\n  height: unset;\n`\n\nconst NoPrizesContent: React.FC = () => {\n  const TranslateString = useI18n()\n  const tickets = useTickets()\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n\n  return (\n    <Wrapper>\n      <Image src=\"/images/no-prize.svg\" alt=\"no prizes won\" />\n      <TextWrapper>\n        <StyledText>{TranslateString(726, 'Sorry, no prizes to collect')}</StyledText>\n        <StyledButton variant=\"text\" onClick={onPresentMyTickets}>\n          {TranslateString(432, 'View your tickets and NFTs')}\n        </StyledButton>\n      </TextWrapper>\n    </Wrapper>\n  )\n}\n\nexport default NoPrizesContent\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody } from '@luckyswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport PrizesWonContent from './PrizesWonContent'\nimport NoPrizesContent from './NoPrizesContent'\n\nconst StyledCard = styled(Card)`\n  margin: 0 !important;\n  max-width: 100% !important;\n  border-radius: 14px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  ${(props) =>\n    props.isDisabled\n      ? `  \n        margin-top: 0;\n        background-color: unset;\n        box-shadow: unset;\n        border: 1px solid ${props.theme.colors.textDisabled};\n\n        ${props.theme.mediaQueries.sm} {\n          margin-top: 0;\n        }\n\n        ${props.theme.mediaQueries.lg} {\n          margin-top: 0;\n        }\n        `\n      : ``}\n`\n\nconst YourPrizesCard: React.FC = () => {\n  const { claimAmount } = useTotalClaim()\n\n  const winnings = getBalanceNumber(claimAmount)\n  const isAWin = winnings > 0\n\n  return (\n    <StyledCard isDisabled={!isAWin} isActive={isAWin}>\n      <CardBody>{isAWin ? <PrizesWonContent /> : <NoPrizesContent />}</CardBody>\n    </StyledCard>\n  )\n}\n\nexport default YourPrizesCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Ticket } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\n\nconst StyledCardBody = styled(CardBody)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n\nconst StyledHeading = styled(Heading)`\n  margin: 16px 0;\n`\n\nconst IconWrapper = styled.div`\n  svg {\n    width: 80px;\n    height: 80px;\n  }\n`\n\nconst UnlockWalletCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card isActive>\n      <StyledCardBody>\n        <IconWrapper>\n          <img src=\"https://merlinlab.com/assets/lottery/lottery.svg\" alt=\"\" />\n        </IconWrapper>\n        <StyledHeading size=\"md\">{TranslateString(1080, 'Unlock wallet to access lottery')}</StyledHeading>\n        <UnlockButton />\n      </StyledCardBody>\n    </Card>\n  )\n}\n\nexport default UnlockWalletCard\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@luckyswap/uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\nimport useI18n from 'hooks/useI18n'\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE } from 'config'\nimport { useWeb3React } from '@web3-react/core'\nimport { useContract } from 'hooks/useContract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { useTransactionAdder } from 'state/transactions/hooks'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onConfirm?: (amount: string, numbers: Array<number>) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, 18)\n  }, [max])\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\n\n  const { onMultiBuy } = useMultiBuyLottery()\n  const maxNumber = useMaxNumber()\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  const addTransaction = useTransactionAdder()\n\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      // await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\n      const txHash = await lotteryContract\n        .multiBuy(new BigNumber(LOTTERY_TICKET_PRICE.toString()).times(new BigNumber(10).pow(18)).toString(), numbers)\n        .then((response) => {\n          addTransaction(response, {\n            summary: 'Buy ticket successfully!',\n          })\n        })\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * LOTTERY_TICKET_PRICE\n  }\n  return (\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"LUCKY\"\n      />\n      <div>\n        <Tips>{TranslateString(999, `1 Ticket = ${LOTTERY_TICKET_PRICE} LUCKY`, { num: LOTTERY_TICKET_PRICE })}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {TranslateString(\n            478,\n            'Ticket purchases are final. Your LUCKY cannot be returned to you after buying tickets.',\n          )}\n        </Announce>\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} LUCKY`)}</Final>\n      </div>\n      <ModalActions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n\n        \n        <Button\n          id=\"lottery-buy-complete\"\n          width=\"100%\"\n          variant=\"secondary\"\n          disabled={\n            pendingTx ||\n            parseInt(val) > Number(maxTickets) ||\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\n            parseInt(val) < 1\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #fff;\n`\n","import React from 'react'\nimport { Button, Modal } from '@luckyswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\n\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Modal title={TranslateString(466, 'Warning')} onDismiss={onDismiss}>\n      <TicketsList>\n        {TranslateString(468, 'Lottery ticket purchases are final.')}\n        <br />\n        {TranslateString(470, 'Your CAKE will not be returned to you after you spend it to buy tickets.')}\n        <br />\n        {TranslateString(472, 'Tickets are only valid for one lottery draw, and will be burned after the draw.')}\n        <br />\n        {TranslateString(\n          474,\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\n        )}\n      </TicketsList>\n      <ModalActions>\n        <Button width=\"100%\" onClick={onDismiss}>\n          {TranslateString(476, 'I understand')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nconst TicketsList = styled.div`\n  text-align: left;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nexport default WarningModal\n","import React, { useMemo, useCallback, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, useModal } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { useContract } from 'hooks/useContract'\nimport { useApproveCallbackCustom } from 'hooks/useApproveCallback'\nimport { XLUCKY_TESTNET_ADDRESSES } from 'config'\nimport bep20Abi from 'config/abi/erc20.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport useRefresh from 'hooks/useRefresh'\nimport useUtilityToken from 'hooks/useUtilityToken'\nimport { getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport lotteryTicketAbi from 'config/abi/lotteryNft.json'\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks'\nimport { TransactionDetails } from 'state/transactions/reducer'\nimport { getTickets } from 'utils/lotteryUtils'\nimport BuyTicketModal from './BuyTicketModal'\nimport MyTicketsModal from './UserTicketsModal'\nimport PurchaseWarningModal from './PurchaseWarningModal'\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst CardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: ${(props) => props.theme.spacing[3]}px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    justify-content: space-between;\n  }\n`\n\nconst TicketCard: React.FC = () => {\n  const TranslateString = useI18n()\n  const [balanceToken, setBalanceToken] = useState(0)\n  const [tickets, setTickets] = useState([])\n  const [allowance, setAllowance] = useState(0)\n  // const allowance = useLotteryAllowance()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n\n  const { account, chainId } = useWeb3React()\n  const contractBEP20 = useContract(XLUCKY_TESTNET_ADDRESSES[chainId], bep20Abi)\n\n  const useContractTemp = useContract(XLUCKY_TESTNET_ADDRESSES[chainId], bep20Abi)\n\n  const ticketsContract = useContract(getLotteryTicketAddress(), lotteryTicketAbi)\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  const { fastRefresh } = useRefresh()\n\n  const ticketsLength = tickets.length\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\n  const [onPresentBuy] = useModal(<BuyTicketModal max={new BigNumber(balanceToken)} tokenName=\"CAKE\" />)\n\n  const { listenApproveEvent } = useUtilityToken(XLUCKY_TESTNET_ADDRESSES[chainId])\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, null)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, lotteryContract, fastRefresh, ticketsContract])\n\n  useEffect(() => {\n    const fetchApprovalData = async () => {\n      if (account && contractBEP20) {\n        try {\n          // const response = await contractBEP20?.allowance?.(account, getLotteryAddress())\n          setAllowance(new BigNumber('10000000000000000000000000000000').toNumber())\n        } catch (error) {\n          console.log(' error fetch approval data')\n        }\n      }\n    }\n    listenApproveEvent(() => fetchApprovalData())\n  }, [listenApproveEvent, account, contractBEP20])\n\n\n  useEffect(() => {\n    if (useContractTemp) {\n      useContractTemp\n        .balanceOf(account)\n        .then((data) => {\n          setBalanceToken(data.toString())\n        })\n        .catch((error) => console.log('lottery : ', error))\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account])\n\n  useEffect(() => {\n    if (useContractTemp) {\n      useContractTemp\n        .balanceOf(account)\n        .then((data) => {\n          setBalanceToken(data.toString())\n        })\n        .catch((error) => console.log('lottery : ', error))\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, fastRefresh])\n\n  useEffect(() => {\n    const fetchApprovalData = async () => {\n      if (account && contractBEP20) {\n        try {\n          const response = await contractBEP20?.allowance?.(account, getLotteryAddress())\n          console.log(\"response\", response.toString())\n          setAllowance(response.toString())\n        } catch (error) {\n          console.log(' error fetch approval data')\n        }\n      }\n    }\n\n    fetchApprovalData()\n  }, [account, contractBEP20])\n  const [requestedApproval, setRequestedApproval] = useState(false)\n\n  const [approval] = useApproveCallbackCustom(XLUCKY_TESTNET_ADDRESSES[chainId], getLotteryAddress())\n\n  async function onAttemptToApprove() {\n    return approval()\n  }\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onAttemptToApprove().then()\n    } catch (e) {\n      console.error(e)\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [approval, setRequestedApproval])\n\n  const allTransactions = useAllTransactions()\n\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  const getStatus = () => {\n    const pending = sortedRecentTransactions.filter((tx) => !tx.receipt).map((tx) => tx.hash)\n    return !!pending.length\n  }\n\n  const renderLotteryTicketButtons = () => {\n    if (allowance.toString() === '0') {\n      return (\n        <Dflex>\n          <Button\n            style={{ marginRight: '8px' }}\n            width=\"100%\"\n            disabled={ticketsLength === 0}\n            variant=\"secondary\"\n            onClick={onPresentMyTickets}\n          >\n            {TranslateString(432, 'View your tickets')}\n          </Button>\n          <Button\n            className=\"border-yellow\"\n            width=\"100%\"\n            disabled={requestedApproval || getStatus()}\n            onClick={handleApprove}\n          >\n            {getStatus() ? spinnerIcon : ''}\n            {TranslateString(494, 'Approve')}\n          </Button>\n        </Dflex>\n      )\n    }\n    return (\n      <>\n        <Button\n          style={{ marginRight: '8px' }}\n          width=\"100%\"\n          disabled={ticketsLength === 0}\n          variant=\"secondary\"\n          onClick={onPresentMyTickets}\n        >\n          {TranslateString(432, 'View your tickets')}\n        </Button>\n        <Button variant=\"secondary\" id=\"lottery-buy-start\" width=\"100%\" onClick={onPresentBuy}>\n          {getStatus() ? spinnerIcon : ''}\n          {TranslateString(430, 'Buy ticket')}\n        </Button>\n      </>\n    )\n  }\n\n  return (\n    <CardActions>\n      {lotteryHasDrawn ? (\n        <Button disabled> {TranslateString(874, 'On sale soon')}</Button>\n      ) : (\n        renderLotteryTicketButtons()\n      )}\n    </CardActions>\n  )\n}\n\nconst Dflex = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 20px;\n  width: 100%;\n`\n\nexport default TicketCard\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, TicketRound, Text, Heading } from '@luckyswap/uikit'\nimport axios from 'axios'\n\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport useTickets from 'hooks/useTickets'\nimport { useCurrentTime } from 'hooks/useTimer'\nimport useRefresh from 'hooks/useRefresh'\nimport { BASE_API_ADMIN } from 'config'\nimport TicketActions from './TicketActions'\nimport { getTicketSaleTime, getTimeRemainDraw } from '../../helpers/CountdownHelpers'\n\n\ninterface CardProps {\n  isSecondCard?: boolean\n}\n\nconst StyledCard = styled(Card)<CardProps>`\n  margin: 0 !important;\n  max-width: 100% !important;\n  border-radius: 14px;\n\n  ${(props) =>\n    props.isSecondCard\n      ? `  \n        margin-top: 0;\n\n        ${props.theme.mediaQueries.sm} {\n          margin-top: 0;\n        }\n\n        ${props.theme.mediaQueries.lg} {\n          margin-top: 0;\n        }\n        `\n      : ``}\n`\n\nconst CardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n`\n\nconst IconWrapper = styled.div`\n  margin-bottom: 16px;\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\n\nconst TicketCountWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`\n\nconst TicketCard: React.FC<CardProps> = ({ isSecondCard = false }) => {\n  const TranslateString = useI18n()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n\n  const tickets = useTickets()\n  const ticketsLength = tickets.length\n\n  const currentMillis = useCurrentTime()\n  const timeUntilTicketSale = lotteryHasDrawn && getTicketSaleTime(currentMillis)\n\n  const { fastRefresh } = useRefresh()\n  const [timeRemainDraw, setTimeRemainDraw] = useState(\"\");\n  const [timeRemainSale, setTimeRemainSale] = useState(\"\");\n\n  useEffect(() => {\n    const fetchTimeLottery = async () => {\n      const timeEndLottery = new Date();\n      const timeStartLottery = new Date();\n      const {data} = await axios.get(`${BASE_API_ADMIN}/lotteries`);\n\n      // set time remain to end lottery phase\n      timeEndLottery.setHours(data[0].timeDrawLottery.hh, data[0].timeDrawLottery.mm, 0);\n      setTimeRemainDraw(getTimeRemainDraw(timeEndLottery));\n\n      // set time remain to start new lottery phase\n      timeStartLottery.setHours(data[0].timeStartNewPhase.hh, data[0].timeStartNewPhase.mm, 0);\n      setTimeRemainSale(getTimeRemainDraw(timeStartLottery));\n    }\n    fetchTimeLottery();\n  },[fastRefresh])\n  // 12\n  return (\n    <StyledCard isSecondCard={isSecondCard}>\n      <CardBody>\n        <CardHeader>\n          <IconWrapper>\n            <img alt=\"\" src=\"../images/icon-lottery.svg\" />\n          </IconWrapper>\n          {lotteryHasDrawn ? (\n            <TicketCountWrapper>\n              <Text fontSize=\"20px\" color=\"textSubtle\">\n                {TranslateString(870, 'Your ticket for this round')}\n              </Text>\n              <Heading size=\"lg\" style={{ color: '#F3C111', fontSize: '30px' }}>\n                {timeRemainSale}\n              </Heading>\n            </TicketCountWrapper>\n          ) : (\n            <TicketCountWrapper>\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {TranslateString(724, 'Your tickets for this round')}\n              </Text>\n              <Heading size=\"lg\">{ticketsLength}</Heading>\n            </TicketCountWrapper>\n          )}\n        </CardHeader>\n        <TicketActions />\n      </CardBody>\n    </StyledCard>\n  )\n}\n\nexport default TicketCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Heading, Link, Image } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst LayoutWrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n  margin-bottom: 30px;\n  margin: 0 auto 40px;\n  display: flex;\n  flex-direction: column;\n  border-radius: 14px;\n  padding: 20px;\n  background-color: #2b2a2a;\n  text-align: center;\n`\n\nconst SectionTitle = styled.div`\n\n`\n\nconst TitleMain = styled.h2`\n  font-size: 40px;\n  line-height: 50px;\n  margin-bottom: 13px;\n  color: #fff;\n  font-weight: 700;\n  text-transform: capitalize;\n`\n\nconst SubTitle = styled.p`\n  max-width: 650px;\n  font-size: 16px;\n  line-height: 26px;\n  color: #fff;\n  margin: 0 auto;\n`\n\nconst BoxItem = styled.h2`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 20px;\n  margin-top: 30px;\n\n  @media (min-width: 768px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`\n\nconst Item = styled.div`\n  text-align: left;\n  overflow: hidden;\n  position: relative;\n  margin-bottom: 30px;\n  background: #f4c706;\n  box-shadow: 0px 30px 20px 0px rgb(0 37 93 / 15%);\n  border-radius: 15px;\n  transition: all 0.3s ease-in;\n  cursor: pointer;\n\n  &:after {\n    position: absolute;\n    content: \"\";\n    background: linear-gradient(to right,#ffd009,#f97503);\n    width: 0%;\n    height: 0%;\n    top: 50%;\n    left: 50%;\n    bottom: 0px;\n    opacity: 0;\n    transform: translate(-50%, -50%);\n    transition: all 0.3s ease-in;\n    border-radius: 50%;\n  }\n\n  &:hover {\n    transform: translateY(0px) !important;\n\n    &:after {\n      width: 100%;\n      height: 100%;\n      opacity: 1;\n      border-radius: 0%;\n    }\n\n    .btn-step {\n      color: #1a1a1a;\n\n      &:before {\n        background-color: #fce307;\n      }\n    }\n  }\n`\n\nconst InerItem = styled.div`\n  width: 100%;\n  position: relative;\n  z-index: 99;\n  padding: 30px 22px;\n  transition: 0.3s ease-in;\n`\n\nconst Title = styled.h3`\n  color: #1a1a1a;\n  font-size: 24px;\n  font-weight: 600;\n  margin-bottom: 15px;\n`\n\nconst Desc = styled.p`\n  font-size: 16px;\n  color: #464646;\n`\n\nconst Step = styled.span`\n\tdisplay: flex;\n  justify-content: center;\n  margin-left: auto;\n  width: 80px;\n\tpadding: 10px 0;\n\tborder-radius: 10rem;\n\tcolor: #fff;\n\ttext-transform: uppercase;\n\tfont-size: 1rem;\n\ttransition: all .3s;\n\tposition: relative;\n\toverflow: hidden;\n\tz-index: 1;\n\n\t&:after {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tbackground-color: #c5892e;\n\t\tborder-radius: 10rem;\n\t\tz-index: -2;\n\t}\n\n\t&:before {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\ttransition: all .3s;\n\t\tborder-radius: 10rem;\n\t\tz-index: -1;\n\t}\n`\n\nconst HowItWorks = () => {\n  // const TranslateString = useI18n()\n\n  return (\n    <LayoutWrapper>\n      <SectionTitle>\n        <TitleMain>How to Play</TitleMain>\n        <SubTitle>If the digits on your tickets match the winning numbers in the correct order, you win a portion of the prize pool Simple!</SubTitle>\n      </SectionTitle>\n\n      <BoxItem>\n        <Item>\n          <InerItem>\n            <Step className=\"btn-step\">  \n              STEP 1\n            </Step>\n\n            <Title>Buy tickets</Title>\n\n            <Desc>\n              Prices are set when the round starts, equal to 1 LUCKY per ticket.\n            </Desc>\n          </InerItem>\n        </Item>\n\n        <Item>\n          <InerItem>\n            <Step className=\"btn-step\">  \n              STEP 2\n            </Step>\n\n            <Title>Wait for the Draw</Title>\n\n            <Desc>\n              There are two draws every day: once every 24h.\n            </Desc>\n          </InerItem>\n        </Item>\n\n        <Item>\n          <InerItem>\n            <Step className=\"btn-step\">  \n              step 3\n            </Step>\n\n            <Title>Check for Prizes</Title>\n\n            <Desc>\n              Once the round&apos;s over, come back to the page and check to see if you&apos;ve won!\n            </Desc>\n          </InerItem>\n        </Item>\n      </BoxItem>\n    </LayoutWrapper>\n  )\n}\nexport default HowItWorks\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Text, Input, Button } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface PastLotterySearcherProps {\n  initialLotteryNumber: number\n  onSubmit: (num: number) => void\n}\n\nconst Wrapper = styled.div`\n  margin-bottom: 24px;\n`\n\nconst SearchWrapper = styled.div`\n  position: relative;\n`\nconst InputWrapper = styled.div`\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  /* Firefox */\n  input[type='number'] {\n    -moz-appearance: textfield;\n  }\n`\n\nconst ButtonWrapper = styled.div`\n  position: absolute;\n  right: 8px;\n  top: 50%;\n  transform: translate(0%, -50%);\n  width: auto;\n`\n\nconst PastLotterySearcher: React.FC<PastLotterySearcherProps> = ({ initialLotteryNumber, onSubmit }) => {\n  const [lotteryNumber, setLotteryNumber] = useState(initialLotteryNumber)\n  const [isError, setIsError] = useState(false)\n  const TranslateString = useI18n()\n\n  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault()\n    onSubmit(lotteryNumber)\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseInt(evt.currentTarget.value, 10)\n\n    // The max value will always be the initialLotteryNumber which equals\n    // the latest lottery round\n    setIsError(value > initialLotteryNumber)\n    setLotteryNumber(value)\n  }\n\n  return (\n    <Wrapper>\n      <Text>{TranslateString(742, 'Select lottery number:')}</Text>\n      <form onSubmit={handleSubmit}>\n        <SearchWrapper>\n          <InputWrapper>\n            <Input\n              value={lotteryNumber}\n              type=\"number\"\n              isWarning={isError}\n              max={initialLotteryNumber}\n              onChange={handleChange}\n            />\n          </InputWrapper>\n          <ButtonWrapper>\n            <Button variant=\"secondary\" type=\"submit\" scale=\"sm\" disabled={isError}>\n              {TranslateString(744, 'Search')}\n            </Button>\n          </ButtonWrapper>\n        </SearchWrapper>\n      </form>\n    </Wrapper>\n  )\n}\n\nexport default PastLotterySearcher\n","import React from 'react'\nimport { Text } from '@luckyswap/uikit'\n\ninterface PastRoundCardErrorProps {\n  error: {\n    message: string\n  }\n}\n\nconst PastRoundCardError: React.FC<PastRoundCardErrorProps> = ({ error }) => {\n  return <Text p=\"24px\">{error.message}</Text>\n}\n\nexport default PastRoundCardError\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading, Text } from '@luckyswap/uikit'\n\ninterface HeadingProps {\n  valueToDisplay?: string\n  children?: string\n  Icon?: React.ComponentType\n}\n\nconst IconWrapper = styled.div`\n  margin-right: 16px;\n\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\n\nconst LotteryCardHeading: React.FC<HeadingProps> = ({ valueToDisplay, children, Icon, ...props }) => {\n  return (\n    <Flex {...props}>\n      {Icon && (\n        <IconWrapper>\n          <Icon />\n        </IconWrapper>\n      )}\n      <Flex className=\"box-lucky\" flexDirection=\"column\">\n        <Text fontSize=\"16px\" color=\"textSubtle\">\n          {children}\n        </Text>\n        <Heading size=\"lg\">{valueToDisplay}</Heading>\n      </Flex>\n    </Flex>\n  )\n}\n\nLotteryCardHeading.defaultProps = {\n  valueToDisplay: '',\n  Icon: () => <div />,\n  children: '',\n}\n\nexport default LotteryCardHeading\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, LinkExternal, useModal } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useWeb3React } from '@web3-react/core'\nimport useTickets from 'hooks/useTickets'\nimport UnlockButton from 'components/UnlockButton'\nimport { SCAN_SITES } from '../../../../constants'\nimport MyTicketsModal from '../TicketCard/UserTicketsModal'\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding-top: 24px;\n\n  & > div {\n    flex: 1;\n    width: 100%;\n  }\n`\n\nconst ExternalLinkWrap = styled(LinkExternal)`\n  align-items: center;\n  display: flex;\n  height: 48px;\n  justify-content: center;\n  text-decoration: none;\n  width: 100%;\n`\n\nconst TicketCard: React.FC<{ contractLink?: string; lotteryNumber?: number }> = ({ contractLink, lotteryNumber }) => {\n  const TranslateString = useI18n()\n  const tickets = useTickets(lotteryNumber)\n  const ticketsLength = tickets.length\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n  const { account, chainId } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Wrapper>\n        <UnlockButton />\n      </Wrapper>\n    )\n  }\n\n  return (\n    <Wrapper>\n      <div>\n        <Button\n          style={{ marginRight: '8px' }}\n          width=\"100%\"\n          variant=\"secondary\"\n          disabled={ticketsLength === 0}\n          onClick={onPresentMyTickets}\n        >\n          {TranslateString(432, 'View your tickets')}\n        </Button>\n      </div>\n      <div>\n        <ExternalLinkWrap href={contractLink}>\n          {TranslateString(356, `View on ${SCAN_SITES[chainId]}`)}\n        </ExternalLinkWrap>\n      </div>\n    </Wrapper>\n  )\n}\n\nexport default TicketCard\n","const formatLotteryDate = (lotteryDate: string) => {\n  if (!lotteryDate) {\n    return {}\n  }\n\n  const date = new Date(lotteryDate)\n\n  const dateString = date.toDateString()\n  const hours = date.getUTCHours()\n  const monthAndDay = dateString.split(' ').splice(1, 2).join(' ')\n\n  return { hours, monthAndDay }\n}\n\nexport default formatLotteryDate\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@luckyswap/uikit'\nimport formatLotteryDate from '../helpers/formatLotteryDate'\n\nconst Wrapper = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n`\n\nconst Timestamp = ({ timeValue }) => {\n  const { monthAndDay, hours } = formatLotteryDate(timeValue)\n\n  return (\n    <Wrapper>\n      <Text fontSize=\"14px\">\n        {monthAndDay}, {hours}:00 UTC\n      </Text>\n    </Wrapper>\n  )\n}\n\nexport default Timestamp\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, CardBody, CardFooter, PancakeRoundIcon, TicketRound } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { DataResponse } from 'utils/getLotteryRoundData'\nimport LotteryCardHeading from '../LotteryCardHeading'\nimport PastLotteryActions from './PastLotteryActions'\nimport PrizeGrid from '../PrizeGrid'\nimport Timestamp from '../Timestamp'\n\ninterface PastRoundCardDetailsProps {\n  data: DataResponse\n}\n\nconst CardHeading = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`\n\nconst TopLotteryCardHeading = styled(LotteryCardHeading)`\n  margin-bottom: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst BoxCard = styled.div`\n  padding: 10px;\n`\n\nconst Dflex = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n`\n\nconst PastRoundCardDetails: React.FC<PastRoundCardDetailsProps> = ({ data }) => {\n  const TranslateString = useI18n()\n\n  const {\n    contractLink,\n    jackpotTicket,\n    lotteryDate,\n    lotteryNumber,\n    lotteryNumbers,\n    match1Ticket,\n    match2Ticket,\n    match3Ticket,\n    poolSize,\n  } = data\n\n  return (\n    !data.error &&\n    data && (\n      <>\n        <CardBody>\n          <CardHeading>\n            <Timestamp timeValue={lotteryDate} />\n            <Heading size=\"md\" mb=\"24px\">\n              Round #{lotteryNumber}\n            </Heading>\n            <TopLotteryCardHeading\n              valueToDisplay={`${lotteryNumbers[0]}, ${lotteryNumbers[1]}, ${lotteryNumbers[2]}, ${lotteryNumbers[3]}`}\n              // Icon={TicketRound}\n            >\n              {TranslateString(999, 'Winning numbers')}\n            </TopLotteryCardHeading>\n            <Dflex>\n              <img src=\"../images/icon-logo-y.png\" alt=\"\" />\n              <LotteryCardHeading valueToDisplay={TranslateString(999, `${poolSize.toLocaleString()}`)}>\n                {TranslateString(999, 'Total prizes')}\n              </LotteryCardHeading>\n            </Dflex>\n          </CardHeading>\n        </CardBody>\n        <BoxCard>\n          <CardFooter className=\"no-border\">\n            <PrizeGrid\n              lotteryPrizeAmount={poolSize}\n              jackpotMatches={jackpotTicket}\n              oneTicketMatches={match1Ticket}\n              twoTicketMatches={match2Ticket}\n              threeTicketMatches={match3Ticket}\n              pastDraw\n            />\n            <PastLotteryActions contractLink={contractLink} lotteryNumber={lotteryNumber} />\n          </CardFooter>\n        </BoxCard>\n      </>\n    )\n  )\n}\n\nexport default PastRoundCardDetails\n","import React from 'react'\nimport styled from 'styled-components'\n// import { Card } from '@luckyswap/uikit'\nimport { DataResponse } from 'utils/getLotteryRoundData'\nimport PastRoundCardError from './PastRoundCardError'\nimport PastRoundCardDetails from './PastRoundCardDetails'\n\ninterface PastRoundCardProps {\n  error: {\n    message: string\n  }\n  data: DataResponse\n}\n\nconst PastRoundCard: React.FC<PastRoundCardProps> = ({ error, data }) => {\n  return (\n    <FullWidth>{error.message ? <PastRoundCardError error={error} /> : <PastRoundCardDetails data={data} />}</FullWidth>\n  )\n}\n\nconst FullWidth = styled.div`\n  width: 100%;\n  background: linear-gradient(45deg, rgb(35 35 35) 30%, rgb(45 45 45) 100%);\n  box-shadow: none;\n  display: grid;\n  grid-template-columns: 1fr;\n  margin-bottom: 20px;\n  border-radius: 14px;\n\n  @media (min-width: 991px) {\n    grid-template-columns: 1fr 1fr;\n    margin-bottom: 30px;\n  }\n`\n\nexport default PastRoundCard\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody } from '@luckyswap/uikit'\nimport getLotteryRoundData from 'utils/getLotteryRoundData'\nimport useI18n from 'hooks/useI18n'\nimport useGetRecentLotteryRoundData from 'hooks/useGetRecentLotteryRoundData'\nimport PastLotterySearcher from './PastLotterySearcher'\nimport PastRoundCard from './PastRoundCard'\nimport Loading from '../Loading'\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledCardBody = styled(CardBody)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 552px; // height of final card\n`\n\nconst PastLotteryRoundViewer = () => {\n  const [state, setState] = useState({\n    roundData: null,\n    error: { message: null, type: null },\n    isInitialized: false,\n    isLoading: true,\n  })\n  const { data: initialLotteryData, mostRecentLotteryNumber } = useGetRecentLotteryRoundData()\n  const TranslateString = useI18n()\n  const { roundData, error, isInitialized, isLoading } = state\n\n  useEffect(() => {\n    if (initialLotteryData) {\n      setState((prevState) => ({ ...prevState, isLoading: false, isInitialized: true, roundData: initialLotteryData }))\n    }\n  }, [initialLotteryData, setState])\n\n  const handleSubmit = async (lotteryNumber: number) => {\n    setState((prevState) => ({\n      ...prevState,\n      isLoading: true,\n    }))\n\n    getLotteryRoundData(lotteryNumber)\n      .then((data) => {\n        if (data.error) {\n          setState((prevState) => ({\n            ...prevState,\n            error: {\n              message: TranslateString(1076, 'The lottery number you provided does not exist'),\n              type: 'out of range',\n            },\n            isLoading: false,\n            isInitialized: true,\n          }))\n        } else {\n          setState((prevState) => ({\n            ...prevState,\n            error: { message: null, type: null },\n            roundData: data,\n            isLoading: false,\n            isInitialized: true,\n          }))\n        }\n      })\n      .catch(() => {\n        setState((prevState) => ({\n          ...prevState,\n          error: { message: TranslateString(1078, 'Error fetching data'), type: 'api' },\n          isLoading: false,\n          isInitialized: true,\n        }))\n      })\n  }\n\n  return (\n    <Wrapper>\n      <PastLotterySearcher initialLotteryNumber={mostRecentLotteryNumber} onSubmit={handleSubmit} />\n      {!isInitialized || isLoading ? (\n        <Card>\n          <StyledCardBody>\n            <Loading />\n          </StyledCardBody>\n        </Card>\n      ) : (\n        <PastRoundCard error={error} data={roundData} />\n      )}\n    </Wrapper>\n  )\n}\n\nexport default PastLotteryRoundViewer\n","import React, { lazy, Suspense, useContext } from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@luckyswap/uikit'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport Loading from '../Loading'\n\nconst Line = lazy(() => import('./LineChartWrapper'))\n\nconst InnerWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst HistoryChart: React.FC = () => {\n  const { historyData, historyError } = useContext(PastLotteryDataContext)\n  const getDataArray = (kind) => {\n    return historyData\n      .map((dataPoint) => {\n        return dataPoint[kind]\n      })\n      .reverse()\n  }\n\n  const lineStyles = ({ color }) => {\n    return {\n      borderColor: color,\n      fill: false,\n      borderWidth: 2,\n      pointRadius: 0,\n      pointHitRadius: 10,\n    }\n  }\n\n  const chartData = {\n    labels: getDataArray('lotteryNumber'),\n    datasets: [\n      {\n        label: 'Pool Size',\n        data: getDataArray('poolSize'),\n        yAxisID: 'y-axis-pool',\n        ...lineStyles({ color: '#f89a0e' }),\n      },\n      {\n        label: 'Burned',\n        data: getDataArray('burned'),\n        yAxisID: 'y-axis-burned',\n        ...lineStyles({ color: '#fadc56b2' }),\n      },\n    ],\n  }\n\n  const axesStyles = ({ color, lineHeight }) => {\n    return {\n      borderCapStyle: 'round',\n      gridLines: { display: false },\n      ticks: {\n        fontFamily: 'Kanit, sans-serif',\n        fontColor: color,\n        fontSize: 14,\n        lineHeight,\n        maxRotation: 0,\n        beginAtZero: true,\n        autoSkipPadding: 15,\n        userCallback: (value) => {\n          return value.toLocaleString()\n        },\n      },\n    }\n  }\n\n  const options = {\n    legend: { display: false },\n    scales: {\n      yAxes: [\n        {\n          type: 'linear',\n          display: true,\n          position: 'left',\n          id: 'y-axis-pool',\n          ...axesStyles({ color: '#f3c111', lineHeight: 1.6 }),\n        },\n        {\n          type: 'linear',\n          display: true,\n          position: 'right',\n          id: 'y-axis-burned',\n          ...axesStyles({ color: '#f3c111', lineHeight: 1.5 }),\n        },\n      ],\n      xAxes: [\n        {\n          ...axesStyles({ color: '#f3c111', lineHeight: 1 }),\n        },\n      ],\n    },\n  }\n\n  return (\n    <>\n      {historyError && (\n        <InnerWrapper>\n          <Text>Error fetching data</Text>\n        </InnerWrapper>\n      )}\n      {!historyError && historyData.length > 0 ? (\n        <Suspense fallback={<div>Loading...</div>}>\n          <Line data={chartData} options={options} type=\"line\" />\n        </Suspense>\n      ) : (\n        <InnerWrapper>\n          <Loading />\n        </InnerWrapper>\n      )}\n    </>\n  )\n}\n\nexport default HistoryChart\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst Wrapper = styled.div`\n  display: flex;\n  margin: 36px 0 28px;\n`\n\nconst LegendItem = styled.div`\n  display: flex;\n  margin-right: 18px;\n  align-items: center;\n`\n\nconst Circle = styled.div<{ isPoolSize?: boolean }>`\n  width: 20px;\n  height: 20px;\n  border-radius: 10px;\n  background-color: ${({ isPoolSize, theme }) => theme.colors[isPoolSize ? 'textSubtle' : 'primary']};\n  margin-right: 6px;\n`\n\nconst Legend = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <LegendItem>\n        <Circle isPoolSize />\n        <Text>{TranslateString(748, 'Pool Size')}</Text>\n      </LegendItem>\n      <LegendItem>\n        <Circle />\n        <Text>{TranslateString(750, 'Burned')}</Text>\n      </LegendItem>\n    </Wrapper>\n  )\n}\n\nexport default Legend\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport HistoryChart from './HistoryChart'\nimport Legend from './Legend'\n\nconst PastDrawsHistoryCard: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <FullWidth>\n      <CardBody>\n        <Heading size=\"md\">{TranslateString(746, 'History')}</Heading>\n        <Legend />\n        <HistoryChart />\n      </CardBody>\n    </FullWidth>\n  )\n}\n\nconst FullWidth = styled(Card)`\n  max-width: 100%;\n  background: linear-gradient(45deg, rgb(35 35 35) 30%, rgb(45 45 45) 100%);\n  box-shadow: none;\n  display: grid;\n  grid-template-columns: 1fr;\n  margin-bottom: 60px;\n  border-radius: 14px;\n`\n\nexport default PastDrawsHistoryCard\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { ButtonMenu, ButtonMenuItem } from '@luckyswap/uikit'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport { getLotteryIssueIndex } from 'utils/lotteryUtils'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { useLottery, useContract } from 'hooks/useContract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport lotteryAbi from 'config/abi/lottery.json'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { BASE_API_ADMIN } from 'config'\nimport Hero from './components/Hero'\nimport WinningNumbers from './components/WinningNumbers'\nimport TotalPrizesCard from './components/TotalPrizesCard'\nimport YourPrizesCard from './components/YourPrizesCard'\nimport UnlockWalletCard from './components/UnlockWalletCard'\nimport TicketCard from './components/TicketCard'\nimport HowItWorks from './components/HowItWorks'\nimport PastLotteryRoundViewer from './components/PastLotteryRoundViewer'\n// import { BaseLayout } from '@luckyswap/uikit'\nimport PastDrawsHistoryCard from './components/PastDrawsHistory/PastDrawsHistoryCard'\nimport Divider from './components/Divider'\nimport NextDrawPage from './NextDrawPage'\nimport PastDrawsPage from './PastDrawsPage'\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 32px;\n`\n\nconst SecondCardColumnWrapper = styled.div<{ isAWin?: boolean }>`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 40px;\n  margin-bottom: 30px;\n\n  @media (min-width: 991px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`\n\nconst Dflex = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 40px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n  margin-bottom: 30px;\n`\n\nconst BoxImg = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    width: 100%;\n    max-width: 750px;\n  }\n`\n\n\nconst Lottery: React.FC = () => {\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n\n  const TranslateString = useI18n()\n  const [activeIndex, setActiveIndex] = useState(0)\n  const [historyData, setHistoryData] = useState([])\n  const [historyError, setHistoryError] = useState(false)\n  const [currentLotteryNumber, setCurrentLotteryNumber] = useState(0)\n  const [mostRecentLotteryNumber, setMostRecentLotteryNumber] = useState(1)\n\n  const { account } = useWeb3React()\n  const { claimAmount } = useTotalClaim()\n  const winnings = getBalanceNumber(claimAmount)\n  const isAWin = winnings > 0\n\n  useEffect(() => {\n    fetch(`${BASE_API_ADMIN}/lotteries/history`)\n      .then((response) => response.json())\n      .then((data) => {\n        data.sort((a, b) => a.lotteryNumber > b.lotteryNumber ? -1 : 1)\n        setHistoryData(data)}\n        )\n      \n      .catch(() => {\n        setHistoryError(true)\n      })\n  }, [])\n\n  useEffect(() => {\n    const getInitialLotteryIndex = async () => {\n      const index = await getLotteryIssueIndex(lotteryContract)\n      const previousLotteryNumber = index - 1\n\n      setCurrentLotteryNumber(index)\n      setMostRecentLotteryNumber(previousLotteryNumber)\n    }\n\n    if (lotteryContract) {\n      getInitialLotteryIndex()\n    }\n  }, [lotteryContract])\n\n  const handleClick = (index) => {\n    setActiveIndex(index)\n  }\n\n  return (\n    <>\n      <Page>\n        {/* <BoxImg>\n          <img src=\"../images/coming-soon-lot.png\" alt=\"\"/>\n        </BoxImg> */}\n        <Hero />\n        <TotalPrizesCard />\n        <SecondCardColumnWrapper isAWin={isAWin}>\n          {!account ? (\n            <UnlockWalletCard />\n          ) : (\n            <>\n              <TicketCard isSecondCard={isAWin} />\n              <YourPrizesCard />\n            </>\n          )}\n        </SecondCardColumnWrapper>\n        <WinningNumbers />\n        <HowItWorks />\n        <PastLotteryDataContext.Provider\n          value={{ historyError, historyData, mostRecentLotteryNumber, currentLotteryNumber }}\n        >\n          <PastLotteryRoundViewer />\n          <PastDrawsHistoryCard />\n        </PastLotteryDataContext.Provider>\n\n        {/* <Wrapper>\n          <ButtonMenu activeIndex={activeIndex} onItemClick={handleClick} scale=\"sm\" variant=\"subtle\">\n            <ButtonMenuItem>{TranslateString(716, 'Next draw')}</ButtonMenuItem>\n            <ButtonMenuItem>{TranslateString(718, 'Past draws')}</ButtonMenuItem>\n          </ButtonMenu>\n        </Wrapper>\n        <Divider />\n        <PastLotteryDataContext.Provider\n          value={{ historyError, historyData, mostRecentLotteryNumber, currentLotteryNumber }}\n        >\n          {activeIndex === 0 ? <NextDrawPage /> : <PastDrawsPage />}\n        </PastLotteryDataContext.Provider> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Lottery\n"],"sourceRoot":""}