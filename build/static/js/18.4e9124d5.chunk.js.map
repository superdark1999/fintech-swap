{"version":3,"sources":["views/Lottery-v2/helpers/CountdownHelpers.ts","views/Lottery-v2/hooks/useGetUnclaimedRewards.ts","views/Lottery-v2/components/LotteryProgress.tsx","views/Lottery-v2/components/Hero.tsx","views/Lottery-v2/helpers.tsx","views/Lottery-v2/components/WinningNumbers.tsx","views/Lottery-v2/components/PrizeGrid.tsx","views/Lottery-v2/components/TotalPrizesCard/index.tsx","state/lottery2/fetchUnclaimedUserRewards.ts","utils/calls/estimateGas.ts","components/Balance.tsx","views/Lottery-v2/components/ClaimPrizesModal/ClaimPrizesInner.tsx","views/Lottery-v2/components/ClaimPrizesModal/index.tsx","views/Lottery-v2/components/YourPrizesCard/index.tsx","views/Lottery-v2/components/UnlockWalletCard.tsx","hooks/useTicketLotteryV2.ts","views/Lottery-v2/components/TicketCard/generateTicketNumbers.tsx","views/Lottery-v2/components/TicketCard/useTicketsReducer.tsx","views/Lottery-v2/components/TicketCard/BuyTicketModal.tsx","hooks/useLotteryV2.ts","views/Lottery-v2/components/TicketCard/TicketNumber.tsx","views/Lottery-v2/components/TicketCard/UserTicketsModal.tsx","views/Lottery-v2/components/TicketCard/PurchaseWarningModal.tsx","views/Lottery-v2/components/TicketCard/TicketActions.tsx","views/Lottery-v2/components/TicketCard/index.tsx","views/Lottery-v2/components/HowItWorks.tsx","views/Lottery-v2/components/PastLotteryRoundViewer/PastRoundCardError.tsx","views/Lottery-v2/components/LotteryCardHeading.tsx","views/Lottery-v2/components/PastLotteryRoundViewer/PastLotteryActions.tsx","views/Lottery-v2/helpers/formatLotteryDate.ts","views/Lottery-v2/components/Timestamp.tsx","views/Lottery-v2/components/PastLotteryRoundViewer/PastLotterySearcher.tsx","views/Lottery-v2/components/PastLotteryRoundViewer/PastRoundCardDetails.tsx","views/Lottery-v2/components/PastLotteryRoundViewer/PastRoundCard.tsx","views/Lottery-v2/components/Loading.tsx","views/Lottery-v2/components/PastLotteryRoundViewer/index.tsx","views/Lottery-v2/Lottery.tsx"],"names":["hoursAndMinutesString","hours","minutes","parseInt","getTicketSaleTime","currentMillis","msUntilNextTicketSale","getNextTicketSaleTime","getTimePeriods","getTimeRemainDraw","endTime","now","Date","getTime","setDate","getDate","remain","hh","pad","Math","floor","mm","num","concat","toString","substr","FetchStatus","ProgressWrapper","styled","div","TopTextWrapper","BottomTextWrapper","StyledPrimaryText","Text","LotteryProgress","chainId","useActiveWeb3React","fastRefresh","useRefresh","useState","timeRemainDraw","setTimeRemainDraw","timeRemainSale","setTimeRemainSale","percentRemain","setPercentRemain","TranslateString","useI18n","lotteryHasDrawn","useGetLotteryHasDrawn","URL","useCurrentTime","BASE_API_ADMIN_PRO","BASE_API_ADMIN","useEffect","a","timeEndLottery","timeStartLottery","axios","get","data","setHours","timeDrawLottery","timeStartNewPhase","fetchTimeLottery","primaryStep","secondaryStep","fontSize","bold","color","Title","Heading","attrs","as","size","Blurb","StyledHero","StyledContainer","Container","theme","mediaQueries","sm","LeftWrapper","lg","RightWrapper","ContentDes","Hero","src","alt","parseRetreivedNumber","number","numberAsArray","split","splice","reverse","join","processLotteryResponse","lotteryData","priceTicketInCakeAsString","priceTicketInCake","discountDivisorAsString","discountDivisor","amountCollectedInCakeAsString","amountCollectedInCake","BigNumber","isLoading","userTickets","status","startTime","treasuryFee","firstTicketId","lastTicketId","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown","CardBodyNew","Row","RowNoPadding","Column","CenteredText","CenteredTextWithPadding","TicketNumberBox","StyledCardHeader","CardWrapper","props","colors","secondary","StyledCardContentInner","WinningNumbers","account","useWeb3React","currentLotteryId","useGetCurrentLotteryId","lotteryInfo","setLotteryInfo","fetchLottery","processedLotteryData","fetchData","reversedNumber","numAsArray","style","map","index","CardValue","value","decimals","fontWeight","Grid","pastDraw","RightAlignedText","RightAlignedHeading","GridItem","marginBottom","PastDrawGridItem","GridPrize","CardBusd","span","PrizeGrid","jackpotMatches","twoTicketMatches","threeTicketMatches","cakeBusdPrice","usePriceLuckyBusd","cakeToBurn","times","amountLessTreasuryFee","minus","getCakeRewards","bracket","shareAsPercentage","getCakeBusdValue","amount","padding","className","textShadow","eq","CardBusdValue","getBalanceNumber","BoxTotal","CardHeading","Right","Left","IconWrapper","PrizeCountWrapper","ExpandingWrapper","showFooter","BoxLucky","Dollar","RoundPrize","TotalPrizesCard","setIndexRoute","useLottery","currentRound","isTransitioning","setShowFooter","lotteryPrizeAmount","useTotalRewards","toFixed","currentLotteryNumber","useContext","PastLotteryDataContext","lotteryContract","useContract","getLotteryAddress","lotteryAbi","cakePriceBusd","prizeInBusd","getLotteryIssueIndex","fetchLotteryIndex","mb","alignItems","justifyContent","height","width","s","ExpandableSectionButton","onClick","expanded","lotteryAddress","getLotteryV2Address","fetchCakeRewardsForTickets","winningTickets","calls","winningTicket","roundId","id","rewardBracket","name","address","params","multicallv2","lotteryV2Abi","cakeRewards","cakeTotal","reduce","accum","cakeReward","plus","BIG_ZERO","ticketsWithUnclaimedRewards","getRewardBracketByNumber","ticketNumber","ticketNumAsArray","winningNumsAsArray","matchingNumbers","length","push","getWinningTickets","roundDataAndUserTickets","ticketsWithRewardBrackets","ticket","allWinningTickets","filter","unclaimedWinningTickets","getWinningNumbersForRound","targetRoundId","lotteriesData","targetRound","find","pastLottery","fetchUserTicketsForMultipleRounds","roundsToCheck","callsWithRoundData","round","totalTickets","getViewUserTicketInfoCalls","lotteryId","count","multicalls","callWithRoundData","requireSuccess","multicallRes","multicallResPerRound","resCount","i","callOptions","slice","mergedMulticallResponse","res","mergeViewUserTicketInfoMulticallResponse","console","error","fetchUnclaimedUserRewards","userLotteryData","rounds","toLowerCase","claimableRounds","LotteryStatus","CLAIMABLE","claimed","rawUserTicketData","roundIds","rawRoundTicketData","processRawTicketsResponse","Promise","all","roundData","winningTicketsForPastRounds","roundsWithWinningTickets","winningTicketData","roundsWithUnclaimedWinningTickets","useGetUnclaimedRewards","useGetUserLotteriesGraphData","useGetLotteriesGraphData","unclaimedRewards","setUnclaimedRewards","NOT_FETCHED","fetchStatus","setFetchStatus","fetchAllRewards","IN_PROGRESS","unclaimedRewardsResponse","SUCCESS","estimateGas","contract","methodName","methodArgs","gasMarginPer10000","Error","rawGasEstimation","gasEstimation","mul","ethers","from","add","callWithEstimateGas","gasLimit","tx","Balance","isDisabled","unit","previousValue","useRef","current","start","end","duration","separator","defaultProps","Balance2","prefix","ClaimInnerContainer","onSuccess","roundsToClaim","dispatch","useAppDispatch","maxNumberTicketsPerBuyOrClaim","activeClaimIndex","setActiveClaimIndex","pendingTx","setPendingTx","useEtherLotteryV2Contract","activeClaimData","dollarReward","rewardAsBalance","getBalanceAmount","toNumber","dollarRewardAsBalance","claimTicketsCallData","ticketIds","brackets","shouldBatchRequest","lt","totalNumClaimsForRound","ceil","handleProgressToNextClaim","fetchUserLotteries","getTicketBatches","requests","maxAsNumber","ticketIdsSlice","bracketsSlice","handleClaim","log","wait","handleBatchClaim","ticketBatches","transactionsToFire","receipts","ticketBatch","receipt","flexDirection","textAlign","mt","endIcon","spin","StyledModal","ModalContainer","StyledModalHeader","ModalHeader","gradients","cardHeader","BunnyDecoration","showConfetti","confetti","resize","particleCount","startVelocity","gravity","spread","origin","x","y","ClaimPrizesModal","onDismiss","delay","minWidth","p","ClaimPrizesInner","TicketImage","img","TornTicketImage","StyledCard","Card","textDisabled","YourPrizesCard","hasCheckedForRewards","setHasCheckedForRewards","hasRewardsToClaim","setHasRewardsToClaim","isFetchingRewards","isCheckNowDisabled","useModal","onPresentClaimModal","mx","backgroundColor","disabled","getBody","StyledCardBody","CardBody","StyledHeading","UnlockWalletCard","isActive","UnlockButton","useTicketLotteryV2","tickets","setTickets","lotteryV2Contract","useLotteryV2contract","fetchTickets","viewUserInfoForLotteryId","userInfoForLottery","tempTickets","ticketId","generateTicketNumbers","numberOfTickets","userCurrentTickets","minNumber","maxNumber","existingTicketNumbers","generatedTicketNumbers","randomNumber","random","includes","ticketsToBuy","getInitialState","randomTicketsAsStringArray","Array","_","numbers","duplicateWith","isComplete","allComplete","reducer","state","action","type","payload","newNumbers","newDuplicates","forEach","prevTicketId","dupsToUpdate","indexToRemvoe","findIndex","duplicate","updatedTicket","every","BuyTicketModal","max","val","setVal","discountValue","setDiscountValue","ticketCostBeforeDiscount","setTicketCostBeforeDiscount","totalCost","setTotalCost","setRequestedBuy","fullBalance","useMemo","getFullDisplayBalance","maxTickets","LOTTERY_TICKET_PRICE","ticketsLength","useTransactionAdder","setState","viewLottery","ethersToSerializedBigNumber","fetchLotteryV2Data","useLotteryV2","useReducer","reversedTicket","unshift","useTicketsReducer","getTicketsForPurchase","getTicketCostAfterDiscount","useCallback","numberTickets","numberOfTicketsToBuy","costAfterDiscount","costBeforeDiscount","discountBeingApplied","gt","handleBuy","ticketsForPurchase","buyTickets","handleSelectMax","Number","LOTTERY2_MAX_TICKET_IN_ROUND","LOTTERY_MAX_NUMBER_OF_TICKETS","title","TicketInput","onSelectMax","onChange","e","currentTarget","symbol","availableSymbol","Tips","percentageAsBn","isNaN","percentageDiscount","Announce","Final","ModalActions","variant","primary","StyledNumberWrapper","Flex","radii","default","RewardHighlighter","numberMatches","TicketNumber","localId","digit","TicketsList","StyledButton","Button","spacing","UserTicketsModal","myTicketNumbers","listItems","TICKETS","WarningModal","newTransactionsFirst","b","addedTime","spinnerIcon","CardActions","Dflex","TicketCard","balanceToken","setBalanceToken","allowance","setAllowance","ticketBuyIsDisabled","OPEN","isBuyTicketTime","contractBEP20","XLUCKY_TESTNET_ADDRESSES","bep20Abi","useContractTemp","getLotteryTicketAddress","lotteryTicketAbi","onPresentMyTickets","PurchaseWarningModal","tokenName","onPresentBuy","listenApproveEvent","useUtilityToken","fetchApprovalData","balanceOf","then","catch","response","requestedApproval","setRequestedApproval","useApproveCallbackCustom","approval","onAttemptToApprove","handleApprove","allTransactions","useAllTransactions","sortedRecentTransactions","Object","values","isTransactionRecent","sort","getStatus","hash","marginRight","isSecondCard","CardHeader","TicketCountWrapper","TicketActions","LayoutWrapper","SectionTitle","TitleMain","h2","SubTitle","BoxItem","Item","InerItem","h3","Desc","Step","HowItWorks","PastRoundCardError","message","BoxContent","NumberValue","LotteryCardHeading","valueToDisplay","children","Icon","Ic","item","key","Wrapper","LinkExternal","contractLink","lotteryNumber","useTickets","formatLotteryDate","lotteryDate","date","dateString","toDateString","getUTCHours","monthAndDay","Timestamp","timeValue","SearchWrapper","InputWrapper","StyledInput","Input","ButtonWrapper","StyledBtn","PastLotterySearcher","initialLotteryNumber","onSubmit","setLotteryNumber","isError","setIsError","evt","preventDefault","scale","fill","isWarning","placeholder","paddingLeft","TopLotteryCardHeading","BoxCard","StyledBox","TopCard","PastRoundCardDetails","lotteryPrizeAmountBusd","multipliedBy","endDate","arrayFinalNumber","setLotteryData","processedCurrentRound","useProcessLotteryResponse","fetchLotteryInfo","PastLotteryActions","FullWidth","PastRoundCard","StyledLoading","Loading","PastLotteryRoundViewer","isInitialized","lotteries","prevState","handleSubmit","SecondCardColumnWrapper","Lottery","useFetchLottery","historyData","setHistoryData","historyError","setHistoryError","setCurrentLotteryNumber","mostRecentLotteryNumber","setMostRecentLotteryNumber","claimAmount","useTotalClaim","isAWin","url","fetch","json","previousLotteryNumber","getInitialLotteryIndex","Page","Provider"],"mappings":"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","file":"static/js/18.4e9124d5.chunk.js","sourcesContent":["import getTimePeriods from 'utils/getTimePeriods'\n\n// lottery draws UTC: 02:00 (10:00 SGT), 14:00 (22:00 SGT)\nconst lotteryDrawHoursUtc = [2, 14]\n\nconst getClosestLotteryHour = (currentHour) => {\n  switch (true) {\n    case currentHour < lotteryDrawHoursUtc[0] || currentHour >= lotteryDrawHoursUtc[1]:\n      return lotteryDrawHoursUtc[0]\n    case currentHour < lotteryDrawHoursUtc[1]:\n      return lotteryDrawHoursUtc[1]\n    default:\n      return 0\n  }\n}\n\nconst getNextLotteryDrawTime = (currentMillis) => {\n  const date = new Date(currentMillis)\n  const currentHour = date.getUTCHours()\n  const nextLotteryHour = getClosestLotteryHour(currentHour)\n  // next lottery is tomorrow if the next lottery is at 2am UTC...\n  // ...and current time is between 02:00am & 23:59pm UTC\n  const nextLotteryIsTomorrow = nextLotteryHour === 2 && currentHour >= 2 && currentHour <= 23\n  let millisTimeOfNextDraw\n\n  if (nextLotteryIsTomorrow) {\n    const tomorrow = new Date(currentMillis)\n    const nextDay = tomorrow.getUTCDate() + 1\n    tomorrow.setUTCDate(nextDay)\n    millisTimeOfNextDraw = tomorrow.setUTCHours(nextLotteryHour, 0, 0, 0)\n  } else {\n    millisTimeOfNextDraw = date.setUTCHours(nextLotteryHour, 0, 0, 0)\n  }\n\n  return millisTimeOfNextDraw\n}\n\n// @ts-ignore\nconst getNextTicketSaleTime = (currentMillis) => (parseInt(currentMillis / 3600000) + 1) * 3600000\nconst hoursAndMinutesString = (hours, minutes) => `${parseInt(hours)}h, ${parseInt(minutes)}m`\n\nexport const getTicketSaleTime = (currentMillis): string => {\n  const nextTicketSaleTime = getNextTicketSaleTime(currentMillis)\n  const msUntilNextTicketSale = nextTicketSaleTime - currentMillis\n  const { minutes } = getTimePeriods(msUntilNextTicketSale / 1000)\n  const { hours } = getTimePeriods(msUntilNextTicketSale / 1000)\n  return hoursAndMinutesString(hours, minutes)\n}\n\nexport const getLotteryDrawTime = (currentMillis): string => {\n  const nextLotteryDrawTime = getNextLotteryDrawTime(currentMillis)\n  const msUntilLotteryDraw = nextLotteryDrawTime - currentMillis\n  const { minutes } = getTimePeriods(msUntilLotteryDraw / 1000)\n  const { hours } = getTimePeriods(msUntilLotteryDraw / 1000)\n  return hoursAndMinutesString(hours, minutes)\n}\n\nexport const getTicketSaleStep = () => (1 / 12) * 100\n\nexport const getLotteryDrawStep = (currentMillis) => {\n  const msBetweenLotteries = 43200000 * 2\n  const endTime = getNextLotteryDrawTime(currentMillis)\n  const msUntilLotteryDraw = endTime - currentMillis\n  const percentageRemaining = (msUntilLotteryDraw / msBetweenLotteries) * 100\n  return 100 - percentageRemaining\n}\n\nexport const getTimeRemainDraw = (endTime: Date) => {\n  const now = new Date();\n  if (now.getTime() > endTime.getTime()){\n    endTime.setDate(endTime.getDate() + 1);\n  }\n  const remain = ((endTime.getTime() - now.getTime()) / 1000);\n  const hh = pad(Math.floor((remain / 60 / 60) % 60));\n  const mm = pad(Math.floor((remain / 60) % 60));\n\n  return `${hh}h: ${mm}m`;\n}\nfunction pad(num) {\n  return (\"0\".concat(num.toString())).substr(-2);\n}","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetLotteriesGraphData, useGetUserLotteriesGraphData } from 'state/hooks'\nimport fetchUnclaimedUserRewards from 'state/lottery2/fetchUnclaimedUserRewards'\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  IN_PROGRESS = 'in-progress',\n  SUCCESS = 'success',\n}\n\nconst useGetUnclaimedRewards = () => {\n  const { account } = useWeb3React()\n  // const { isTransitioning } = useLottery()\n  const userLotteryData = useGetUserLotteriesGraphData()\n  const lotteriesData = useGetLotteriesGraphData();\n  const [unclaimedRewards, setUnclaimedRewards] = useState([])\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED)\n\n  useEffect(() => {\n    // Reset on account change and round transition\n    setFetchStatus(FetchStatus.NOT_FETCHED)\n  }, [account])\n\n  const fetchAllRewards = async () => {\n    setFetchStatus(FetchStatus.IN_PROGRESS)\n    const unclaimedRewardsResponse = await fetchUnclaimedUserRewards(account, userLotteryData, lotteriesData)\n    setUnclaimedRewards(unclaimedRewardsResponse)\n    setFetchStatus(FetchStatus.SUCCESS)\n  }\n\n  return { fetchAllRewards, unclaimedRewards, fetchStatus }\n}\n\nexport default useGetUnclaimedRewards\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Text, Progress } from '@luckyswap/uikit'\nimport axios from 'axios'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport { useCurrentTime } from 'hooks/useTimer'\nimport { BASE_API_ADMIN, BASE_API_ADMIN_PRO } from 'config'\nimport useRefresh from 'hooks/useRefresh'\nimport { useActiveWeb3React } from 'hooks'\nimport {\n  getLotteryDrawTime,\n  getLotteryDrawStep,\n  getTicketSaleTime,\n  getTicketSaleStep,\n  getTimeRemainDraw,\n} from '../helpers/CountdownHelpers'\n\nconst ProgressWrapper = styled.div`\n  display: block;\n  width: 100%;\n`\n\nconst TopTextWrapper = styled.div`\n  margin-top: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`\n\nconst BottomTextWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`\n\nconst StyledPrimaryText = styled(Text)`\n  margin-right: 16px;\n`\n// const timeEndLottery = new Date;\n// timeEndLottery.setHours(23, 0, 0);\n\n// const timeStartLottery = new Date;\n// timeStartLottery.setHours(24, 0, 0);\n\n// const timeStartLottery = new Date(19, 0, 0);\n\nconst LotteryProgress = () => {\n  const { chainId } = useActiveWeb3React();\n  const { fastRefresh } = useRefresh()\n  const [timeRemainDraw, setTimeRemainDraw] = useState(\"\");\n  const [timeRemainSale, setTimeRemainSale] = useState(\"\");\n  const [percentRemain, setPercentRemain] = useState(0)\n  \n\n  const TranslateString = useI18n()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const currentMillis = useCurrentTime()  \n\n  const URL = chainId === 56 ? BASE_API_ADMIN_PRO : BASE_API_ADMIN;\n\n\n  useEffect(() => {\n    const fetchTimeLottery = async () => {\n      const timeEndLottery = new Date();\n      const timeStartLottery = new Date();\n      const {data} = await axios.get(`${URL}/lotteries`);\n      const now = new Date();\n\n      // set time remain to end lottery phase\n      timeEndLottery.setHours(data[0].timeDrawLottery.hh, data[0].timeDrawLottery.mm, 0);\n      setTimeRemainDraw(getTimeRemainDraw(timeEndLottery));\n\n      // set time remain to start new lottery phase\n      timeStartLottery.setHours(data[0].timeStartNewPhase.hh, data[0].timeStartNewPhase.mm, 0);\n      setTimeRemainSale(getTimeRemainDraw(timeStartLottery));\n\n      \n      if (lotteryHasDrawn){\n        setPercentRemain( 100 - ((timeStartLottery.getTime() - now.getTime()) * 100 / 86400000));\n      }\n      else \n        setPercentRemain( 100 - ((timeEndLottery.getTime() - now.getTime()) * 100 / 86400000));\n    }\n    fetchTimeLottery();\n  },[fastRefresh, lotteryHasDrawn, URL])\n\n  return (\n    <ProgressWrapper>\n      <Progress primaryStep={percentRemain} secondaryStep={ (1/24) / 100} />\n      <TopTextWrapper>\n        <StyledPrimaryText fontSize=\"20px\" bold color=\"yellow\">\n          {lotteryHasDrawn ? timeRemainSale : timeRemainDraw}\n        </StyledPrimaryText>\n        <Text fontSize=\"20px\" bold color=\"invertedContrast\">\n          {lotteryHasDrawn ? TranslateString(434, 'Until ticket sale') : TranslateString(492, 'Until lottery draw')}\n        </Text>\n      </TopTextWrapper>\n      {lotteryHasDrawn && (\n        <BottomTextWrapper>\n          <Text color=\"invertedContrast\">\n            {/* {timeUntilLotteryDraw} {TranslateString(492, 'Until lottery draw')} */}\n          </Text>\n        </BottomTextWrapper>\n      )}\n    </ProgressWrapper>\n  )\n}\n\nexport default LotteryProgress\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Container from 'components/layout/Container'\nimport LotteryProgress from './LotteryProgress'\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: rgb(243, 193, 17);\n  margin-bottom: 5px;\n`\n\nconst Blurb = styled(Text)`\n  color: #ffffff;\n  font-size: 20px;\n  font-weight: 600;\n`\n\nconst StyledHero = styled.div`\n  // background: url('../images/large-pc.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  padding-bottom: 60px;\n  padding-top: 60px;\n  background-color: #0000001a;\n`\n\nconst StyledContainer = styled(Container)`\n  display: grid;\n  grid-template-columns: 1fr;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: 1fr 400px;\n  }\n`\n\nconst LeftWrapper = styled.div`\n  flex: 1;\n  padding-right: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-right: 32px;\n  }\n`\n\nconst RightWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  flex: 1;\n  padding-left: 0;\n  margin-top: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0;\n    padding-left: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-left: 32px;\n  }\n`\n\nconst ContentDes = styled.div`\n  margin-bottom: 20px;\n`\n\nconst Hero = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledHero>\n      <StyledContainer>\n        <LeftWrapper>\n          <img src=\"images/banner-jackpot.png\" alt=\"\" />\n        </LeftWrapper>\n\n        <RightWrapper>\n          <ContentDes>\n            <Title>{TranslateString(708, 'The LUCKY Lottery')}</Title>\n            <Blurb>{TranslateString(710, 'Buy tickets with LUCKY for collect more NFTs')}</Blurb>\n            <Blurb>{TranslateString(712, 'Win if 2, 3, or 4 of your ticket numbers match!')}</Blurb>\n          </ContentDes>\n          <LotteryProgress />\n        </RightWrapper>\n      </StyledContainer>\n    </StyledHero>\n  )\n}\n\nexport default Hero\n","import BigNumber from 'bignumber.js'\nimport { LotteryResponse, LotteryRound, LotteryRoundUserTickets } from 'state/types'\n\n/**\n * Remove the '1' and reverse the digits in a lottery number retreived from the smart contract\n */\nexport const parseRetreivedNumber = (number: string): string => {\n  const numberAsArray = number.split('')\n  numberAsArray.splice(0, 1)\n  numberAsArray.reverse()\n  return numberAsArray.join('')\n}\n\n// export const dateOptions: Intl.DateTimeFormatOptions = {\n//   year: 'numeric',\n//   month: 'short',\n//   day: 'numeric',\n// }\n\n// export const timeOptions: Intl.DateTimeFormatOptions = {\n//   hour: 'numeric',\n//   minute: 'numeric',\n// }\n\n// export const dateTimeOptions: Intl.DateTimeFormatOptions = {\n//   ...dateOptions,\n//   ...timeOptions,\n// }\n\nexport const processLotteryResponse = (\n  lotteryData: LotteryResponse & { userTickets?: LotteryRoundUserTickets },\n): LotteryRound => {\n  const {\n    priceTicketInCake: priceTicketInCakeAsString,\n    discountDivisor: discountDivisorAsString,\n    amountCollectedInCake: amountCollectedInCakeAsString,\n  } = lotteryData\n\n  const discountDivisor = new BigNumber(discountDivisorAsString)\n  const priceTicketInCake = new BigNumber(priceTicketInCakeAsString)\n  const amountCollectedInCake = new BigNumber(amountCollectedInCakeAsString)\n\n  return {\n    isLoading: lotteryData.isLoading,\n    userTickets: lotteryData.userTickets,\n    status: lotteryData.status,\n    startTime: lotteryData.startTime,\n    endTime: lotteryData.endTime,\n    priceTicketInCake,\n    discountDivisor,\n    treasuryFee: lotteryData.treasuryFee,\n    firstTicketId: lotteryData.firstTicketId,\n    lastTicketId: lotteryData.lastTicketId,\n    amountCollectedInCake,\n    finalNumber: lotteryData.finalNumber,\n    cakePerBracket: lotteryData.cakePerBracket,\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\n    rewardsBreakdown: lotteryData.rewardsBreakdown,\n  }\n}\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Card, CardBody } from '@luckyswap/uikit'\nimport { useWinningNumbers, useMatchingRewardLength } from 'hooks/useTickets'\nimport useI18n from 'hooks/useI18n'\nimport { getWinningTickets } from 'state/lottery2/fetchUnclaimedUserRewards'\n\nimport { fetchLottery } from 'state/lottery2/helpers'\nimport { LotteryRound } from 'state/types'\nimport { useGetCurrentLotteryId } from 'state/hooks'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport CardValue from '../../Home/components/CardValue'\nimport {  processLotteryResponse, parseRetreivedNumber } from '../helpers'\n\n\n\nconst WinningNumbers: React.FC = () => {\n  const { account } = useWeb3React()\n  const currentLotteryId = useGetCurrentLotteryId()\n\n  const [lotteryInfo, setLotteryInfo] = useState<LotteryRound>(null)\n  useEffect(() => {\n\n    const fetchData = async () => {\n      const lotteryData = await fetchLottery(currentLotteryId)\n      // const lotteryData = await fetchLottery(currentLotteryId)\n      const processedLotteryData = processLotteryResponse(lotteryData)\n\n      setLotteryInfo(processedLotteryData)\n    }\n    if (currentLotteryId)\n      fetchData()\n  }, [currentLotteryId])\n\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const TranslateString = useI18n()\n\n  const reversedNumber = lotteryInfo && parseRetreivedNumber(lotteryInfo.finalNumber.toString())\n  const numAsArray =  reversedNumber ? reversedNumber?.split('') : [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]\n\n  \n  return (\n    <CardWrapper>\n      <CardBodyNew>\n        <StyledCardContentInner>\n          <StyledCardHeader>\n            <Title style={{ color: 'rgb(243, 193, 17)' }}>\n              {account && lotteryHasDrawn\n                ? `${TranslateString(570, 'Latest Winning Numbers')}`\n                : TranslateString(440, 'Latest Winning Numbers')}\n            </Title>\n          </StyledCardHeader>\n          <Row>\n            {/* <img\n              alt=\"\"\n              src=\"https://merlinlab.com/static/media/leftGoldenCoin.6aef3b76.svg\"\n              className=\"sc-iCfLBT sc-ezbkgU gvyEtt jElfkq\"\n            />\n            <img\n              alt=\"\"\n              src=\"https://merlinlab.com/static/media/rightGoldenCoin.e795d41c.svg\"\n              className=\"sc-iCfLBT sc-ezbkgU KkWOV jElfkq\"\n            /> */}\n            { numAsArray && numAsArray.map((number, index) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <TicketNumberBox key={index}>\n                <CenteredText>\n                  <CardValue\n                bold\n                color=\"\"\n                value={parseInt(number)}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n                  </CenteredText>\n              </TicketNumberBox>\n            ))}\n          </Row>\n          {lotteryInfo && (<Column>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {/* {TranslateString(442, 'Tickets matching 6 numbers:')} */}\n                Tickets matching<strong style={{fontWeight: 900}}> 6 </strong>numbers:\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111', fontWeight: 900 }}>{lotteryInfo.countWinnersPerBracket[5]}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {/* {TranslateString(442, 'Tickets matching 6 numbers:')} */}\n                Tickets matching<strong style={{fontWeight: 900}}> 5 </strong>numbers:\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111', fontWeight: 900 }}>{lotteryInfo.countWinnersPerBracket[4]}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {/* {TranslateString(442, 'Tickets matching 4 numbers:')} */}\n                Tickets matching<strong style={{fontWeight: 900}}> 4 </strong>numbers:\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111', fontWeight: 900 }}>{lotteryInfo.countWinnersPerBracket[3]}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {/* {TranslateString(442, 'Tickets matching 3 numbers:')} */}\n                Tickets matching<strong style={{fontWeight: 900}}> 3 </strong>numbers:\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111', fontWeight: 900 }}>{lotteryInfo.countWinnersPerBracket[2]}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {/* {TranslateString(444, 'Tickets matching 2 numbers:')} */}\n                Tickets matching<strong style={{fontWeight: 900}}> 2 </strong>numbers:\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111', fontWeight: 900 }}>{lotteryInfo.countWinnersPerBracket[1]}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n            <RowNoPadding>\n              <CenteredTextWithPadding style={{ color: '#fff' }}>\n                {/* {TranslateString(446, 'Tickets matching 1 numbers:')} */}\n                Tickets matching<strong style={{fontWeight: 900}}> 1 </strong>numbers:\n              </CenteredTextWithPadding>\n              <CenteredTextWithPadding>\n                <strong style={{ color: '#F3C111', fontWeight: 900 }}>{lotteryInfo.countWinnersPerBracket[0]}</strong>\n              </CenteredTextWithPadding>\n            </RowNoPadding>\n          </Column>)}\n\n          {/* <Link href=\"/\" target=\"_blank\">\n            {TranslateString(448, 'Export recent winning numbers')}\n          </Link> */}\n        </StyledCardContentInner>\n      </CardBodyNew>\n    </CardWrapper>\n  )\n}\n\nconst CardBodyNew = styled.div`\n  position: relative;\n  background-color: rgb(43 41 41);\n  border: 0.0625rem solid rgba(255, 255, 255, 0.2);\n  border-radius: 1.25rem;\n  padding: 24px;\n  min-height: 496px;\n`\n\nconst Link = styled.a`\n  margin-top: 1em;\n  text-decoration: none;\n  color: #101010;\n  background-color: transparent ;\n  border-radius: 12px;\n  padding: 17px 25px;\n  font-weight: 500;\n  white-space: nowrap;\n  border-radius: 100px;\n  border: 1px solid #F3C111;\n  color: #F3C111;\n  padding: 11px 60px;\n  font-size: 26px;\n  line-height: 30px;\n\n  @media (min-width) {\n    padding: 10px 25px;\n  }\n\n  &:hover {\n    background-color: #ffda3b;\n    color: #101010;\n    transition: 0.5s;\n  }\n`\n\nconst Row = styled.div`\n  margin-top: 1em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  border: 1px solid #f3c111;\n  border-radius: 14px;\n`\n\nconst RabbitRow = styled.div`\n  margin-top: -2.3em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n\n  @media (max-width: 768px) {\n    display: none;\n  }\n`\n\nconst RabbitRowSmall = styled.div`\n  margin-top: -2.3em;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n\n  @media (min-width: 768px) {\n    display: none;\n  }\n`\n\nconst CardImage = styled.div`\n  text-align: center;\n`\n\nconst CardImageFirst = styled.div`\n  text-align: center;\n  margin-left: -1.2em;\n\n  @media (max-width: 600) {\n    margin-left: -0.2em;\n  }\n`\n\nconst RowNoPadding = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 10px;\n`\n\nconst Column = styled.div`\n  margin-top: 1em;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`\n\nconst CenteredText = styled.div`\n  text-align: center;\n  align-items: center;\n`\n\nconst CenteredTextWithPadding = styled.div`\n  text-align: center;\n  align-items: center;\n  padding-left: 2px;\n  padding-right: 2px;\n  font-weight: 500;\n  font-size: 26px;\n`\n\nconst TicketNumberBox = styled.div`\n  padding: 10px;\n  border-radius: 12px;\n  // text-shadow: rgb(255 214 0) 0px 0px 12px;\n  // background: linear-gradient(180deg, #54dade 0%, #24c7d6 76.22%);\n  color: white;\n  font-size: 20px;\n  font-weight: 900;\n  margin: 10px;\n  margin-bottom: 7px;\n  width: 40px;\n  color: #F3C111;\n\n  @media (min-width: 768px) {\n    font-size: 64px;\n    margin: 20px;\n    background: url('../images/bg-number.svg');\n    background-repeat: no-repeat;\n    width: 120px;\n    min-height: 150px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n  }\n`\n\nconst RabbitBox = styled.div`\n  /* padding: 10px; */\n  border-radius: 12px;\n  margin: 16px 20px;\n  width: 60px;\n`\n\nconst RabbitBoxSmall = styled.div`\n  padding-top: 10px;\n  padding-left: 10px;\n  border-radius: 12px;\n  margin: 20px;\n  width: 20px;\n`\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`\n\nconst CardWrapper = styled.div`\n  margin-bottom: 30px;\n`\n\nconst Title = styled.div`\n  color: ${(props) => props.theme.colors.secondary};\n  font-size: 34px;\n  width: 50vw;\n  text-align: center;\n  font-weight: 1000;\n`\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n\n  &:before {\n    position: absolute;\n    top: 0;\n    left: 0;\n    content: '';\n    background: url('../images/jackpot-l.png');\n    width: 220px;\n    height: 496px;\n\n    @media (max-width: 991px) {\n      opacity: 0.2;\n    }\n  }\n\n  &:after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    content: '';\n    background: url('../images/jackpot-r.png');\n    width: 220px;\n    height: 496px;\n\n    @media (max-width: 991px) {\n      opacity: 0.2;\n    }\n  }\n`\n\nexport default WinningNumbers\n","import React from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { Heading, Text } from '@luckyswap/uikit'\nimport { BigNumber } from 'bignumber.js'\nimport { usePriceLuckyBusd } from 'state/hooks'\nimport { LotteryRound } from 'state/types'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardBusdValue from '../../Home/components/CardBusdValue'\nimport CardValue from '../../Home/components/CardValue';\n\nexport interface PrizeGridProps {\n  lotteryPrizeAmount?: number\n  pastDraw?: boolean\n  jackpotMatches?: number\n  oneTicketMatches?: number\n  twoTicketMatches?: number\n  threeTicketMatches?: number\n  lotteryData: LotteryRound\n}\n\nconst Grid = styled.div<{ pastDraw?: boolean }>`\n  display: grid;\n  grid-template-columns: repeat(${(props) => (props.pastDraw ? 3 : 2)}, 1fr);\n  grid-template-rows: repeat(4, auto);\n`\n\nconst RightAlignedText = styled(Text)`\n  padding: 8px 0;\n`\n\nconst RightAlignedHeading = styled(Heading)`\n  \n`\n\nconst GridItem = styled.div<{ marginBottom?: string }>`\n  margin-bottom: ${(props) => (props.marginBottom ? props.marginBottom : '10px')};\n  text-align: center;\n  &:nth-child(3), &:nth-child(4){\n    background: rgba(243, 193, 17, 0.15);\n  }\n  &:nth-child(5), &:nth-child(6){\n    background: rgba(255, 255, 255, 0.15);\n  }\n  &:nth-child(7), &:nth-child(8){\n    background: rgba(255, 255, 255, 0.05);\n  }\n`\n\nconst PastDrawGridItem = styled(GridItem)`\n  transform: translate(-40%, 0%);\n`\nconst GridPrize = styled.div`\n  .text{\n    padding: 8px 0;\n  }\n`\nconst CardBusd = styled.span`\n  font-size: 13px;\n  margin-right: 20px;\n  color: #F3C111;\n`\n\nconst PrizeGrid: React.FC<PrizeGridProps> = ({\n  pastDraw = false,\n  jackpotMatches,\n  twoTicketMatches,\n  threeTicketMatches,\n  lotteryData\n}) => {\n  const TranslateString = useI18n()\n  const cakeBusdPrice = usePriceLuckyBusd()\n\n  const { treasuryFee, amountCollectedInCake, rewardsBreakdown, countWinnersPerBracket } = lotteryData\n\n  const feeAsPercentage = new BigNumber(treasuryFee).div(100)\n  const cakeToBurn = feeAsPercentage.div(100).times(new BigNumber(amountCollectedInCake))\n  const amountLessTreasuryFee = new BigNumber(amountCollectedInCake).minus(cakeToBurn)\n\n  const getCakeRewards = (bracket: number) => {\n    const shareAsPercentage = new BigNumber(rewardsBreakdown[bracket]).div(100)\n    return amountLessTreasuryFee.div(100).times(shareAsPercentage)\n  }\n\n  const getCakeBusdValue = (amount: BigNumber) => {\n    return amount.times(cakeBusdPrice)\n  }\n\n  return (\n    <GridPrize>\n    <Grid pastDraw={pastDraw}>\n      <GridItem>\n        <Text fontSize=\"24px\" color=\"#F3C111\">\n          {TranslateString(756, 'No. Matched')}\n        </Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedText padding=\"0px\" fontSize=\"14px\" color=\"textSubtle\">\n            {TranslateString(754, 'Winners')}\n          </RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText style={{padding: 0}}  fontSize=\"24px\" color=\"#F3C111\">\n          {TranslateString(752, 'Prize Pot')}\n        </RightAlignedText>\n      </GridItem>\n      {/* 6 matches row */}\n      <GridItem>\n        <Heading className=\"text\" style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }} size=\"md\">\n          6\n        </Heading>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedHeading className=\"text\" size=\"md\">{jackpotMatches}</RightAlignedHeading>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedHeading className=\"text\" size=\"md\">\n            <CardBusd>\n            {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getBalanceNumber(getCakeBusdValue(getCakeRewards(5)))} />}  \n          </CardBusd>\n            <CardValue\n                bold\n                color=\"\"\n                value={getBalanceNumber(getCakeRewards(5))}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n          {/* {fourMatchesAmount.toLocaleString()} */}\n        </RightAlignedHeading>\n      </GridItem>\n      {/* 5 matches row */}\n      <GridItem style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }}>\n        <Text className=\"text\" padding=\"8px 0\" bold>\n          5\n        </Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem >\n          <RightAlignedText className=\"text\" bold>{threeTicketMatches}</RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText>\n            <CardBusd>\n            {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getBalanceNumber(getCakeBusdValue(getCakeRewards(4)))} />}  \n          </CardBusd>\n            <CardValue\n                bold\n                color=\"\"\n                value={getBalanceNumber(getCakeRewards(4))}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n          {/* {threeMatchesAmount.toLocaleString()} */}\n        </RightAlignedText>\n      </GridItem>\n       {/* 4 matches row */}\n       <GridItem style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }}>\n        <Text className=\"text\" padding=\"8px 0\" bold>\n          4\n        </Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem >\n          <RightAlignedText className=\"text\" bold>{threeTicketMatches}</RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText>\n            <CardBusd>\n            {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getBalanceNumber(getCakeBusdValue(getCakeRewards(3)))} />}  \n          </CardBusd>\n            <CardValue\n                bold\n                color=\"\"\n                value={getBalanceNumber(getCakeRewards(3))}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n          {/* {threeMatchesAmount.toLocaleString()} */}\n        </RightAlignedText>\n      </GridItem>\n       {/* 3 matches row */}\n       <GridItem style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }}>\n        <Text className=\"text\" padding=\"8px 0\" bold>\n          3\n          </Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem >\n          <RightAlignedText className=\"text\" bold>{threeTicketMatches}</RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText>\n            <CardBusd>\n            {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getBalanceNumber(getCakeBusdValue(getCakeRewards(2)))} />}  \n          </CardBusd>\n            <CardValue\n                bold\n                color=\"\"\n                value={getBalanceNumber(getCakeRewards(2))}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n          {/* {threeMatchesAmount.toLocaleString()} */}\n        </RightAlignedText>\n      </GridItem>\n       {/* 2 matches row */}\n       <GridItem style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }}>\n        <Text className=\"text\" padding=\"8px 0\" bold>\n          2\n        </Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem >\n          <RightAlignedText className=\"text\" bold>{threeTicketMatches}</RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText>\n            <CardBusd>\n            {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getBalanceNumber(getCakeBusdValue(getCakeRewards(1)))} />}  \n          </CardBusd>\n            <CardValue\n                bold\n                color=\"\"\n                value={getBalanceNumber(getCakeRewards(1))}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n          {/* {threeMatchesAmount.toLocaleString()} */}\n        </RightAlignedText>\n      </GridItem>\n      {/* 1 matches row */}\n      <GridItem style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px' }}>\n        <Text className=\"text\">1</Text>\n      </GridItem>\n      {pastDraw && (\n        <PastDrawGridItem>\n          <RightAlignedText className=\"text\">{twoTicketMatches}</RightAlignedText>\n        </PastDrawGridItem>\n      )}\n      <GridItem>\n        <RightAlignedText>\n            <CardBusd>\n            {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getBalanceNumber(getCakeBusdValue(getCakeRewards(0)))} />}  \n          </CardBusd>\n            <CardValue\n                bold\n                color=\"\"\n                value={getBalanceNumber(getCakeRewards(0))}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n          {/* {twoMatchesAmount.toLocaleString()} */}\n        </RightAlignedText>\n      </GridItem>\n      {/* Burn row */}\n      <GridItem marginBottom=\"0\">\n        <Text>{TranslateString(999, `${pastDraw ? 'Burned' : 'To burn'}`)}:</Text>\n      </GridItem>\n      {pastDraw ? (\n        <>\n          <GridItem marginBottom=\"0\" />\n          <GridItem marginBottom=\"0\">\n            <RightAlignedText>\n              <CardBusd>\n                {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getBalanceNumber(getCakeBusdValue(cakeToBurn))} />}\n              </CardBusd>\n              <CardValue\n                bold\n                color=\"\"\n                value={getBalanceNumber(cakeToBurn)}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n              {/* {burnAmount.toLocaleString()} */}\n            </RightAlignedText>\n          </GridItem>\n        </>\n      ) : (\n        <GridItem marginBottom=\"0\">\n          <RightAlignedText>\n            <CardBusd>\n              {!pastDraw && !cakeBusdPrice.eq(0) && <CardBusdValue value={getBalanceNumber(getCakeBusdValue(cakeToBurn))} />}\n            </CardBusd>\n            <CardValue\n                bold\n                color=\"\"\n                value={getBalanceNumber(cakeToBurn)}\n                decimals={0}\n                fontSize=\"60px\"\n                fontWeight=\"600\"\n              ></CardValue>\n            {/* {burnAmount.toLocaleString()} */}\n            </RightAlignedText>\n        </GridItem>\n      )}\n    </Grid>\n    </GridPrize>\n  )\n}\n\nexport default PrizeGrid\n","import React, { useContext, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Card, CardBody, CardFooter, Text, PancakeRoundIcon, Flex, Skeleton } from '@luckyswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useTotalRewards } from 'hooks/useTickets'\nimport { useContract } from 'hooks/useContract'\nimport { useLottery, usePriceLuckyBusd } from 'state/hooks'\nimport { getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { getLotteryIssueIndex } from 'utils/lotteryUtils'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton/ExpandableSectionButton'\nimport { BigNumber } from 'bignumber.js'\nimport PrizeGrid from '../PrizeGrid'\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\nimport CardValue from '../../../Home/components/CardValue'\n\n// const Container = styled.div`\n//   margin-left: auto;\n//   margin-right: auto;\n//   max-width: 1200px;\n//   margin-bottom: 30px;\n// `\ninterface Props {\n  account: any\n}\n\nconst BoxTotal = styled.div`\n  background: linear-gradient(45deg, rgb(35 35 35) 30%, rgb(45 45 45) 100%);\n  box-shadow: 0px 0px 11px 0px rgb(16 16 16 / 57%);\n  color: #ffffff;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n  margin-bottom: 20px;\n  display: grid;\n  grid-template-columns: 1fr;\n\n  @media (min-width: 991px) {\n    grid-template-columns: 1fr 1fr ;\n    margin: 0 auto 60px;\n  }\n`\n\nconst CardHeading = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n`\n\nconst Right = styled.div`\n  display: flex;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: none;\n  }\n`\n\nconst Left = styled.div`\n  display: flex;\n`\n\nconst IconWrapper = styled.div`\n  margin-right: 16px;\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\n\nconst PrizeCountWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst ExpandingWrapper = styled.div<{ showFooter: boolean }>`\n  height: ${(props) => (props.showFooter ? '100%' : '0px')};\n  padding: 15px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 100%;\n  }\n`\nconst CardBodyNew = styled.div`\n  background-color: rgba(255, 255, 255, 0.1);\n  border: 0.0625rem solid rgba(255, 255, 255, 0.2);\n  border-radius: 1.25rem;\n  padding: 24px;\n`\n\nconst BoxLucky = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  padding: 15px 0 5px;\n\n  h2 {\n    font-size: 44px;\n    position: relative;\n    color: #f3c111;\n    font-weight: 700;\n  }\n\n  span {\n    font-size: 16px;\n    position: absolute;\n    top: 0;\n  }\n`\n\nconst Dollar = styled.div`\n  padding-left: 60px;\n`\n\nconst RoundPrize = styled.div`\n  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@500;600;700&display=swap');\n  font-family: 'Montserrat', sans-serif;\n  font-weight: 900;\n  font-size: 36px;\n  line-height: 44px;\n    color: #252525;\n    text-shadow: 1px 1px 0 #F3C111,\n    -1px 1px 0 #F3C111,\n    1px -1px 0 #F3C111,\n    -1px -1px 0 #F3C111,\n    0px 1px 0 #F3C111,\n    0px -1px 0 #F3C111,\n    -1px 0px 0 #F3C111,\n    1px 0px 0 #F3C111,\n    2px 2px 0 #F3C111,\n    -2px 2px 0 #F3C111,\n    2px -2px 0 #F3C111,\n    -2px -2px 0 #F3C111,\n    0px 2px 0 #F3C111,\n    0px -2px 0 #F3C111,\n    -2px 0px 0 #F3C111,\n    2px 0px 0 #F3C111,\n    1px 2px 0 #F3C111,\n    -1px 2px 0 #F3C111,\n    1px -2px 0 #F3C111,\n    -1px -2px 0 #F3C111,\n    2px 1px 0 #F3C111,\n    -2px 1px 0 #F3C111,\n    2px -1px 0 #F3C111,\n    -2px -1px 0 #F3C111;\n`\n\nconst TotalPrizesCard = () => {\n  const [indexRoute, setIndexRoute]  = useState(0)\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const { currentLotteryId, isTransitioning, currentRound } = useLottery()\n  const { endTime, amountCollectedInCake, userTickets, status } = currentRound\n  const [showFooter, setShowFooter] = useState(false)\n  const lotteryPrizeAmount = +getBalanceNumber(useTotalRewards()).toFixed(0)\n  const { currentLotteryNumber } = useContext(PastLotteryDataContext)\n\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n\n  const cakePriceBusd = usePriceLuckyBusd()\n  const prizeInBusd = amountCollectedInCake.times(cakePriceBusd)\n\n  \n  useEffect(() => {\n    const fetchLotteryIndex = async () => {\n      if (lotteryContract) {\n        const index = await getLotteryIssueIndex(lotteryContract)\n\n        setIndexRoute(index)\n      }\n    }\n\n    fetchLotteryIndex()\n  }, [lotteryContract])\n\n  return (\n    <BoxTotal>\n      <CardBody>\n        {account && (\n          <Flex mb=\"55px\" alignItems=\"center\" justifyContent=\"space-between\">\n            {parseInt(currentLotteryId) === 0 && <Skeleton height={20} width={56} />}\n            <>\n              <RoundPrize>\n                {currentLotteryId && TranslateString(720, `Round #${currentLotteryId}`, { num: currentLotteryNumber })}\n              </RoundPrize>\n            </>\n            {/* {currentLotteryNumber > 0 && (\n                <>\n                  <Text fontSize=\"12px\" style={{ fontWeight: 600 }}>\n                    {TranslateString(720, `Round #${currentLotteryNumber}`, { num: currentLotteryNumber })}\n                  </Text>\n                </>\n              )} */}\n          </Flex>\n        )}\n        <CardHeading>\n          <Left>\n            <PrizeCountWrapper>\n              <Text fontSize=\"24px\" fontWeight=\"500\" color=\"textSubtle\">\n                {TranslateString(722, 'Total Pot:')}\n              </Text>        \n              { prizeInBusd.s && ( \n                <div>\n                  <BoxLucky>\n                      <IconWrapper>\n                        <img width=\"75px\" alt=\"\" src=\"/images/icon-logo-y.png\" />\n                      </IconWrapper>\n                  <Heading style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px', fontSize: '44' }} size=\"lg\">\n                  <CardValue\n                      bold\n                      color=\"\"\n                      value={getBalanceNumber(amountCollectedInCake)}\n                      decimals={3}\n                      fontSize=\"60px\"\n                      fontWeight=\"600\"\n                    ></CardValue> <span>LUCKY</span>\n                      </Heading>\n                    </BoxLucky>\n                    <Dollar>{prizeInBusd && <CardBusdValue value={getBalanceNumber(prizeInBusd)} />}</Dollar>\n                </div>\n              )}\n\n            </PrizeCountWrapper>\n          </Left>\n          <Right>\n            <ExpandableSectionButton onClick={() => setShowFooter(!showFooter)} expanded={showFooter} />\n          </Right>\n        </CardHeading>\n      </CardBody>\n      <ExpandingWrapper showFooter={showFooter}>\n        <CardFooter className=\"no-border\">\n          {!currentRound.isLoading && (<PrizeGrid lotteryPrizeAmount={lotteryPrizeAmount}  lotteryData={currentRound}/>)}\n        </CardFooter>\n      </ExpandingWrapper>\n    </BoxTotal>\n  )\n}\n\nexport default TotalPrizesCard\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { LotteryStatus, LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\nimport { LotteryUserGraphEntity, LotteryRoundGraphEntity, UserRound } from 'state/types'\nimport { multicallv2 } from 'utils/multicall'\nimport lotteryV2Abi from 'config/abi/lotteryV2.json'\nimport { getLotteryV2Address } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport {\n  getViewUserTicketInfoCalls,\n  mergeViewUserTicketInfoMulticallResponse,\n  processRawTicketsResponse,\n} from './helpers'\n\ninterface RoundDataAndUserTickets {\n  roundId: string\n  userTickets: LotteryTicket[]\n  finalNumber: string\n}\n\nconst lotteryAddress = getLotteryV2Address()\n\nconst fetchCakeRewardsForTickets = async (\n  winningTickets: LotteryTicket[],\n): Promise<{ ticketsWithUnclaimedRewards: LotteryTicket[]; cakeTotal: BigNumber }> => {\n  const calls = winningTickets.map((winningTicket) => {\n    const { roundId, id, rewardBracket } = winningTicket\n    return {\n      name: 'viewRewardsForTicketId',\n      address: lotteryAddress,\n      params: [roundId, id, rewardBracket],\n    }\n  })\n  const cakeRewards = await multicallv2(lotteryV2Abi, calls)\n\n  const cakeTotal = cakeRewards.reduce((accum: BigNumber, cakeReward: ethers.BigNumber[]) => {\n    return accum.plus(new BigNumber(cakeReward[0].toString()))\n  }, BIG_ZERO)\n\n  const ticketsWithUnclaimedRewards = winningTickets.map((winningTicket, index) => {\n    return { ...winningTicket, cakeReward: cakeRewards[index] }\n  })\n  return { ticketsWithUnclaimedRewards, cakeTotal }\n}\n\nconst getRewardBracketByNumber = (ticketNumber: string, finalNumber: string): number => {\n  // Winning numbers are evaluated right-to-left in the smart contract, so we reverse their order for validation here:\n  // i.e. '1123456' should be evaluated as '6543211'\n  const ticketNumAsArray = ticketNumber.split('').reverse()\n  const winningNumsAsArray = finalNumber.split('').reverse()\n  const matchingNumbers = []\n\n  // The number at index 6 in all tickets is 1 and will always match, so finish at index 5\n  for (let index = 0; index < winningNumsAsArray.length - 1; index++) {\n    if (ticketNumAsArray[index] !== winningNumsAsArray[index]) {\n      break\n    }\n    matchingNumbers.push(ticketNumAsArray[index])\n  }\n\n  // Reward brackets refer to indexes, 0 = 1 match, 5 = 6 matches. Deduct 1 from matchingNumbers' length to get the reward bracket\n  const rewardBracket = matchingNumbers.length - 1\n  return rewardBracket\n}\n\nexport const getWinningTickets = async ( // todo \n  roundDataAndUserTickets: RoundDataAndUserTickets,\n): Promise<LotteryTicketClaimData> => {\n  const { roundId, userTickets, finalNumber } = roundDataAndUserTickets\n\n  const ticketsWithRewardBrackets = userTickets.map((ticket) => {\n    return {\n      roundId,\n      id: ticket.id,\n      number: ticket.number,\n      status: ticket.status,\n      rewardBracket: getRewardBracketByNumber(ticket.number, finalNumber),\n    }\n  })\n\n  // A rewardBracket of -1 means no matches. 0 and above means there has been a match\n  const allWinningTickets = ticketsWithRewardBrackets.filter((ticket) => {\n    return ticket.rewardBracket >= 0\n  })\n\n  // If ticket.status is true, the ticket has already been claimed\n  const unclaimedWinningTickets = allWinningTickets.filter((ticket) => {\n    return !ticket.status\n  })\n\n  if (unclaimedWinningTickets.length > 0) {\n    const { ticketsWithUnclaimedRewards, cakeTotal } = await fetchCakeRewardsForTickets(unclaimedWinningTickets)\n    return { ticketsWithUnclaimedRewards, allWinningTickets, cakeTotal, roundId }\n  }\n\n  if (allWinningTickets.length > 0) {\n    return { ticketsWithUnclaimedRewards: null, allWinningTickets, cakeTotal: null, roundId }\n  }\n\n  return null\n}\n\nconst getWinningNumbersForRound = (targetRoundId: string, lotteriesData: LotteryRoundGraphEntity[]) => {\n  const targetRound = lotteriesData.find((pastLottery) => pastLottery.id === targetRoundId)\n  return targetRound?.finalNumber\n}\n\nexport const fetchUserTicketsForMultipleRounds = async (roundsToCheck: UserRound[], account: string) => {\n  // Build calls with data to help with merging multicall responses\n  const callsWithRoundData = roundsToCheck.map((round) => {\n    const totalTickets = parseInt(round.totalTickets, 10)\n    const calls = getViewUserTicketInfoCalls(totalTickets, account, round.lotteryId)\n    return { calls, lotteryId: round.lotteryId, count: calls.length }\n  })\n\n  // Batch all calls across all rounds\n  const multicalls = [].concat(...callsWithRoundData.map((callWithRoundData) => callWithRoundData.calls))\n\n  try {\n    const multicallRes = await multicallv2(lotteryV2Abi, multicalls, { requireSuccess: false })\n\n    // Use callsWithRoundData to slice multicall responses by round\n    const multicallResPerRound = []\n    let resCount = 0\n    for (let i = 0; i < callsWithRoundData.length; i += 1) {\n      const callOptions = callsWithRoundData[i]\n\n      multicallResPerRound.push(multicallRes.slice(resCount, resCount + callOptions.count))\n      resCount += callOptions.count\n    }\n    const mergedMulticallResponse = multicallResPerRound.map((res) => mergeViewUserTicketInfoMulticallResponse(res))\n\n    return mergedMulticallResponse\n  } catch (error) {\n    console.error(error)\n    return []\n  }\n}\n\nconst fetchUnclaimedUserRewards = async (\n  account: string,\n  userLotteryData: LotteryUserGraphEntity,\n  lotteriesData: LotteryRoundGraphEntity[],\n): Promise<LotteryTicketClaimData[]> => {\n  const { rounds } = userLotteryData\n\n  // If there is no user round history - return an empty array\n  if (rounds.length === 0) {\n    return []\n  }\n\n  // If the web3 provider account doesn't equal the userLotteryData account, return an empty array - this is effectively a loading state as the user switches accounts\n  if (userLotteryData.account.toLowerCase() !== account.toLowerCase()) {\n    return []\n  }\n\n  // Filter out non-claimable rounds\n  const claimableRounds = rounds.filter((round) => {\n    return round.status.toLowerCase() === LotteryStatus.CLAIMABLE\n  })\n\n  // If there are any rounds tickets haven't been claimed for, OR a user has over 100 tickets in a round - check user tickets for those rounds\n  const roundsToCheck = claimableRounds.filter((round) => {\n    return !round.claimed || parseInt(round.totalTickets, 10) > 100\n  })\n\n  if (roundsToCheck.length > 0) {\n    const rawUserTicketData = await fetchUserTicketsForMultipleRounds(roundsToCheck, account)\n\n    if (rawUserTicketData.length === 0) {\n      // In case of error with ticket calls, return empty array\n      return []\n    }\n\n    const roundIds = roundsToCheck.map((round) => round.lotteryId)\n    const roundDataAndUserTickets = rawUserTicketData.map((rawRoundTicketData, index) => {\n      return {\n        roundId: roundIds[index],\n        userTickets: processRawTicketsResponse(rawRoundTicketData),\n        finalNumber: getWinningNumbersForRound(roundIds[index], lotteriesData),\n      }\n    })\n\n    const winningTicketsForPastRounds = await Promise.all(\n      roundDataAndUserTickets.map((roundData) => getWinningTickets(roundData)),\n    )\n\n    // Filter out null values (returned when no winning tickets found for past round)\n    const roundsWithWinningTickets = winningTicketsForPastRounds.filter(\n      (winningTicketData) => winningTicketData !== null,\n    )\n\n    // Filter to only rounds with unclaimed tickets\n    const roundsWithUnclaimedWinningTickets = roundsWithWinningTickets.filter(\n      (winningTicketData) => winningTicketData.ticketsWithUnclaimedRewards,\n    )\n\n    return roundsWithUnclaimedWinningTickets\n  }\n  // All rounds claimed, return empty array\n  return []\n}\n\nexport default fetchUnclaimedUserRewards\n","import { ethers, Contract } from 'ethers'\n\n/**\n * Estimate the gas needed to call a function, and add a 10% margin\n * @param contract Used to perform the call\n * @param methodName The name of the methode called\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\n * @param args An array of arguments to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport const estimateGas = async (\n  contract: Contract,\n  methodName: string,\n  methodArgs: any[],\n  gasMarginPer10000: number,\n) => {\n  if (!contract[methodName]) {\n    throw new Error(`Method ${methodName} doesn't exist on ${contract.address}`)\n  }\n  const rawGasEstimation = await contract.estimateGas[methodName](...methodArgs)\n  // By convention, ethers.BigNumber values are multiplied by 1000 to avoid dealing with real numbers\n  const gasEstimation = rawGasEstimation\n    .mul(ethers.BigNumber.from(10000).add(ethers.BigNumber.from(gasMarginPer10000)))\n    .div(ethers.BigNumber.from(10000))\n  return gasEstimation\n}\n\n/**\n * Perform a contract call with a gas value returned from estimateGas\n * @param contract Used to perform the call\n * @param methodName The name of the methode called\n * @param args An array of arguments to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport const callWithEstimateGas = async (\n  contract: Contract,\n  methodName: string,\n  methodArgs: any[] = [],\n  gasMarginPer10000 = 1000,\n): Promise<ethers.providers.TransactionResponse> => {\n  const gasEstimation = estimateGas(contract, methodName, methodArgs, gasMarginPer10000)\n  const tx = await contract[methodName](...methodArgs, {\n    gasLimit: gasEstimation,\n  })\n  return tx\n}\n","import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text } from '@luckyswap/uikit'\n\ninterface TextProps {\n  isDisabled?: boolean\n  fontSize?: string\n  color?: string\n}\n\ninterface BalanceProps extends TextProps {\n  value?: number\n  decimals?: number\n  unit?: string\n}\n\nconst Balance: React.FC<BalanceProps> = ({ value, fontSize, color, decimals, isDisabled, unit }) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n\n  return (\n    <Text bold color={isDisabled ? 'textDisabled' : color} fontSize={fontSize}>\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {value && unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nBalance.defaultProps = {\n  fontSize: '32px',\n  isDisabled: false,\n  color: 'text',\n  decimals: 3,\n}\n\ninterface Balance2Props extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nexport const Balance2: React.FC<Balance2Props> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      {prefix && <span>{prefix}</span>}\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\n      {unit && <span>{unit}</span>}\n    </Text>\n  )\n}\n\nexport default Balance\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex, Button, Text, AutoRenewIcon, } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport { LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { callWithEstimateGas } from 'utils/calls'\nimport { useLottery, usePriceLuckyBusd } from 'state/hooks'\nimport { fetchUserLotteries } from 'state/lottery2'\nimport { useAppDispatch } from 'state'\nimport Balance, { Balance2 } from 'components/Balance'\n// import useToast from 'hooks/useToast'\nimport { useEtherLotteryV2Contract } from 'hooks/useContract'\nimport { ConsoleSqlOutlined } from '@ant-design/icons'\n\ninterface ClaimInnerProps {\n  roundsToClaim: LotteryTicketClaimData[]\n  onSuccess?: () => void\n}\n\nconst ClaimInnerContainer: React.FC<ClaimInnerProps> = ({ onSuccess, roundsToClaim }) => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { maxNumberTicketsPerBuyOrClaim } = useLottery()\n  const [activeClaimIndex, setActiveClaimIndex] = useState(0)\n  const [pendingTx, setPendingTx] = useState(false)\n  const lotteryContract = useEtherLotteryV2Contract()\n  const activeClaimData = roundsToClaim[activeClaimIndex]\n\n  const cakePriceBusd = usePriceLuckyBusd()\n  const cakeReward = activeClaimData.cakeTotal\n  const dollarReward = cakeReward.times(cakePriceBusd)\n  const rewardAsBalance = getBalanceAmount(cakeReward).toNumber()\n  const dollarRewardAsBalance = getBalanceAmount(dollarReward).toNumber()\n\n  const parseUnclaimedTicketDataForClaimCall = (ticketsWithUnclaimedRewards: LotteryTicket[], lotteryId: string) => {\n    const ticketIds = ticketsWithUnclaimedRewards.map((ticket) => {\n      return ticket.id\n    })\n    const brackets = ticketsWithUnclaimedRewards.map((ticket) => {\n      return ticket.rewardBracket\n    })\n    return { lotteryId, ticketIds, brackets }\n  }\n\n  const claimTicketsCallData = parseUnclaimedTicketDataForClaimCall(\n    activeClaimData.ticketsWithUnclaimedRewards,\n    activeClaimData.roundId,\n  )\n\n  const shouldBatchRequest = maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length)\n\n  const totalNumClaimsForRound = () =>\n    Math.ceil(\n      roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length / maxNumberTicketsPerBuyOrClaim.toNumber(),\n    )\n\n  const handleProgressToNextClaim = () => {\n    if (roundsToClaim.length > activeClaimIndex + 1) {\n      // If there are still rounds to claim, move onto the next claim\n      setActiveClaimIndex(activeClaimIndex + 1)\n      dispatch(fetchUserLotteries({ account }))\n    } else {\n      onSuccess()\n    }\n  }\n\n  const getTicketBatches = (ticketIds: string[], brackets: number[]): { ticketIds: string[]; brackets: number[] }[] => {\n    const requests = []\n    const maxAsNumber = maxNumberTicketsPerBuyOrClaim.toNumber()\n\n    for (let i = 0; i < ticketIds.length; i += maxAsNumber) {\n      const ticketIdsSlice = ticketIds.slice(i, maxAsNumber + i)\n      const bracketsSlice = brackets.slice(i, maxAsNumber + i)\n      requests.push({ ticketIds: ticketIdsSlice, brackets: bracketsSlice })\n    }\n\n    return requests\n  }\n\n  const handleClaim = async () => {\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\n    console.log(\"maxNumberTicketsPerBuyOrClaim\", maxNumberTicketsPerBuyOrClaim)\n    console.log('claimData', claimTicketsCallData)\n    setPendingTx(true)\n    try {\n      const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketIds, brackets])\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        // toastSuccess(\n        //   t('Prizes Collected!'),\n        //   t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId }),\n        // )\n        console.log(\"Prizes Collected!\")\n        setPendingTx(false)\n        handleProgressToNextClaim()\n      }\n    } catch (error) {\n      console.error(error)\n      // toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n      \n      setPendingTx(false)\n    }\n  }\n\n  const handleBatchClaim = async () => {\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\n    const ticketBatches = getTicketBatches(ticketIds, brackets)\n    const transactionsToFire = ticketBatches.length\n    const receipts = []\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const ticketBatch of ticketBatches) {\n      try {\n        /* eslint-disable no-await-in-loop */\n        const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [\n          lotteryId,\n          ticketBatch.ticketIds,\n          ticketBatch.brackets,\n        ])\n        const receipt = await tx.wait()\n        /* eslint-enable no-await-in-loop */\n        if (receipt.status) {\n          // One transaction within batch has succeeded\n          receipts.push(receipt)\n\n          // More transactions are to be done within the batch. Issue toast to give user feedback.\n          if (receipts.length !== transactionsToFire) {\n            // toastSuccess(\n            //   t('Prizes Collected!'),\n            //   t(\n            //     'Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transation',\n            //     {\n            //       claimNum: receipts.length,\n            //       claimTotal: transactionsToFire,\n            //       lotteryId,\n            //     },\n            //   ),\n            // )\n            console.log()\n          }\n        }\n      } catch (error) {\n        console.error(error)\n        // toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n      }\n    }\n\n    // Batch is finished\n    if (receipts.length === transactionsToFire) {\n      setPendingTx(false)\n      // toastSuccess(\n      //   t('Prizes Collected!'),\n      //   t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId }),\n      // )\n      console.log(\"Prizes Collected!\");\n      handleProgressToNextClaim()\n    }\n  }\n\n  return (\n    <>\n      <Flex flexDirection=\"column\">\n        <Text mb=\"4px\" textAlign={['center', null, 'left']}>\n          {TranslateString(999, 'You won')}\n        </Text>\n        <Flex\n          alignItems={['flex-start', null, 'center']}\n          justifyContent={['flex-start', null, 'space-between']}\n          flexDirection={['column', null, 'row']}\n        >\n          <Balance2\n            value={rewardAsBalance}\n            fontSize=\"44px\"\n            unit=\" LUCKY!\"\n            color=\"secondary\"\n            // textAlign={['center', null, 'left']}\n          />\n          {/* <PresentWonIcon ml={['0', null, '12px']} width=\"64px\" /> */}\n        </Flex>\n        <Balance2\n          // mt={['12px', null, '0']}\n          // textAlign={['center', null, 'left']}\n          value={dollarRewardAsBalance}\n          fontSize=\"12px\"\n          color=\"textSubtle\"\n          unit=\" USD\"\n          prefix=\"~\"\n          decimals={10}\n        />\n      </Flex>\n\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <Text mt=\"8px\" fontSize=\"12px\" color=\"textSubtle\">\n          {TranslateString(999, 'Round')} #{activeClaimData.roundId}\n        </Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          mt=\"20px\"\n          width=\"100%\"\n          onClick={() => (shouldBatchRequest ? handleBatchClaim() : handleClaim())}\n        >\n          {pendingTx ? TranslateString(999, 'Claiming') : TranslateString(999, 'Claim')} {totalNumClaimsForRound() > 1 \n          ? `(${totalNumClaimsForRound()})` : ''}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default ClaimInnerContainer\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Heading, ModalContainer, ModalHeader, ModalTitle, ModalBody, ModalCloseButton } from '@luckyswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport { delay } from 'lodash'\nimport confetti from 'canvas-confetti'\nimport { LotteryTicketClaimData } from 'config/constants/types'\nimport { useAppDispatch } from 'state'\nimport { fetchUserLotteries } from 'state/lottery2'\nimport ClaimPrizesInner from './ClaimPrizesInner'\n\nconst StyledModal = styled(ModalContainer)`\n  position: relative;\n  overflow: visible;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 380px;\n  }\n`\n\nconst StyledModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.cardHeader};\n  border-top-right-radius: 32px;\n  border-top-left-radius: 32px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst showConfetti = () => {\n  confetti({\n    resize: true,\n    particleCount: 200,\n    startVelocity: 30,\n    gravity: 0.5,\n    spread: 350,\n    origin: {\n      x: 0.5,\n      y: 0.3,\n    },\n  })\n}\n\ninterface ClaimPrizesModalModalProps {\n  roundsToClaim: LotteryTicketClaimData[]\n  onDismiss?: () => void\n}\n\nconst ClaimPrizesModal: React.FC<ClaimPrizesModalModalProps> = ({ onDismiss, roundsToClaim }) => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    delay(showConfetti, 100)\n  }, [])\n\n  return (\n    <StyledModal minWidth=\"280px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <StyledModalHeader>\n        <ModalTitle>\n          <Heading>{TranslateString(999, 'Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </StyledModalHeader>\n      <ModalBody p=\"24px\">\n        <ClaimPrizesInner\n          onSuccess={() => {\n            dispatch(fetchUserLotteries({ account }))\n            onDismiss()\n          }}\n          roundsToClaim={roundsToClaim}\n        />\n      </ModalBody>\n    </StyledModal>\n  )\n}\n\nexport default ClaimPrizesModal\n","import React, { useEffect, useState }from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { Button, Heading, Flex, useModal, AutoRenewIcon, Card } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { fetchUserLotteries } from 'state/lottery2'\nimport { useAppDispatch } from 'state'\nimport { useGetUserLotteriesGraphData, useLottery } from 'state/hooks'\nimport useGetUnclaimedRewards, { FetchStatus }  from '../../hooks/useGetUnclaimedRewards'\nimport ClaimPrizesModal from '../ClaimPrizesModal'\n\nconst TicketImage = styled.img`\n  height: 60px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 100px;\n  }\n`\n\nconst TornTicketImage = styled.img`\n  height: 54px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 84px;\n  }\n`\nconst StyledCard = styled(Card)`\n  margin: 0 !important;\n  max-width: 100% !important;\n  border-radius: 14px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  ${(props) =>\n    props.isDisabled\n      ? `  \n        margin-top: 0;\n        background-color: unset;\n        box-shadow: unset;\n        border: 1px solid ${props.theme.colors.textDisabled};\n\n        ${props.theme.mediaQueries.sm} {\n          margin-top: 0;\n        }\n\n        ${props.theme.mediaQueries.lg} {\n          margin-top: 0;\n        }\n        `\n      : ``}\n`\n\nconst YourPrizesCard: React.FC = () => {\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const { fetchAllRewards, unclaimedRewards, fetchStatus } = useGetUnclaimedRewards()\n  const userLotteryData = useGetUserLotteriesGraphData()\n  const [hasCheckedForRewards, setHasCheckedForRewards] = useState(false)\n  const [hasRewardsToClaim, setHasRewardsToClaim] = useState(false)\n  const isFetchingRewards = fetchStatus === FetchStatus.IN_PROGRESS\n  const isCheckNowDisabled = !userLotteryData.account \n  const [onPresentClaimModal] = useModal(<ClaimPrizesModal roundsToClaim={unclaimedRewards} />, false)\n\n  const dispatch = useAppDispatch();\n  \n  useEffect(() => {\n    dispatch(fetchUserLotteries({ account }));\n  }, [account, dispatch])\n\n  useEffect(() => {\n    if (fetchStatus === FetchStatus.SUCCESS) {\n      // Manage showing unclaimed rewards modal once per page load / once per lottery state change\n      if (unclaimedRewards.length !== 0 && !hasCheckedForRewards) {\n        setHasRewardsToClaim(true)\n        setHasCheckedForRewards(true)\n        onPresentClaimModal()\n      }\n\n      if (unclaimedRewards.length === 0 && !hasCheckedForRewards) {\n        setHasRewardsToClaim(false)\n        setHasCheckedForRewards(true)\n      }\n    }\n  }, [unclaimedRewards, hasCheckedForRewards, fetchStatus, onPresentClaimModal])\n\n // clear user state\n useEffect(() => {\n    // Clear local state on account change, or when lottery isTransitioning state changes\n    setHasRewardsToClaim(false)\n    setHasCheckedForRewards(false)\n  }, [account])\n\n  const getBody = () => {\n    if (!account) {\n      return (\n        <Flex alignItems=\"center\" justifyContent=\"center\">\n          <TicketImage src=\"/images/lottery/ticket-l.png\" alt=\"lottery ticket\" />\n          <Flex mx={['4px', null, '16px']} flexDirection=\"column\" alignItems=\"center\">\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {TranslateString(999,'Connect your wallet')}\n            </Heading>\n            <Heading textAlign=\"center\" color=\"#F4EEFF\" mb=\"24px\">\n              {TranslateString(999,\"to check if you've won!\")}\n            </Heading>\n          </Flex>\n          <TicketImage src=\"/images/lottery/ticket-r.png\" alt=\"lottery ticket\" />\n        </Flex>\n      )\n    }\n    if (hasCheckedForRewards && !hasRewardsToClaim) {\n      return (\n        <Flex alignItems=\"center\" justifyContent=\"center\">\n          <TornTicketImage src=\"/images/icon-lottery.svg\" alt=\"torn lottery ticket\" />\n          <Flex mx={['4px', null, '16px']} flexDirection=\"column\">\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {TranslateString(999,'No prizes to collect')}...\n            </Heading>\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {TranslateString(999,'Better luck next time!')}\n            </Heading>\n          </Flex>\n          <TornTicketImage src=\"/images/icon-lottery.svg\" alt=\"torn lottery ticket\" />\n        </Flex>\n      )\n    }\n    if (hasCheckedForRewards && hasRewardsToClaim) {\n      return (\n        <Flex alignItems=\"center\" justifyContent=\"center\">\n          <TicketImage src=\"/images/icon-lottery.svg\" alt=\"lottery ticket\" />\n          <Flex mx={['4px', null, '16px']} flexDirection=\"column\">\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {TranslateString(999, 'Congratulations!')}\n            </Heading>\n            <Heading textAlign=\"center\" color=\"#F4EEFF\">\n              {TranslateString(999,'Why not play again')}\n            </Heading>\n          </Flex>\n          <TicketImage src=\"/images/icon-lottery.svg\" alt=\"lottery ticket\" />\n        </Flex>\n      )\n    }\n    const checkNowText = () => {\n      // if (lotteryIsNotClaimable) {\n      //   return `${TranslateString(999,'Calculating rewards')}...`\n      // }\n      if (isFetchingRewards) {\n        return TranslateString(999,'Checking')\n      }\n      return TranslateString(999,'Check Now')\n    }\n    return (\n     <Flex alignItems=\"center\" justifyContent=\"center\">\n        {/* <TicketImage src=\"/images/lottery/ticket-l.png\" alt=\"lottery ticket\" /> */}\n        <Flex mx={['4px', null, '16px']} flexDirection=\"column\">\n          <Heading textAlign=\"center\" color=\"#F4EEFF\" mb=\"24px\">\n            {TranslateString(999,'Are you a winner?')}\n          </Heading>\n          <Button\n            style={{backgroundColor: \"#f4c708\"}}\n            disabled={isCheckNowDisabled}\n            onClick={fetchAllRewards}\n            // isLoading={a}\n            // endIcon={ <AutoRenewIcon color=\"currentColor\" spin /> }\n          >\n            {checkNowText()}\n          </Button>\n        </Flex>\n        {/* <TicketImage src=\"/images/lottery/ticket-r.png\" alt=\"lottery ticket\" /> */}\n      </Flex>\n    )\n  }\n\n\n  return (\n    // <StyledCard isDisabled={!isAWin} isActive={isAWin}>\n    <StyledCard >\n     {getBody()}\n    </StyledCard>\n  )\n}\n\nexport default YourPrizesCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Ticket } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\n\nconst StyledCardBody = styled(CardBody)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n\nconst StyledHeading = styled(Heading)`\n  margin: 16px 0;\n`\n\nconst IconWrapper = styled.div`\n  svg {\n    width: 80px;\n    height: 80px;\n  }\n`\n\nconst UnlockWalletCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card isActive>\n      <StyledCardBody>\n        <IconWrapper>\n          <img src=\"https://merlinlab.com/assets/lottery/lottery.svg\" alt=\"\" />\n        </IconWrapper>\n        <StyledHeading size=\"md\">{TranslateString(1080, 'Unlock wallet to access lottery')}</StyledHeading>\n        <UnlockButton />\n      </StyledCardBody>\n    </Card>\n  )\n}\n\nexport default UnlockWalletCard\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useLotteryV2contract } from 'hooks/useContract'\nimport { Ticket } from 'config/constants/types'\n\n\nexport const useTicketLotteryV2 = () => {\n  const [tickets, setTickets] = useState<Ticket[]>([]);\n  const { account } = useWeb3React()\n\n  const lotteryV2Contract = useLotteryV2contract()\n\n  useEffect(() => {\n    const fetchTickets = async () => {\n      const currentLotteryId = await lotteryV2Contract.currentLotteryId();\n      const userInfoForLottery = await lotteryV2Contract.viewUserInfoForLotteryId(account, currentLotteryId, 0,10000);\n      const tempTickets = []\n      for (let i =0; i< userInfoForLottery[0].length; i++) {\n        const ticket = {\n          ticketId: userInfoForLottery[0][i]?.toNumber(),\n          ticketNumber: userInfoForLottery[1][i],\n          status: userInfoForLottery[2][i]\n        }\n\n        tempTickets.push(ticket);\n      }\n\n      setTickets(tempTickets);\n    } \n    if (account && lotteryV2Contract)\n      fetchTickets();\n  }, [account, lotteryV2Contract])\n\n  return tickets;\n}","import { LotteryTicket } from 'config/constants/types'\nimport { random } from 'lodash'\n\n/**\n * Generate a specific number of unique, randomised 7-digit lottery numbers between 1000000 & 1999999\n */\nconst generateTicketNumbers = (\n  numberOfTickets: number,\n  userCurrentTickets?: LotteryTicket[],\n  minNumber = 1000000,\n  maxNumber = 1999999,\n): number[] => {\n  // Populate array with existing tickets (if they have them) to ensure no duplicates when generating new numbers\n  const existingTicketNumbers =\n    userCurrentTickets?.length > 0\n      ? userCurrentTickets.map((ticket) => {\n          return parseInt(ticket?.number)\n        })\n      : []\n  const generatedTicketNumbers = [...existingTicketNumbers]\n\n  for (let count = 0; count < numberOfTickets; count++) {\n    let randomNumber = random(minNumber, maxNumber)\n    while (generatedTicketNumbers.includes(randomNumber)) {\n      // Catch for duplicates - generate a new number until the array doesn't include the random number generated\n      randomNumber = random(minNumber, maxNumber)\n    }\n    generatedTicketNumbers.push(randomNumber)\n  }\n\n  // Filter out the users' existing tickets\n  const ticketsToBuy =\n    userCurrentTickets?.length > 0\n      ? generatedTicketNumbers.filter((ticketNumber) => {\n          return !existingTicketNumbers.includes(ticketNumber)\n        })\n      : generatedTicketNumbers\n\n  return ticketsToBuy\n}\n\nexport default generateTicketNumbers\n","import { LotteryTicket } from 'config/constants/types'\nimport { useEffect, useReducer } from 'react'\nimport { parseRetreivedNumber } from '../../helpers'\nimport generateTicketNumbers from './generateTicketNumbers'\n\nexport interface Ticket {\n  id: number\n  numbers: string[]\n  duplicateWith: number[]\n  isComplete: boolean\n}\n\nexport interface TicketsState {\n  tickets: Ticket[]\n  allComplete: boolean\n}\n\nconst getInitialState = ({\n  amount,\n  userCurrentTickets,\n}: {\n  amount: number\n  userCurrentTickets: LotteryTicket[]\n}): TicketsState => {\n  const randomTickets = generateTicketNumbers(amount, userCurrentTickets)\n  const randomTicketsAsStringArray = randomTickets.map((ticket) => parseRetreivedNumber(ticket.toString()).split(''))\n  const tickets = Array.from({ length: amount }, (_, i) => i + 1).map((index) => ({\n    id: index,\n    numbers: randomTicketsAsStringArray[index - 1],\n    duplicateWith: [],\n    isComplete: true,\n  }))\n  return {\n    tickets,\n    allComplete: true,\n  }\n}\n\nconst reducer = (state: TicketsState, action: any) => {\n  switch (action.type) {\n    case 'updateTicket': {\n      const tickets = [...state.tickets]\n      const { ticketId, newNumbers } = action.payload\n\n      const newDuplicates = state.tickets.filter(\n        (ticket) => ticket.id !== ticketId && ticket.isComplete && ticket.numbers.join('') === newNumbers.join(''),\n      )\n\n      // If ticket was duplicate but not duplicate anymore with this update\n      // go through previously considered duplicates and remove id of this ticket\n      // from their duplicateWith array\n      const prevDuplicates = tickets[ticketId - 1].duplicateWith\n      prevDuplicates.forEach((prevTicketId) => {\n        if (!newDuplicates.map(({ id }) => id).includes(prevTicketId)) {\n          const dupsToUpdate = [...tickets[prevTicketId - 1].duplicateWith]\n          const indexToRemvoe = dupsToUpdate.findIndex((id) => id === ticketId)\n          dupsToUpdate.splice(indexToRemvoe, 1)\n          tickets[prevTicketId - 1] = {\n            ...tickets[prevTicketId - 1],\n            duplicateWith: dupsToUpdate,\n          }\n        }\n      })\n\n      // If found duplicates - update their duplicateWith array\n      if (newDuplicates.length !== 0) {\n        newDuplicates.forEach((duplicate) => {\n          tickets[duplicate.id - 1] = {\n            ...duplicate,\n            duplicateWith: [...duplicate.duplicateWith, ticketId],\n          }\n        })\n      }\n\n      const updatedTicket = {\n        id: ticketId,\n        numbers: newNumbers,\n        duplicateWith: newDuplicates.map((ticket) => ticket.id),\n        isComplete: newNumbers.join('').length === 6,\n      }\n      tickets[ticketId - 1] = updatedTicket\n\n      // Check if all tickets are filled\n      const allComplete = tickets.every((ticket) => ticket.isComplete)\n\n      return {\n        tickets,\n        allComplete,\n      }\n    }\n    case 'reset':\n      return getInitialState({ amount: action.payload.amount, userCurrentTickets: action.payload.userCurrentTickets })\n    default:\n      throw new Error()\n  }\n}\n\nexport type UpdateTicketAction = (ticketId: number, newNumbers: string[]) => void\n\nexport const useTicketsReducer = (\n  amount: number,\n  userCurrentTickets: LotteryTicket[],\n): [UpdateTicketAction, () => void, Ticket[], boolean, () => number[]] => {\n  const [state, dispatch] = useReducer(reducer, { amount, userCurrentTickets }, getInitialState)\n\n  useEffect(() => {\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\n  }, [amount, userCurrentTickets])\n\n  const updateTicket = (ticketId: number, newNumbers: string[]) => {\n    dispatch({ type: 'updateTicket', payload: { ticketId, newNumbers } })\n  }\n\n  const randomize = () => {\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\n  }\n\n  const getTicketsForPurchase = () => {\n    return state.tickets.map((ticket) => {\n      const reversedTicket = [...ticket.numbers].map((num) => parseInt(num, 10)).reverse()\n      reversedTicket.unshift(1)\n      const ticketAsNumber = parseInt(reversedTicket.join(''), 10)\n      return ticketAsNumber\n    })\n  }\n\n  return [updateTicket, randomize, state.tickets, state.allComplete, getTicketsForPurchase]\n}\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@luckyswap/uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport useI18n from 'hooks/useI18n'\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE, LOTTERY2_MAX_TICKET_IN_ROUND } from 'config'\nimport { useLotteryV2contract } from 'hooks/useContract'\nimport {useTicketLotteryV2} from 'hooks/useTicketLotteryV2'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport { useLotteryV2 } from 'hooks/useLotteryV2';\nimport { useTicketsReducer } from './useTicketsReducer'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onConfirm?: (amount: string, numbers: Array<number>) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [discountValue, setDiscountValue] = useState('')\n  const [ticketCostBeforeDiscount, setTicketCostBeforeDiscount] = useState('');\n  const [totalCost, setTotalCost] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, 18)\n  }, [max])\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\n  }, [max])\n\n  const userTickets = useTicketLotteryV2()\n  const ticketsLength = userTickets.length;\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\n\n  const lotteryV2Contract = useLotteryV2contract()\n  const addTransaction = useTransactionAdder()\n\n  const {\n    currentLotteryId,\n    maxNumberTicketsPerBuyOrClaim,\n    lotteryData \n  } = useLotteryV2();\n\n  const {\n    priceTicketInCake,\n    discountDivisor\n  } = lotteryData as any;\n\n\n  const userCurrentTickets = useMemo(() => {return []}, [])\n\n  const [updateTicket, randomize, tickets, allComplete, getTicketsForPurchase] = useTicketsReducer(\n    parseInt(val, 10), // number of tickets\n    userCurrentTickets,\n  )\n\n  const getTicketCostAfterDiscount = useCallback(\n    (numberTickets: BigNumber) => {\n      const totalAfterDiscount = priceTicketInCake\n        .times(numberTickets)\n        .times(discountDivisor.plus(1).minus(numberTickets))\n        .div(discountDivisor)\n      return totalAfterDiscount\n    },\n    [discountDivisor, priceTicketInCake],\n  )\n\n  useEffect(() => {\n    const numberOfTicketsToBuy = new BigNumber(val)\n    const costAfterDiscount = getTicketCostAfterDiscount(numberOfTicketsToBuy)\n    const costBeforeDiscount = priceTicketInCake.times(numberOfTicketsToBuy)\n    const discountBeingApplied = costBeforeDiscount.minus(costAfterDiscount)\n    setTicketCostBeforeDiscount(costBeforeDiscount.gt(0) ? getFullDisplayBalance(costBeforeDiscount) : '0')\n    setTotalCost(costAfterDiscount.gt(0) ? getFullDisplayBalance(costAfterDiscount) : '0')\n    setDiscountValue(discountBeingApplied.gt(0) ? getFullDisplayBalance(discountBeingApplied, 18) : '0')\n  }, [val, priceTicketInCake, discountDivisor, getTicketCostAfterDiscount])\n\n  const percentageDiscount = () => {\n    const percentageAsBn = new BigNumber(discountValue).div(new BigNumber(ticketCostBeforeDiscount)).times(100)\n    if (percentageAsBn.isNaN() || percentageAsBn.eq(0)) {\n      return 0\n    }\n    return percentageAsBn.toNumber().toFixed(2)\n  }\n\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const ticketsForPurchase = getTicketsForPurchase();\n      const tx =  await lotteryV2Contract.buyTickets(currentLotteryId, ticketsForPurchase);\n    } catch (e) {\n      console.error(e)\n    }\n  }, [lotteryV2Contract, currentLotteryId, getTicketsForPurchase])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > parseInt(maxNumberTicketsPerBuyOrClaim)) {\n      if (LOTTERY2_MAX_TICKET_IN_ROUND - ticketsLength > parseInt(maxNumberTicketsPerBuyOrClaim))\n        setVal(maxNumberTicketsPerBuyOrClaim)\n      else\n        setVal((LOTTERY2_MAX_TICKET_IN_ROUND - ticketsLength).toString())\n    } else if((LOTTERY2_MAX_TICKET_IN_ROUND - ticketsLength > Number(maxTickets))) {\n      setVal(maxTickets.toString())\n    } else {\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\n    }\n  }, [maxTickets, ticketsLength, maxNumberTicketsPerBuyOrClaim])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * LOTTERY_TICKET_PRICE\n  }\n  \n  return (\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"LUCKY\"\n      />\n      <div>\n        <Tips>{TranslateString(999, `1 Ticket = ${LOTTERY_TICKET_PRICE} LUCKY`, { num: LOTTERY_TICKET_PRICE })}</Tips>\n        <Tips>{TranslateString(999, `Cost: ${priceTicketInCake && getFullDisplayBalance(priceTicketInCake.times(val || 0))} lucky`)}</Tips>\n        <Tips>{TranslateString(999, `Discount: ${discountValue && totalCost ? percentageDiscount() : 0} %`)}</Tips>\n        <Tips>{TranslateString(999, `~ ${discountValue} Lucky`)}</Tips>\n        {/* {priceTicketInCake && getFullDisplayBalance(priceTicketInCake.times(ticketsToBuy || 0))} */}\n      </div>\n      <div>\n        <Announce>\n          {TranslateString(\n            478,\n            'Ticket purchases are final. Your LUCKY cannot be returned to you after buying tickets.',\n          )}\n        </Announce>s\n        <Final>{TranslateString(460, `You will spend: ${totalCost} LUCKY`)}</Final>\n        <Final>{TranslateString(999, `Your ticket: ${ticketsLength}`)}</Final>\n\n      </div>\n      <ModalActions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n\n        \n        <Button\n          id=\"lottery-buy-complete\"\n          width=\"100%\"\n          variant=\"secondary\"\n          disabled={\n            pendingTx ||\n            parseInt(val) > Number(maxTickets) ||\n            parseInt(val) > parseInt(maxNumberTicketsPerBuyOrClaim) ||\n            // parseInt(val) + ticketsLength > LOTTERY2_MAX_TICKET_IN_ROUND ||\n            parseInt(val) < 1\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #fff;\n`\n","import React, { useCallback, useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\n// import { fetchCurrentLotteryIdAndMaxBuy } from '../state/lotteryV2/helpers';\nimport { useLotteryV2contract } from 'hooks/useContract'\nimport { ethersToSerializedBigNumber } from 'utils/bigNumber'\n\n\nexport const useLotteryV2 = () => {\n  const [state, setState] = useState(\n    {\n      currentLotteryId: '0',\n      maxNumberTicketsPerBuyOrClaim: '0',\n      lotteryData: {\n        status: \"\",\n        startTime: 0,\n        endTime: 1,\n        priceTicketInCake: new BigNumber(0),\n        discountDivisor: new BigNumber(0),\n        treasuryFee: new BigNumber(0),\n        firstTicketId:new BigNumber(0),\n        lastTicketId: new BigNumber(0),\n        amountCollectedInCake: new BigNumber(0),\n        finalNumber: new BigNumber(0),\n        cakePerBracket: [],\n        countWinnersPerBracket: [],\n        rewardsBreakdown: new BigNumber(0),\n      }\n    }\n  )\n\n  const lotteryV2Contract = useLotteryV2contract()\n  // console.log(\"lotteryV2Contract\", lotteryV2Contract)\n\n  useEffect(() => {\n    const fetchLotteryV2Data  = async ()=> {\n      if (lotteryV2Contract){\n        const currentLotteryId = await lotteryV2Contract.currentLotteryId();\n        const maxNumberTicketsPerBuyOrClaim = await lotteryV2Contract.maxNumberTicketsPerBuyOrClaim();\n        const lotteryData = await lotteryV2Contract.viewLottery(currentLotteryId)\n\n        const {\n          status,\n          startTime,\n          endTime,\n          priceTicketInCake,\n          discountDivisor,\n          treasuryFee,\n          firstTicketId,\n          lastTicketId,\n          amountCollectedInCake,\n          finalNumber,\n          cakePerBracket,\n          countWinnersPerBracket,\n          rewardsBreakdown,\n        } = lotteryData\n\n        setState({ \n          currentLotteryId: currentLotteryId.toNumber(), \n          maxNumberTicketsPerBuyOrClaim: maxNumberTicketsPerBuyOrClaim.toNumber(),\n          lotteryData :{\n            status: \"\",\n            startTime: 0,\n            endTime: 1,\n            priceTicketInCake: new BigNumber(ethersToSerializedBigNumber(priceTicketInCake)),\n            discountDivisor: new BigNumber(ethersToSerializedBigNumber(discountDivisor)),\n            treasuryFee: new BigNumber(0),\n            firstTicketId:new BigNumber(0),\n            lastTicketId: new BigNumber(0),\n            amountCollectedInCake: new BigNumber(0),\n            finalNumber: new BigNumber(0),\n            cakePerBracket: [],\n            countWinnersPerBracket: [],\n            rewardsBreakdown: new BigNumber(0)\n          }\n        })\n      }\n    }\n    fetchLotteryV2Data();\n  }, [lotteryV2Contract])\n\n  return state;\n}","import React from 'react'\nimport { LotteryTicket } from 'config/constants/types'\nimport { Flex, Text } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { parseRetreivedNumber } from '../../helpers'\n\nconst StyledNumberWrapper = styled(Flex)`\n  position: relative;\n  padding: 4px 16px;\n  border-radius: ${({ theme }) => theme.radii.default};\n  background: black;\n  justify-content: space-between;\n`\n\nconst RewardHighlighter = styled.div<{ numberMatches: number }>`\n  z-index: 1;\n  width: ${({ numberMatches }) => `${numberMatches < 6 ? numberMatches * 17.66 : 100}%`};\n  height: 34px;\n  border-radius: ${({ theme }) => theme.radii.default};\n  top: 0;\n  left: 0;\n  position: absolute;\n  border: 2px ${({ theme }) => theme.colors.primary} solid;\n`\n\ninterface TicketNumberProps extends LotteryTicket {\n  localId?: number\n  rewardBracket?: number\n}\n\nconst TicketNumber: React.FC<TicketNumberProps> = ({ localId, id, number, rewardBracket }) => {\n  const TranslateString = useI18n()\n  const reversedNumber = parseRetreivedNumber(number)\n  const numberAsArray = reversedNumber.split('')\n  const numberMatches = rewardBracket + 1\n\n\n  return (\n    <Flex flexDirection=\"column\" mb=\"12px\">\n      <Flex justifyContent=\"space-between\">\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          #{localId || id}\n        </Text>\n        {rewardBracket >= 0 && (\n          <Text fontSize=\"12px\">\n            {TranslateString(999, 'Matched first')} {numberMatches}\n          </Text>\n        )}\n      </Flex>\n      <StyledNumberWrapper>\n        {rewardBracket >= 0 && <RewardHighlighter numberMatches={numberMatches} />}\n        {numberAsArray.map((digit) => (\n          <Text fontSize=\"16px\">{digit}</Text>\n        ))}\n      </StyledNumberWrapper>\n    </Flex>\n  )\n}\n\nexport default TicketNumber\n","import React, { useCallback, useEffect } from 'react'\nimport { Button, Modal } from '@luckyswap/uikit'\nimport styled from 'styled-components'\nimport { Ticket  } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { useLottery,  } from 'state/hooks'\nimport TicketNumber from './TicketNumber'\n\n\ninterface UserTicketsModalProps {\n  myTicketNumbers: Array<Ticket>\n  from?: string\n  onDismiss?: () => void\n}\n\nconst UserTicketsModal: React.FC<UserTicketsModalProps> = ({ myTicketNumbers, onDismiss }) => {\n  const winNumbers = [] // todo: improve\n  const TranslateString = useI18n()\n  const {\n    isTransitioning,\n    currentRound: { status, userTickets },\n  } = useLottery()\n\n\n  const listItems = userTickets.tickets.map((ticket, index) => {\n    return (\n      <p style={{ color: 'yellow' }} key={ticket.id}>\n         <TicketNumber\n                key={ticket.id}\n                localId={index + 1}\n                id={ticket.id}\n                number={ticket.number}\n                rewardBracket={ticket.rewardBracket}\n                status={ticket.status}\n              />\n      </p>\n    )\n  })\n\n  return (\n    <Modal\n      title={TranslateString(490, `My Tickets (Total: ${myTicketNumbers.length})`, { TICKETS: myTicketNumbers.length })}\n      onDismiss={onDismiss}\n    >\n      <TicketsList>\n        <h2>{listItems}</h2>\n      </TicketsList>\n      <StyledButton variant=\"secondary\" onClick={onDismiss}>\n        {TranslateString(438, 'Close')}\n      </StyledButton>\n    </Modal>\n  )\n}\n\nconst RewardP = styled.div`\n  color: #ff8c28;\n`\n\nconst TicketsList = styled.div`\n  text-align: center;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst StyledButton = styled(Button)`\n  margin-top: ${(props) => props.theme.spacing[2]}px;\n`\n\nexport default UserTicketsModal\n","import React from 'react'\nimport { Button, Modal } from '@luckyswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\n\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Modal title={TranslateString(466, 'Warning')} onDismiss={onDismiss}>\n      <TicketsList>\n        {TranslateString(468, 'Lottery ticket purchases are final.')}\n        <br />\n        {TranslateString(470, 'Your CAKE will not be returned to you after you spend it to buy tickets.')}\n        <br />\n        {TranslateString(472, 'Tickets are only valid for one lottery draw, and will be burned after the draw.')}\n        <br />\n        {TranslateString(\n          474,\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\n        )}\n      </TicketsList>\n      <ModalActions>\n        <Button width=\"100%\" onClick={onDismiss}>\n          {TranslateString(476, 'I understand')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nconst TicketsList = styled.div`\n  text-align: left;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nexport default WarningModal\n","import React, { useMemo, useCallback, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, useModal } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { useContract } from 'hooks/useContract'\nimport { useApproveCallbackCustom } from 'hooks/useApproveCallback'\nimport { XLUCKY_TESTNET_ADDRESSES } from 'config'\nimport bep20Abi from 'config/abi/erc20.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport useRefresh from 'hooks/useRefresh'\nimport useUtilityToken from 'hooks/useUtilityToken'\nimport { useLottery } from 'state/hooks'\nimport { getLotteryV2Address, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport lotteryTicketAbi from 'config/abi/lotteryNft.json'\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks'\nimport { TransactionDetails } from 'state/transactions/reducer'\nimport { LotteryStatus } from 'config/constants/types'\nimport {useTicketLotteryV2} from 'hooks/useTicketLotteryV2'\nimport BuyTicketModal from './BuyTicketModal'\nimport MyTicketsModal from './UserTicketsModal'\nimport PurchaseWarningModal from './PurchaseWarningModal'\n\n// we want the latest one to come first, so return negative if a is after b\nfunction newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst CardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: ${(props) => props.theme.spacing[3]}px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    justify-content: space-between;\n  }\n`\n\nconst TicketCard: React.FC = () => {\n  const TranslateString = useI18n()\n  const [balanceToken, setBalanceToken] = useState(0)\n  const [allowance, setAllowance] = useState(0)\n  // const allowance = useLotteryAllowance()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const {\n    isTransitioning,\n    currentRound: { status, endTime },\n  } = useLottery()\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\n\n  const isBuyTicketTime = new Date().getTime() < parseInt(endTime)* 1000;\n\n  const { account, chainId } = useWeb3React()\n  const contractBEP20 = useContract(XLUCKY_TESTNET_ADDRESSES[chainId], bep20Abi)\n\n  const useContractTemp = useContract(XLUCKY_TESTNET_ADDRESSES[chainId], bep20Abi)\n\n  const ticketsContract = useContract(getLotteryTicketAddress(), lotteryTicketAbi)\n  const lotteryContract = useContract(getLotteryV2Address(), lotteryAbi)\n  const { fastRefresh } = useRefresh()\n\n  const tickets = useTicketLotteryV2();\n  const ticketsLength = tickets.length\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\n  const [onPresentBuy] = useModal(<BuyTicketModal max={new BigNumber(balanceToken)} tokenName=\"CAKE\" />)\n\n  const { listenApproveEvent } = useUtilityToken(XLUCKY_TESTNET_ADDRESSES[chainId])\n\n  // useEffect(() => {\n  //   const fetchBalance = async () => {\n  //     const res = await getTickets(lotteryContract, ticketsContract, account, null)\n  //     setTickets(res)\n  //   }\n\n  //   if (account && lotteryContract && ticketsContract) {\n  //     fetchBalance()\n  //   }\n  // }, [account, lotteryContract, fastRefresh, ticketsContract])\n\n  useEffect(() => {\n    const fetchApprovalData = async () => {\n      if (account && contractBEP20) {\n        try {\n          // const response = await contractBEP20?.allowance?.(account, getLotteryAddress())\n          setAllowance(new BigNumber('10000000000000000000000000000000').toNumber())\n        } catch (error) {\n          console.log(' error fetch approval data')\n        }\n      }\n    }\n    listenApproveEvent(() => fetchApprovalData())\n  }, [listenApproveEvent, account, contractBEP20])\n\n\n  useEffect(() => {\n    if (useContractTemp) {\n      useContractTemp\n        .balanceOf(account)\n        .then((data) => {\n          setBalanceToken(data.toString())\n        })\n        .catch((error) => console.log('lottery : ', error))\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account])\n\n  useEffect(() => {\n    if (useContractTemp) {\n      useContractTemp\n        .balanceOf(account)\n        .then((data) => {\n          setBalanceToken(data.toString())\n        })\n        .catch((error) => console.log('lottery : ', error))\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, fastRefresh])\n\n  useEffect(() => {\n    const fetchApprovalData = async () => {\n      if (account && contractBEP20) {\n        try {\n          const response = await contractBEP20?.allowance?.(account, getLotteryV2Address())\n          setAllowance(response.toString())\n        } catch (error) {\n          console.log(' error fetch approval data')\n        }\n      }\n    }\n\n    fetchApprovalData()\n  }, [account, contractBEP20])\n  const [requestedApproval, setRequestedApproval] = useState(false)\n\n  const [approval] = useApproveCallbackCustom(XLUCKY_TESTNET_ADDRESSES[chainId], getLotteryV2Address())\n\n  async function onAttemptToApprove() {\n    return approval()\n  }\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onAttemptToApprove().then()\n    } catch (e) {\n      console.error(e)\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [approval, setRequestedApproval])\n\n  const allTransactions = useAllTransactions()\n\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  const getStatus = () => {\n    const pending = sortedRecentTransactions.filter((tx) => !tx.receipt).map((tx) => tx.hash)\n    return !!pending.length\n  }\n\n  const renderLotteryTicketButtons = () => {\n    if (allowance.toString() === '0') {\n      return (\n        <Dflex>\n          <Button\n            style={{ marginRight: '8px' }}\n            width=\"100%\"\n            disabled={ticketsLength === 0}\n            variant=\"secondary\"\n            onClick={onPresentMyTickets}\n          >\n            {TranslateString(432, 'View your tickets')}\n          </Button>\n          <Button\n            className=\"border-yellow\"\n            width=\"100%\"\n            disabled={requestedApproval || getStatus()}\n            onClick={handleApprove}\n          >\n            {getStatus() ? spinnerIcon : ''}\n            {TranslateString(494, 'Approve')}\n          </Button>\n        </Dflex>\n      )\n    }\n    return (\n      <>\n        <Button\n          style={{ marginRight: '8px' }}\n          width=\"100%\"\n          disabled={ticketsLength === 0}\n          variant=\"secondary\"\n          onClick={onPresentMyTickets}\n        >\n          {TranslateString(432, 'View your tickets')}\n        </Button>\n        <Button variant=\"secondary\" id=\"lottery-buy-start\" width=\"100%\" disabled={!isBuyTicketTime || ticketBuyIsDisabled} onClick={onPresentBuy}>\n        {getStatus() ? spinnerIcon : ''}\n        {TranslateString(430, 'Buy ticket')}\n        </Button>\n      </>\n    )\n  }\n\n  return (\n    <CardActions>\n      {ticketBuyIsDisabled ? (\n        <Button className=\"btn-center\" disabled> {TranslateString(874, 'On sale soon')}</Button>\n      ) : (\n        renderLotteryTicketButtons()\n      )}\n    </CardActions>\n  )\n}\n\nconst Dflex = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 20px;\n  width: 100%;\n`\n\nexport default TicketCard\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, TicketRound, Text, Heading } from '@luckyswap/uikit'\nimport axios from 'axios'\n\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport {useTicketLotteryV2} from 'hooks/useTicketLotteryV2'\nimport { useLottery } from 'state/hooks'\nimport { useCurrentTime } from 'hooks/useTimer'\nimport useRefresh from 'hooks/useRefresh'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useActiveWeb3React } from 'hooks';\nimport { BASE_API_ADMIN, BASE_API_ADMIN_PRO } from 'config'\nimport TicketActions from './TicketActions'\nimport { getTicketSaleTime, getTimeRemainDraw } from '../../helpers/CountdownHelpers'\n\n\ninterface CardProps {\n  isSecondCard?: boolean\n}\n\nconst StyledCard = styled(Card)<CardProps>`\n  margin: 0 !important;\n  max-width: 100% !important;\n  border-radius: 14px;\n\n  ${(props) =>\n    props.isSecondCard\n      ? `  \n        margin-top: 0;\n\n        ${props.theme.mediaQueries.sm} {\n          margin-top: 0;\n        }\n\n        ${props.theme.mediaQueries.lg} {\n          margin-top: 0;\n        }\n        `\n      : ``}\n`\n\nconst CardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n`\n\nconst IconWrapper = styled.div`\n  margin-bottom: 16px;\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\n\nconst TicketCountWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`\n\nconst TicketCard: React.FC<CardProps> = ({ isSecondCard = false }) => {\n  const { chainId }  = useActiveWeb3React();\n  const TranslateString = useI18n()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n\n  const {\n    isTransitioning,\n    currentRound: { status },\n  } = useLottery()\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\n\n  const tickets = useTicketLotteryV2()\n  const ticketsLength = tickets.length\n\n  const currentMillis = useCurrentTime()\n  const timeUntilTicketSale = lotteryHasDrawn && getTicketSaleTime(currentMillis)\n\n  const { fastRefresh } = useRefresh()\n  const [timeRemainDraw, setTimeRemainDraw] = useState(\"\");\n  const [timeRemainSale, setTimeRemainSale] = useState(\"\");\n\n  const URL = chainId === 56 ? BASE_API_ADMIN_PRO : BASE_API_ADMIN;\n\n  useEffect(() => {\n    const fetchTimeLottery = async () => {\n      const timeEndLottery = new Date();\n      const timeStartLottery = new Date();\n      const {data} = await axios.get(`${URL}/lotteries`);\n\n      // set time remain to end lottery phase\n      timeEndLottery.setHours(data[0].timeDrawLottery.hh, data[0].timeDrawLottery.mm, 0);\n      setTimeRemainDraw(getTimeRemainDraw(timeEndLottery));\n\n      // set time remain to start new lottery phase\n      timeStartLottery.setHours(data[0].timeStartNewPhase.hh, data[0].timeStartNewPhase.mm, 0);\n      setTimeRemainSale(getTimeRemainDraw(timeStartLottery));\n    }\n    fetchTimeLottery();\n  },[fastRefresh, URL])\n  // 12\n  return (\n    <StyledCard isSecondCard={isSecondCard}>\n      <CardBody>\n        <CardHeader>\n          <IconWrapper>\n            <img alt=\"\" src=\"../images/icon-lottery.svg\" />\n          </IconWrapper>\n          {ticketBuyIsDisabled ? (\n            <TicketCountWrapper>\n              <Text fontSize=\"20px\" color=\"textSubtle\">\n                {TranslateString(870, 'Your ticket for this round')}\n              </Text>\n              <Heading size=\"lg\" style={{ color: '#F3C111', fontSize: '30px' }}>\n                {timeRemainSale}\n              </Heading>\n            </TicketCountWrapper>\n          ) : (\n            <TicketCountWrapper>\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {TranslateString(724, 'Your tickets for this round')}\n              </Text>\n              <Heading size=\"lg\">{ticketsLength}</Heading>\n            </TicketCountWrapper>\n          )}\n        </CardHeader>\n        <TicketActions />\n      </CardBody>\n    </StyledCard>\n  )\n}\n\nexport default TicketCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Heading, Link, Image } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst LayoutWrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n  margin-bottom: 30px;\n  margin: 0 auto 40px;\n  display: flex;\n  flex-direction: column;\n  border-radius: 14px;\n  padding: 20px;\n  background-color: #2b2a2a;\n  text-align: center;\n`\n\nconst SectionTitle = styled.div`\n\n`\n\nconst TitleMain = styled.h2`\n  font-size: 40px;\n  line-height: 50px;\n  margin-bottom: 13px;\n  color: #fff;\n  font-weight: 700;\n  text-transform: capitalize;\n`\n\nconst SubTitle = styled.p`\n  max-width: 650px;\n  font-size: 16px;\n  line-height: 26px;\n  color: #fff;\n  margin: 0 auto;\n`\n\nconst BoxItem = styled.h2`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 20px;\n  margin-top: 30px;\n\n  @media (min-width: 768px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`\n\nconst Item = styled.div`\n  text-align: left;\n  overflow: hidden;\n  position: relative;\n  margin-bottom: 30px;\n  background: #f4c706;\n  box-shadow: 0px 30px 20px 0px rgb(0 37 93 / 15%);\n  border-radius: 15px;\n  transition: all 0.3s ease-in;\n  cursor: pointer;\n\n  &:after {\n    position: absolute;\n    content: \"\";\n    background: linear-gradient(to right,#ffd009,#f97503);\n    width: 0%;\n    height: 0%;\n    top: 50%;\n    left: 50%;\n    bottom: 0px;\n    opacity: 0;\n    transform: translate(-50%, -50%);\n    transition: all 0.3s ease-in;\n    border-radius: 50%;\n  }\n\n  &:hover {\n    transform: translateY(0px) !important;\n\n    &:after {\n      width: 100%;\n      height: 100%;\n      opacity: 1;\n      border-radius: 0%;\n    }\n\n    .btn-step {\n      color: #1a1a1a;\n\n      &:before {\n        background-color: #fce307;\n      }\n    }\n  }\n`\n\nconst InerItem = styled.div`\n  width: 100%;\n  position: relative;\n  z-index: 99;\n  padding: 30px 22px;\n  transition: 0.3s ease-in;\n`\n\nconst Title = styled.h3`\n  color: #1a1a1a;\n  font-size: 24px;\n  font-weight: 600;\n  margin-bottom: 15px;\n`\n\nconst Desc = styled.p`\n  font-size: 16px;\n  color: #464646;\n`\n\nconst Step = styled.span`\n\tdisplay: flex;\n  justify-content: center;\n  margin-left: auto;\n  width: 80px;\n\tpadding: 10px 0;\n\tborder-radius: 10rem;\n\tcolor: #fff;\n\ttext-transform: uppercase;\n\tfont-size: 1rem;\n\ttransition: all .3s;\n\tposition: relative;\n\toverflow: hidden;\n\tz-index: 1;\n\n\t&:after {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tbackground-color: #c5892e;\n\t\tborder-radius: 10rem;\n\t\tz-index: -2;\n\t}\n\n\t&:before {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\ttransition: all .3s;\n\t\tborder-radius: 10rem;\n\t\tz-index: -1;\n\t}\n`\n\nconst HowItWorks = () => {\n  // const TranslateString = useI18n()\n\n  return (\n    <LayoutWrapper>\n      <SectionTitle>\n        <TitleMain>How to Play</TitleMain>\n        <SubTitle>If the digits on your tickets match the winning numbers in the correct order, you win a portion of the prize pool Simple!</SubTitle>\n      </SectionTitle>\n\n      <BoxItem>\n        <Item>\n          <InerItem>\n            <Step className=\"btn-step\">  \n              STEP 1\n            </Step>\n\n            <Title>Buy tickets</Title>\n\n            <Desc>\n              Prices are set when the round starts, equal to 1 LUCKY per ticket.\n            </Desc>\n          </InerItem>\n        </Item>\n\n        <Item>\n          <InerItem>\n            <Step className=\"btn-step\">  \n              STEP 2\n            </Step>\n\n            <Title>Wait for the Draw</Title>\n\n            <Desc>\n              There are two draws every day: once every 24h.\n            </Desc>\n          </InerItem>\n        </Item>\n\n        <Item>\n          <InerItem>\n            <Step className=\"btn-step\">  \n              step 3\n            </Step>\n\n            <Title>Check for Prizes</Title>\n\n            <Desc>\n              Once the round&apos;s over, come back to the page and check to see if you&apos;ve won!\n            </Desc>\n          </InerItem>\n        </Item>\n      </BoxItem>\n    </LayoutWrapper>\n  )\n}\nexport default HowItWorks\n","import React from 'react'\nimport { Text } from '@luckyswap/uikit'\n\ninterface PastRoundCardErrorProps {\n  error: {\n    message: string\n  }\n}\n\nconst PastRoundCardError: React.FC<PastRoundCardErrorProps> = ({ error }) => {\n  return <Text p=\"24px\">{error.message}</Text>\n}\n\nexport default PastRoundCardError\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading, Text } from '@luckyswap/uikit'\n\ninterface HeadingProps {\n  valueToDisplay?: any\n  children?: string\n  Icon?: React.ComponentType\n  Ic?: boolean\n}\ninterface Props {\n  Icon?: React.ComponentType\n}\nconst IconWrapper = styled.div<Props>`\n  margin-right: 16px;\n\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\nconst BoxContent = styled.div`\n  display: flex;\n  img{\n    width: 75px;\n    margin-right: 20px\n  }\n`\nconst NumberValue = styled.div`\n  width: 70px;\n  height: 70px;\n  font-weight: 900;\n  margin-right: 10px;\n  border-radius: 10px;\n  color: #F3C111;\n  font-size: 34px;\n  background-image: url(../images/border.png);\n  position: relative;\n  span{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n`\n\nconst LotteryCardHeading: React.FC<HeadingProps> = ({ valueToDisplay, children, Icon, Ic, ...props }) => {\n  return (\n    <Flex {...props}>\n      {Icon && (\n        <IconWrapper>\n          <Icon />\n        </IconWrapper>\n      )}\n      <Flex className=\"box-lucky\" flexDirection=\"column\">\n        <Text fontSize=\"24px\" mb=\"20px\" color=\"textSubtle\">\n          {children}\n        </Text>\n        <BoxContent>\n          {Ic && <img src=\"../images/icon-lottery.svg\" alt=\"\" />}\n          {/* <Heading size=\"lg\">{valueToDisplay}</Heading> */}\n          {valueToDisplay?.map((item: any, key:any) => {\n            return (\n              <NumberValue><span>{item}</span></NumberValue>\n            )\n          })}\n        </BoxContent>\n      </Flex>\n    </Flex>\n  )\n}\n\nLotteryCardHeading.defaultProps = {\n  valueToDisplay: [],\n  children: '',\n}\n\nexport default LotteryCardHeading\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, LinkExternal, useModal } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useWeb3React } from '@web3-react/core'\nimport useTickets from 'hooks/useTickets'\nimport UnlockButton from 'components/UnlockButton'\nimport { SCAN_SITES } from '../../../../constants'\nimport MyTicketsModal from '../TicketCard/UserTicketsModal'\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding-top: 24px;\n  margin: 0 auto;\n  margin-bottom: 40px;\n  display: block;\n  width: max-content;\n  & > div {\n    flex: 1;\n    width: 100%;\n  }\n`\n\nconst ExternalLinkWrap = styled(LinkExternal)`\n  align-items: center;\n  display: flex;\n  height: 48px;\n  justify-content: center;\n  text-decoration: none;\n  width: 100%;\n`\nconst StyledButton = styled(Button)`\n  width: max-content;\n  color: #f3c111 !important;\n  padding: 0 70px;\n  border-radius: 100px;\n  border-color: #F3C111 !important;\n  margin: 0 auto;\n  display: block;\n  margin-right: auto !important;\n`\n\nconst TicketCard: React.FC<{ contractLink?: string; lotteryNumber?: number }> = ({ contractLink, lotteryNumber }) => {\n  const TranslateString = useI18n()\n  const tickets = useTickets(lotteryNumber)\n  const ticketsLength = tickets.length\n  const [onPresentMyTickets] = useModal(<MyTicketsModal myTicketNumbers={tickets} from=\"buy\" />)\n  const { account, chainId } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Wrapper>\n        <UnlockButton />\n      </Wrapper>\n    )\n  }\n\n  return (\n    <Wrapper>\n      <div>\n        {/* <StyledButton\n          \n          width=\"100%\"\n          variant=\"secondary\"\n          disabled={ticketsLength === 0}\n          onClick={onPresentMyTickets}\n        >\n          {TranslateString(432, 'View Your ticket')}\n        </StyledButton> */}\n      </div>\n      {/* <div>\n        <ExternalLinkWrap href={contractLink}>\n          {TranslateString(356, `View on ${SCAN_SITES[chainId]}`)}\n        </ExternalLinkWrap>\n      </div> */}\n    </Wrapper>\n  )\n}\n\nexport default TicketCard\n","const formatLotteryDate = (lotteryDate: string) => {\n  if (!lotteryDate) {\n    return {}\n  }\n\n  const date = new Date(lotteryDate)\n\n  const dateString = date.toDateString()\n  const hours = date.getUTCHours()\n  const monthAndDay = dateString.split(' ').splice(1, 2).join(' ')\n\n  return { hours, monthAndDay }\n}\n\nexport default formatLotteryDate\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@luckyswap/uikit'\nimport formatLotteryDate from '../helpers/formatLotteryDate'\n\nconst Wrapper = styled.div`\n  padding-top: 20px;\n`\n\nconst Timestamp = ({ timeValue }) => {\n  const { monthAndDay, hours } = formatLotteryDate(timeValue)\n\n  return (\n    <Wrapper>\n      <Text fontSize=\"14px\">\n        {monthAndDay}, {hours}:00 UTC\n      </Text>\n    </Wrapper>\n  )\n}\n\nexport default Timestamp\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Text, Input, Button, SearchIcon } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n// import Search from '../../../../../public/images/search.svg'\n\n\ninterface PastLotterySearcherProps {\n  initialLotteryNumber: number\n  onSubmit: (num: number) => void\n}\n\nconst Wrapper = styled.div`\n  margin-bottom: 24px;\n`\n\nconst SearchWrapper = styled.div`\n  position: relative;\n  border-radius: 20px;\n  background: #FFFFFF;\n  ::placeholder {\n    color: #828282 !important;\n    opacity: 1;\n  }\n`\nconst InputWrapper = styled.div`\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n\n  /* Firefox */\n  input[type='number'] {\n    -moz-appearance: textfield;\n  }\n`\nconst StyledInput = styled(Input)`\n  padding-right: 30px;\n  border: 1px solid;\n  // background: #FFFFFF;\n  color: #828282; \n  padding-left: 50px;\n  background: transparent;\n  ::placeholder {\n    color: #828282 !important;\n    opacity: 1;\n  }\n`\nconst ButtonWrapper = styled.div`\n  position: absolute;\n  left: 0px;\n  top: 50%;\n  transform: translate(0%, -50%);\n  width: auto;\n  \n`\nconst StyledBtn = styled(Button)`\n  border: unset;\n\n`\n\nconst PastLotterySearcher: React.FC<PastLotterySearcherProps> = ({ initialLotteryNumber, onSubmit }) => {\n  const [lotteryNumber, setLotteryNumber] = useState(initialLotteryNumber)\n  const [isError, setIsError] = useState(false)\n  const TranslateString = useI18n()\n\n  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault()\n    onSubmit(lotteryNumber)\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseInt(evt.currentTarget.value, 10)\n\n    // The max value will always be the initialLotteryNumber which equals\n    // the latest lottery round\n    setIsError(value > initialLotteryNumber)\n    setLotteryNumber(value)\n  }\n\n  return (\n    <Wrapper>\n      {/* <Text>{TranslateString(742, 'Select lottery number:')}</Text> */}\n      <form onSubmit={handleSubmit}>\n        <SearchWrapper>\n          <ButtonWrapper>\n            <StyledBtn variant=\"secondary\" type=\"submit\" scale=\"sm\" disabled={isError}>\n              {/* {TranslateString(744, 'Search')} */}\n              <SearchIcon style={{fill:\"#828282\", width:\"25px\"}}/>\n              {/* <img width=\"20px\" src=\"../images/search.png\" alt=\"\" /> */}\n            </StyledBtn>\n          </ButtonWrapper>\n          <InputWrapper>\n            <StyledInput\n              value={lotteryNumber}\n              type=\"number\"\n              isWarning={isError}\n              max={initialLotteryNumber}\n              onChange={handleChange}\n              placeholder=\"Enter Round Number...\"\n              style={{ paddingLeft:\"50px\"}}\n            />\n          </InputWrapper>\n          \n        </SearchWrapper>\n      </form>\n    </Wrapper>\n  )\n}\n\nexport default PastLotterySearcher\n","import React, { useState, useEffect } from 'react'\nimport { Heading, CardBody, CardFooter, PancakeRoundIcon, TicketRound, Text } from '@luckyswap/uikit'\nimport { BigNumber } from 'bignumber.js'\nimport styled from 'styled-components'\n\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalRewards } from 'hooks/useTickets'\nimport { usePriceLuckyBusd } from 'state/hooks'\nimport useGetRecentLotteryRoundData from 'hooks/useGetRecentLotteryRoundData'\n\nimport useI18n from 'hooks/useI18n'\nimport { DataResponse } from 'utils/getLotteryRoundData'\nimport {  LotteryRoundGraphEntity, LotteryResponse  } from 'state/types'\nimport { LotteryStatus } from 'config/constants/types'\n\n\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\n\nimport LotteryCardHeading from '../LotteryCardHeading'\nimport PastLotteryActions from './PastLotteryActions'\nimport PrizeGrid from '../PrizeGrid'\nimport Timest from '../Timestamp'\nimport PastLotterySearcher from './PastLotterySearcher'\nimport {  processLotteryResponse, parseRetreivedNumber } from '../../helpers'\nimport { fetchLottery, useProcessLotteryResponse } from '../../../../state/lottery2/helpers'\n\ninterface PastRoundCardDetailsProps {\n  data: LotteryRoundGraphEntity\n  initialLotteryNumber: number\n  onSubmit: (num: number) => void\n}\n\nconst CardHeading = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`\n\nconst TopLotteryCardHeading = styled(LotteryCardHeading)`\n  margin-bottom: ${(props) => props.theme.spacing[4]}px;\n  \n`\n\nconst BoxCard = styled.div`\n  padding: 10px;\n`\n// const StyledTime = styled(Timest)`\n//   padding-top: 20px;\n//   position: unset !important;\n//   top: 20px;\n// `\n// const StyledTime = styled(Timest)`\n// padding-top: 20px;\n//   position: unset !important;\n//    top: 20px;\n// `\n\nconst Dflex = styled.div`\n  \n  align-items: center;\n`\nconst StyledBox = styled.div`\n  display: grid;\n  @media (min-width: 991px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`\nconst RoundPrize = styled.div`\n  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@500;600;700&display=swap');\n  font-family: 'Montserrat', sans-serif;\n  font-weight: 900;\n  font-size: 36px;\n  line-height: 44px;\n    color: #252525;\n    text-shadow: 1px 1px 0 #F3C111,\n    -1px 1px 0 #F3C111,\n    1px -1px 0 #F3C111,\n    -1px -1px 0 #F3C111,\n    0px 1px 0 #F3C111,\n    0px -1px 0 #F3C111,\n    -1px 0px 0 #F3C111,\n    1px 0px 0 #F3C111,\n    2px 2px 0 #F3C111,\n    -2px 2px 0 #F3C111,\n    2px -2px 0 #F3C111,\n    -2px -2px 0 #F3C111,\n    0px 2px 0 #F3C111,\n    0px -2px 0 #F3C111,\n    -2px 0px 0 #F3C111,\n    2px 0px 0 #F3C111,\n    1px 2px 0 #F3C111,\n    -1px 2px 0 #F3C111,\n    1px -2px 0 #F3C111,\n    -1px -2px 0 #F3C111,\n    2px 1px 0 #F3C111,\n    -2px 1px 0 #F3C111,\n    2px -1px 0 #F3C111,\n    -2px -1px 0 #F3C111;\n`\nconst TopCard = styled.div`\n  margin-bottom: 23px;\n  display: flex;\n  margin-top: 20px;\n  justify-content: space-around;\n  position: relative;\n`\nconst BoxLucky = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  padding: 15px 0 5px;\n\n  h2 {\n    font-size: 44px;\n    position: relative;\n    color: #f3c111;\n    font-weight: 700;\n  }\n\n  span {\n    font-size: 16px;\n    position: absolute;\n    top: 0;\n  }\n`\nconst IconWrapper = styled.div`\n  margin-right: 16px;\n  svg {\n    width: 48px;\n    height: 48px;\n  }\n`\nconst Dollar = styled.div`\n  padding-left: 60px;\n`\n\nconst PastRoundCardDetails: React.FC<PastRoundCardDetailsProps> = ({ data, initialLotteryNumber,onSubmit }) => {\n  const TranslateString = useI18n()\n  const lotteryPrizeAmount = +getBalanceNumber(useTotalRewards()).toFixed(0)\n  const lotteryPrizeAmountBusd = new BigNumber(lotteryPrizeAmount).multipliedBy(usePriceLuckyBusd()).toNumber() \n\n  // export interface LotteryRoundGraphEntity {\n  //   id: string\n  //   totalUsers: string\n  //   totalTickets: string\n  //   status: LotteryStatus\n  //   finalNumber: string\n  //   winningTickets: string\n  //   startTime: string\n  //   endTime: string\n  //   ticketPrice: SerializedBigNumber\n  //   firstTicket: string\n  //   lastTicket: string\n  // }\n\n  // export interface LotteryRound extends LotteryRoundGenerics {\n  //   userTickets?: LotteryRoundUserTickets\n  //   priceTicketInCake: BigNumber\n  //   discountDivisor: BigNumber\n  //   amountCollectedInCake: BigNumber\n  //   cakePerBracket: string[]\n  //   countWinnersPerBracket: string[]\n  //   rewardsBreakdown: string[]\n  // }\n  \n\n  const { id, endTime, finalNumber, amountCollectedInCake }  = data;\n  const endDate = new Date(parseInt(endTime) * 1000);\n\n  const reversedNumber = parseRetreivedNumber(finalNumber)\n  const arrayFinalNumber = reversedNumber.split('');\n  const [lotteryData, setLotteryData] = useState<LotteryResponse>({\n    priceTicketInCake: '',\n    discountDivisor: '',\n    amountCollectedInCake: '',\n    cakePerBracket: [],\n    countWinnersPerBracket: [],\n    rewardsBreakdown: [],\n    status: LotteryStatus.CLAIMABLE,\n    startTime: \"123123\",\n    endTime: \"1212312312\",\n    treasuryFee: \"0\",\n    firstTicketId: \"0\",\n    lastTicketId: '0', \n    finalNumber: 1123123\n  });\n  const processedCurrentRound = useProcessLotteryResponse(lotteryData)\n\n\n\n  useEffect(() => {\n    const fetchLotteryInfo = async () => {\n      const lotteryInfo = await fetchLottery(id)\n      setLotteryData(lotteryInfo)\n    }\n\n    fetchLotteryInfo();\n  }, [id])\n\n  return (\n    data && (\n      <>\n        <StyledBox>\n          <CardBody>\n            <CardHeading>\n               {/* search */}\n              <PastLotterySearcher initialLotteryNumber={initialLotteryNumber} onSubmit={onSubmit} />\n\n              <TopLotteryCardHeading\n                valueToDisplay={[\n                  arrayFinalNumber[0], arrayFinalNumber[1], \n                  arrayFinalNumber[2], arrayFinalNumber[3], \n                  arrayFinalNumber[4], arrayFinalNumber[5], \n                 ]}\n                //  Icon={TicketRound}\n                Ic\n              >\n                {TranslateString(999, 'Winning numbers')}\n                {/* <img src=\"\" alt=\"\" /> */}\n              </TopLotteryCardHeading>\n              <Dflex>\n                <Text fontSize=\"24px\" fontWeight=\"500\" color=\"textSubtle\">\n                  {TranslateString(722, 'Total Pot:')}\n                </Text>\n                <BoxLucky>\n                  <IconWrapper>\n                    <img width=\"75px\" alt=\"\" src=\"/images/icon-logo-y.png\" />\n                  </IconWrapper>\n                  <Heading style={{ textShadow: 'rgb(255 214 0) 0px 0px 25px', fontSize: '44' }} size=\"lg\">\n                    {getBalanceNumber(new BigNumber(amountCollectedInCake))} <span>LUCKY</span>\n                  </Heading>\n                </BoxLucky>\n                <Dollar>{lotteryPrizeAmountBusd !== 0 && <CardBusdValue value={lotteryPrizeAmountBusd} />}</Dollar>\n              </Dflex>\n            </CardHeading>\n          </CardBody>\n          <BoxCard>\n            <TopCard>\n              <RoundPrize>\n                Round #{id}\n              </RoundPrize>\n              <Timest timeValue={endDate} />\n            </TopCard>\n            \n            <CardFooter className=\"no-border\">\n              { processedCurrentRound.isLoading === false && (\n                <PrizeGrid\n                lotteryData={processedCurrentRound}\n                />\n              )}\n              {/* <PastLotteryActions contractLink={contractLink} lotteryNumber={lotteryNumber} /> */}\n            </CardFooter>\n          </BoxCard>\n        \n        </StyledBox>\n\n        <PastLotteryActions contractLink='https://testnet.bscscan.com/address/0x3e743ABbc0B7d23Cd6b83af54b0DE87743c145E5#readContract'\n         lotteryNumber={parseInt(id)} />\n      </>\n    )\n  )\n}\n\nexport default PastRoundCardDetails\n","import React from 'react'\nimport styled from 'styled-components'\n// import { Card } from '@luckyswap/uikit'\nimport { LotteryRoundGraphEntity} from 'state/types'\nimport PastRoundCardError from './PastRoundCardError'\nimport PastRoundCardDetails from './PastRoundCardDetails'\n\ninterface PastRoundCardProps {\n  error: {\n    message: string\n  }\n  data: LotteryRoundGraphEntity\n  initialLotteryNumber: number\n  onSubmit: (num: number) => void\n}\n\nconst PastRoundCard: React.FC<PastRoundCardProps> = ({ error, data, initialLotteryNumber, onSubmit }) => {\n  return (\n    <FullWidth>{error.message ? <PastRoundCardError error={error} /> \n    : <PastRoundCardDetails data={data}\n    initialLotteryNumber={initialLotteryNumber} \n    onSubmit={onSubmit} />}</FullWidth>\n  )\n}\n\nconst FullWidth = styled.div`\n  width: 100%;\n  background: linear-gradient(45deg, rgb(35 35 35) 30%, rgb(45 45 45) 100%);\n  box-shadow: none;\n  display: block;\n  margin-bottom: 20px;\n  border-radius: 14px;\n\n  @media (min-width: 991px) {\n    margin-bottom: 30px;\n  }\n`\n\nexport default PastRoundCard\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Loading: React.FC = () => <StyledLoading />\n\nconst StyledLoading = styled.div`\n  border: 8px solid #f3f3f3;\n  border-radius: 50%;\n  border-top: 8px solid #ddd;\n  border-bottom: 8px solid #ddd;\n  width: 20px;\n  height: 20px;\n  -webkit-animation: spin 2s linear infinite;\n  animation: spin 2s linear infinite;\n  @-webkit-keyframes spin {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`\n\nexport default Loading\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody } from '@luckyswap/uikit'\nimport getLotteryRoundData from 'utils/getLotteryRoundData'\nimport useI18n from 'hooks/useI18n'\nimport useGetRecentLotteryRoundData from 'hooks/useGetRecentLotteryRoundData'\nimport { useGetCurrentLotteryId, useGetLotteriesGraphData } from 'state/hooks'\nimport PastLotterySearcher from './PastLotterySearcher'\nimport PastRoundCard from './PastRoundCard'\nimport Loading from '../Loading'\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledCardBody = styled(CardBody)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 552px; // height of final card\n`\n\nconst PastLotteryRoundViewer = () => {\n  const [state, setState] = useState({\n    roundData: null,\n    error: { message: null, type: null },\n    isInitialized: false,\n    isLoading: true,\n  })\n  const TranslateString = useI18n()\n  const { roundData, error, isInitialized, isLoading } = state\n\n  const currentLotteryId = useGetCurrentLotteryId();\n  const lotteries = useGetLotteriesGraphData();\n\n  useEffect(() => {\n    if (lotteries && currentLotteryId) {\n      setState((prevState) => ({\n         ...prevState, \n         isLoading: false, \n         isInitialized: true, \n         roundData: lotteries[parseInt(currentLotteryId)-2] \n        }))\n    }\n  }, [lotteries, currentLotteryId])\n\n  const handleSubmit = async (lotteryNumber: number) => {\n    setState((prevState) => ({\n      ...prevState,\n      isLoading: true,\n    }))\n    if (lotteryNumber > parseInt(currentLotteryId) || lotteryNumber <= 0){\n      setState((prevState) => ({\n        ...prevState,\n        error: {\n          message: TranslateString(1076, 'The lottery number you provided does not exist'),\n          type: 'out of range',\n        },\n        isLoading: false,\n        isInitialized: true,\n      }))\n    }\n    else {\n      setState((prevState) => ({\n        ...prevState,\n        error: { message: null, type: null },\n        roundData: lotteries[lotteryNumber-1],\n        isLoading: false,\n        isInitialized: true,\n      }))\n    }\n  }\n\n  return (\n    <Wrapper>\n      {parseInt(currentLotteryId)>=2 && ( // have past round\n      <div>\n        {(!isInitialized || isLoading) ? ( \n        <Card>\n          <StyledCardBody>\n            <Loading />\n          </StyledCardBody>\n        </Card>\n      ) : (\n        <PastRoundCard initialLotteryNumber={parseInt(currentLotteryId)-1} onSubmit={handleSubmit} error={error} data={roundData} />\n      )}\n      </div>\n    )}\n      {/* <PastLotterySearcher initialLotteryNumber={mostRecentLotteryNumber} onSubmit={handleSubmit} /> */}\n      \n    </Wrapper>\n  )\n}\n\nexport default PastLotteryRoundViewer\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { ButtonMenu, ButtonMenuItem } from '@luckyswap/uikit'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport { getLotteryIssueIndex } from 'utils/lotteryUtils'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { useLottery, useContract } from 'hooks/useContract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { useActiveWeb3React } from 'hooks'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { BASE_API_ADMIN, BASE_API_ADMIN_PRO } from 'config'\nimport { useFetchLottery } from 'state/hooks'\nimport Hero from './components/Hero'\nimport WinningNumbers from './components/WinningNumbers'\nimport TotalPrizesCard from './components/TotalPrizesCard'\nimport YourPrizesCard from './components/YourPrizesCard'\nimport UnlockWalletCard from './components/UnlockWalletCard'\nimport TicketCard from './components/TicketCard'\nimport HowItWorks from './components/HowItWorks'\nimport PastLotteryRoundViewer from './components/PastLotteryRoundViewer'\n// import { BaseLayout } from '@luckyswap/uikit'\nimport PastDrawsHistoryCard from './components/PastDrawsHistory/PastDrawsHistoryCard'\nimport Divider from './components/Divider'\nimport NextDrawPage from './NextDrawPage'\nimport PastDrawsPage from './PastDrawsPage'\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 32px;\n`\n\nconst SecondCardColumnWrapper = styled.div<{ isAWin?: boolean, account?:any }>`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 40px;\n  margin-bottom: 30px;\n\n  @media (min-width: 991px) {\n    grid-template-columns: ${(props) => props.account ? \"1fr 1fr\" : \"unset\"};\n  }\n`\n\nconst Dflex = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 40px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n  margin-bottom: 30px;\n`\n\nconst BoxImg = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    width: 100%;\n    max-width: 750px;\n  }\n`\n\n\nconst Lottery: React.FC = () => {\n  useFetchLottery()\n  const { chainId } = useActiveWeb3React();\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n\n  const TranslateString = useI18n()\n  const [activeIndex, setActiveIndex] = useState(0)\n  const [historyData, setHistoryData] = useState([])\n  const [historyError, setHistoryError] = useState(false)\n  const [currentLotteryNumber, setCurrentLotteryNumber] = useState(0)\n  const [mostRecentLotteryNumber, setMostRecentLotteryNumber] = useState(null)\n\n  const { account } = useWeb3React()\n  const { claimAmount } = useTotalClaim()\n  const winnings = getBalanceNumber(claimAmount)\n  const isAWin = winnings > 0\n\n  const url = chainId === 56 ? BASE_API_ADMIN_PRO : BASE_API_ADMIN\n\n  useEffect(() => {\n    fetch(`${url}/lotteries/history`)\n      .then((response) => response.json())\n      .then((data) => {\n        data.sort((a, b) => a.lotteryNumber > b.lotteryNumber ? -1 : 1)\n        setHistoryData(data)}\n        )\n      \n      .catch(() => {\n        setHistoryError(true)\n      })\n  }, [url])\n\n  useEffect(() => {\n    const getInitialLotteryIndex = async () => {\n      const index = await getLotteryIssueIndex(lotteryContract)\n      const previousLotteryNumber = index - 1\n\n      setCurrentLotteryNumber(index)\n      setMostRecentLotteryNumber(previousLotteryNumber)\n    }\n\n    if (lotteryContract) {\n      getInitialLotteryIndex()\n    }\n  }, [lotteryContract])\n\n  const handleClick = (index) => {\n    setActiveIndex(index)\n  }\n\n  return (\n    <>\n      <Page>\n        {/* <BoxImg>\n          <img src=\"../images/coming-soon-lot.png\" alt=\"\"/>\n        </BoxImg> */}\n        <Hero />\n        <TotalPrizesCard />\n        <SecondCardColumnWrapper account={account} isAWin={isAWin}>\n          {!account ? (\n            <UnlockWalletCard />\n          ) : (\n            <>\n              <TicketCard isSecondCard={isAWin} />\n              <YourPrizesCard />\n            </>\n          )}\n        </SecondCardColumnWrapper>\n        <WinningNumbers />\n        <HowItWorks />\n        <PastLotteryDataContext.Provider\n          value={{ historyError, historyData, mostRecentLotteryNumber, currentLotteryNumber }}\n        >\n          <PastLotteryRoundViewer />\n          {/* <PastDrawsHistoryCard /> */}\n        </PastLotteryDataContext.Provider>\n\n        {/* <Wrapper>\n          <ButtonMenu activeIndex={activeIndex} onItemClick={handleClick} scale=\"sm\" variant=\"subtle\">\n            <ButtonMenuItem>{TranslateString(716, 'Next draw')}</ButtonMenuItem>\n            <ButtonMenuItem>{TranslateString(718, 'Past draws')}</ButtonMenuItem>\n          </ButtonMenu>\n        </Wrapper>\n        <Divider />\n        <PastLotteryDataContext.Provider\n          value={{ historyError, historyData, mostRecentLotteryNumber, currentLotteryNumber }}\n        >\n          {activeIndex === 0 ? <NextDrawPage /> : <PastDrawsPage />}\n        </PastLotteryDataContext.Provider> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Lottery\n"],"sourceRoot":""}