{"version":3,"sources":["hooks/useGetWalletNfts.ts","views/Collectibles/components/NftGrid.tsx","views/Collectibles/components/NftCard/BunnySpecialCard.tsx","views/Collectibles/components/NftList.tsx","views/Collectibles/index.tsx"],"names":["pancakeRabbitsContract","getPancakeRabbitContract","initialState","isLoading","nfts","lastUpdated","Date","now","reducer","state","action","type","data","timestamp","useGetWalletNfts","useReducer","dispatch","account","useWeb3React","useEffect","a","methods","balanceOf","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","getBunnyId","tokenURI","tokenId","makeBatchRequest","bunnyId","tokenUri","Number","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","tokenIds","fetchNfts","refresh","NftGrid","styled","div","theme","mediaQueries","sm","md","BunnySpeciaCard","nft","props","useState","isClaimable","setIsClaimable","bunnySpecialContract","useBunnySpecialContract","canClaimSingle","fetchClaimStatus","NftCard","canClaim","onClaim","mintNFT","send","from","nftComponents","10","11","12","EasterNftCard","13","14","NftList","nftTokenIds","orderBy","map","Card","name","StyledHero","Collectibles","TranslateString","useI18n","Page","as","size","color"],"mappings":"0NAKMA,EAAyBC,cAiBzBC,EAAsB,CAC1BC,WAAW,EACXC,KAAM,GACNC,YAAaC,KAAKC,OAGdC,EAAU,SAACC,EAAcC,GAC7B,OAAQA,EAAOC,MACb,IAAK,WACH,OAAO,2BACFT,GADL,IAEEC,WAAW,EACXC,KAAMM,EAAOE,OAEjB,IAAK,UACH,OAAO,2BACFV,GADL,IAEEG,YAAaK,EAAOG,YAExB,IAAK,QACH,OAAO,2BACFX,GADL,IAEEC,WAAW,IAEf,QACE,OAAOM,IAuEEK,IAnEU,WAAO,IAAD,EACHC,qBAAWP,EAASN,GADjB,mBACtBO,EADsB,KACfO,EADe,KAErBC,EAAYC,cAAZD,QACAZ,EAAgBI,EAAhBJ,YAERc,qBAAU,WAoDJF,GAnDW,uCAAG,sCAAAG,EAAA,+EAEUpB,EAAuBqB,QAAQC,UAAUL,GAASM,OAF5D,aAERD,EAFQ,QAIE,GAJF,iBAmBZ,IAdME,EALM,+BAAAJ,EAAA,MAKiB,WAAOK,GAAP,+BAAAL,EAAA,wEAE6BpB,EAAuBqB,QAArEK,EAFiB,EAEjBA,oBAAqBC,EAFJ,EAEIA,WAAYC,EAFhB,EAEgBA,SAFhB,SAGHF,EAAoBT,EAASQ,GAAOF,OAHjC,cAGnBM,EAHmB,gBAISC,YAAiB,CAACH,EAAWE,GAASN,KAAMK,EAASC,GAASN,OAJvE,0CAIlBQ,EAJkB,KAITC,EAJS,uBAMlB,CAACC,OAAOF,GAAUE,OAAOJ,GAAUG,IANjB,2DAQlB,MARkB,0DALjB,sDAiBNE,EAAkB,GAEfC,EAAI,EAAGA,EAAIb,EAAWa,IAC7BD,EAAgBE,KAAKZ,EAAqBW,IApBhC,iBAuBwBE,QAAQC,IAAIJ,GAvBpC,QAuBNK,EAvBM,OAyBNnC,EAAemC,EAAsBC,QAAO,SAACC,EAAOC,GACxD,IAAKA,EACH,OAAOD,EAF+D,kBAKnCC,EALmC,GAKjEX,EALiE,KAKxDF,EALwD,KAK/CG,EAL+C,KAOxE,OAAO,2BACFS,GADL,kBAEGV,EAAU,CACTC,WACAW,SAAUF,EAAMV,GAAN,sBAAqBU,EAAMV,GAASY,UAApC,CAA8Cd,IAAW,CAACA,QAGvE,IAEHb,EAAS,CAAEL,KAAM,WAAYC,KAAMR,IAzCvB,wBA4CZY,EAAS,CAAEL,KAAM,UA5CL,0DA+CdK,EAAS,CAAEL,KAAM,UA/CH,0DAAH,oDAoDbiC,KAED,CAAC3B,EAASZ,EAAaW,IAI1B,OAAO,2BAAKP,GAAZ,IAAmBoC,QAFH,kBAAM7B,EAAS,CAAEL,KAAM,UAAWE,UAAWP,KAAKC,a,4IC/FrDuC,EAhBCC,UAAOC,IAAV,uQAOT,qBAAGC,MAAkBC,aAAaC,MAIlC,qBAAGF,MAAkBC,aAAaE,M,uECkBvBC,EAxBiC,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,IAAKjD,EAA4B,EAA5BA,YAAgBkD,EAAY,uCAC5CC,oBAAS,GADmC,mBAC3EC,EAD2E,KAC9DC,EAD8D,KAE1EzC,EAAYC,cAAZD,QACF0C,EAAuBC,cACrB7B,EAAYuB,EAAZvB,QAiBR,OAXAZ,qBAAU,WAMJF,GALkB,uCAAG,4BAAAG,EAAA,sEACMuC,EAAqBtC,QAAQwC,eAAe5C,EAASc,GAASR,OADpE,OACjBsC,EADiB,OAEvBH,EAAeG,GAFQ,2CAAH,oDAMpBC,KAED,CAAC7C,EAASc,EAAS1B,EAAasD,EAAsBD,IAElD,cAACK,EAAA,EAAD,yBAAST,IAAKA,EAAKjD,YAAaA,GAAiBkD,GAAjD,IAAwDS,SAAUP,EAAaQ,QAflE,WAClB,OAAON,EAAqBtC,QAAQ6C,QAAQnC,GAASoC,KAAK,CAAEC,KAAMnD,S,SCAhEoD,EAAgB,CACpBC,GAAIjB,EACJkB,GAAIlB,EACJmB,GAAIC,IACJC,GAAID,IACJE,GAAIF,KAsBSG,EAnBC,WAAO,IAAD,EACgC9D,cAAtC+D,EADM,EACZzE,KAAmByC,EADP,EACOA,QAASxC,EADhB,EACgBA,YAEpC,OACE,cAAC,EAAD,UACGyE,IAAQ1E,IAAM,aAAa2E,KAAI,SAACzB,GAC/B,IAAMX,EAAWkC,EAAYvB,EAAIvB,SAAW8C,EAAYvB,EAAIvB,SAASY,SAAW,GAC1EqC,EAAOX,EAAcf,EAAIvB,UAAYgC,IAE3C,OACE,8BACE,cAACiB,EAAD,CAAM1B,IAAKA,EAAKX,SAAUA,EAAUE,QAASA,EAASxC,YAAaA,KAD3DiD,EAAI2B,YCzBlBC,EAAanC,UAAOC,IAAV,kHAqBDmC,UAfM,WACnB,IAAMC,EAAkBC,cAExB,OACE,eAACC,EAAA,EAAD,WACE,cAACJ,EAAD,UACE,cAAC,IAAD,CAASK,GAAG,KAAKC,KAAK,MAAMC,MAAM,YAAlC,SACGL,EAAgB,IAAK,4BAG1B,cAAC,EAAD","file":"static/js/16.98a75448.chunk.js","sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { useEffect, useReducer } from 'react'\nimport { getPancakeRabbitContract } from 'utils/contractHelpers'\nimport makeBatchRequest from 'utils/makeBatchRequest'\n\nconst pancakeRabbitsContract = getPancakeRabbitContract()\n\nexport type NftMap = {\n  [key: number]: {\n    tokenUri: string\n    tokenIds: number[]\n  }\n}\n\ntype Action = { type: 'set_nfts'; data: NftMap } | { type: 'reset' } | { type: 'refresh'; timestamp: number }\n\ntype State = {\n  isLoading: boolean\n  nfts: NftMap\n  lastUpdated: number\n}\n\nconst initialState: State = {\n  isLoading: true,\n  nfts: {},\n  lastUpdated: Date.now(),\n}\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'set_nfts':\n      return {\n        ...initialState,\n        isLoading: false,\n        nfts: action.data,\n      }\n    case 'refresh':\n      return {\n        ...initialState,\n        lastUpdated: action.timestamp,\n      }\n    case 'reset':\n      return {\n        ...initialState,\n        isLoading: false,\n      }\n    default:\n      return state\n  }\n}\n\nconst useGetWalletNfts = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWeb3React()\n  const { lastUpdated } = state\n\n  useEffect(() => {\n    const fetchNfts = async () => {\n      try {\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\n\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const { tokenOfOwnerByIndex, getBunnyId, tokenURI } = pancakeRabbitsContract.methods\n              const tokenId = await tokenOfOwnerByIndex(account, index).call()\n              const [bunnyId, tokenUri] = await makeBatchRequest([getBunnyId(tokenId).call, tokenURI(tokenId).call])\n\n              return [Number(bunnyId), Number(tokenId), tokenUri]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          const nfts: NftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [bunnyId, tokenId, tokenUri] = association\n\n            return {\n              ...accum,\n              [bunnyId]: {\n                tokenUri,\n                tokenIds: accum[bunnyId] ? [...accum[bunnyId].tokenIds, tokenId] : [tokenId],\n              },\n            }\n          }, {})\n\n          dispatch({ type: 'set_nfts', data: nfts })\n        } else {\n          // Reset it in case of wallet change\n          dispatch({ type: 'reset' })\n        }\n      } catch (error) {\n        dispatch({ type: 'reset' })\n      }\n    }\n\n    if (account) {\n      fetchNfts()\n    }\n  }, [account, lastUpdated, dispatch])\n\n  const refresh = () => dispatch({ type: 'refresh', timestamp: Date.now() })\n\n  return { ...state, refresh }\n}\n\nexport default useGetWalletNfts\n","import styled from 'styled-components'\n\nconst NftGrid = styled.div`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`\n\nexport default NftGrid\n","import React, { useEffect, useState } from 'react'\nimport { PromiEvent } from 'web3-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useBunnySpecialContract } from 'hooks/useContract'\nimport NftCard, { NftCardProps } from './index'\n\nconst BunnySpeciaCard: React.FC<NftCardProps> = ({ nft, lastUpdated, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const bunnySpecialContract = useBunnySpecialContract()\n  const { bunnyId } = nft\n\n  const handleClaim = (): PromiEvent<Contract> => {\n    return bunnySpecialContract.methods.mintNFT(bunnyId).send({ from: account })\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaimSingle = await bunnySpecialContract.methods.canClaimSingle(account, bunnyId).call()\n      setIsClaimable(canClaimSingle)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, bunnyId, lastUpdated, bunnySpecialContract, setIsClaimable])\n\n  return <NftCard nft={nft} lastUpdated={lastUpdated} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default BunnySpeciaCard\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/nfts'\nimport useGetWalletNfts from 'hooks/useGetWalletNfts'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\nimport BunnySpeciaCard from './NftCard/BunnySpecialCard'\nimport EasterNftCard from './NftCard/EasterNftCard'\n\n/**\n * A map of bunnyIds to special campaigns (NFT distribution)\n * Each NftCard is responsible for checking it's own claim status\n *\n */\nconst nftComponents = {\n  10: BunnySpeciaCard,\n  11: BunnySpeciaCard,\n  12: EasterNftCard,\n  13: EasterNftCard,\n  14: EasterNftCard,\n}\n\nconst NftList = () => {\n  const { nfts: nftTokenIds, refresh, lastUpdated } = useGetWalletNfts()\n\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => {\n        const tokenIds = nftTokenIds[nft.bunnyId] ? nftTokenIds[nft.bunnyId].tokenIds : []\n        const Card = nftComponents[nft.bunnyId] || NftCard\n\n        return (\n          <div key={nft.name}>\n            <Card nft={nft} tokenIds={tokenIds} refresh={refresh} lastUpdated={lastUpdated} />\n          </div>\n        )\n      })}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@beswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport NftList from './components/NftList'\n\nconst StyledHero = styled.div`\n  border-bottom: 2px solid #f88520;\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Collectibles = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <StyledHero>\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\">\n          {TranslateString(999, 'Pancake Collectibles')}\n        </Heading>\n      </StyledHero>\n      <NftList />\n    </Page>\n  )\n}\n\nexport default Collectibles\n"],"sourceRoot":""}