{"version":3,"sources":["hooks/useTickets.ts","utils/lotteryUtils.ts","views/Lottery/Lottery.tsx"],"names":["useTotalRewards","useState","BigNumber","rewards","setRewards","fastRefresh","useRefresh","lotteryContract","useContract","getLotteryAddress","lotteryAbi","useEffect","a","getTotalRewards","res","toString","fetchBalance","useTotalClaim","claimAmount","setClaimAmount","claimLoading","setClaimLoading","account","useWeb3React","ticketsContract","getLotteryTicketAddress","lotteryTicketAbi","useCallback","getTotalClaim","claim","useWinningNumbers","winningNumbers","setWinningNumbers","getWinningNumbers","useMatchingRewardLength","numbers","matchingNumbers","setMatchingNumbers","getMatchingRewardLength","matchedNumbaers","useTickets","lotteryNumber","tickets","setTickets","getTickets","multiCall","abi","calls","getChainId","chainId","web3","getWeb3NoAccount","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","length","i","newCalls","slice","calldata","map","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","concat","index","decodeFunctionResult","multiBuy","price","numbersList","times","pow","then","tx","transactionHash","console","error","customLotteryNum","issueIndex","balanceOf","catch","log","calls1","Array","apply","address","ticketAbi","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","push","calls3","getTicketsAmount","multiClaim","claimedStatus","unClaimedIds","filter","finalTokenIds","r","getLotteryStatus","drawed","calls4","reduce","p","c","sum","getMax","maxNumber","getLotteryIssueIndex","matchNumber","historyAmount","amount","div","LOTTERY_TICKET_PRICE","toNumber","parseInt","historyNumbers","BoxImg","styled","Lottery","useI18n","setHistoryData","setHistoryError","setCurrentLotteryNumber","setMostRecentLotteryNumber","getBalanceNumber","fetch","response","json","data","previousLotteryNumber","getInitialLotteryIndex","Page","src","alt"],"mappings":"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","file":"static/js/18.c8a89935.chunk.js","sourcesContent":["import { useCallback, useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useContract, useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport lotteryTicketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport useRefresh from './useRefresh'\nimport {\n  getTotalRewards,\n  getTotalClaim,\n  getMatchingRewardLength,\n  getWinningNumbers,\n  getTickets,\n} from '../utils/lotteryUtils'\n\nconst useTickets = (lotteryNumber = null) => {\n  const [tickets, setTickets] = useState([])\n  const { account } = useWeb3React()\n  const ticketsContract = useContract(getLotteryTicketAddress(), lotteryTicketAbi)\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\n\n  return tickets\n}\n\nexport const useTotalRewards = () => {\n  const [rewards, setRewards] = useState(new BigNumber(0))\n  const { fastRefresh } = useRefresh()\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTotalRewards(lotteryContract)\n\n      setRewards(new BigNumber(res.toString()))\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, fastRefresh])\n  return rewards\n}\n\nexport const useTotalClaim = () => {\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\n  const [claimLoading, setClaimLoading] = useState(false)\n  const { account } = useWeb3React()\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  const ticketsContract = useContract(getLotteryTicketAddress(), lotteryTicketAbi)\n\n  const fetchBalance = useCallback(async () => {\n    setClaimLoading(true)\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\n    setClaimAmount(claim)\n    setClaimLoading(false)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, lotteryContract, ticketsContract])\n\n  useEffect(() => {\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, fetchBalance, lotteryContract, ticketsContract])\n  return { claimLoading, claimAmount }\n}\n\nexport const useWinningNumbers = () => {\n  const [winningNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rewards = await getWinningNumbers(lotteryContract)\n      setWinningNumbers(rewards)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\n\n  return winningNumbers\n}\n\nexport const useMatchingRewardLength = (numbers) => {\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const matchedNumbaers = await getMatchingRewardLength(lotteryContract, numbers)\n\n      setMatchingNumbers(matchedNumbaers)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, numbers, fastRefresh])\n  return matchingNumbers\n}\n\nexport default useTickets\n","/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3NoAccount } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { LOTTERY_TICKET_PRICE } from 'config'\nimport { AbiItem } from 'web3-utils'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport { getMulticallAddress } from './addressHelpers'\nimport { getChainId } from './web3React'\n\nexport const multiCall = async (abi, calls) => {\n  const chainId = await getChainId()\n  const web3 = getWeb3NoAccount(chainId)\n  const multi = new web3.eth.Contract(MultiCallAbi as unknown as AbiItem, getMulticallAddress(chainId))\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\n      .then((tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIndex = customLotteryNum || (await lotteryContract.issueIndex())\n\n  const length = await ticketsContract.balanceOf(account).catch((error) => console.log('length error : ', error))\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (ticketIssue.toString() === issueIndex.toString()) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n  return tickets\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.balanceOf(account).catch((error) => console.log('ticket amount : ', error))\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.issueIndex()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finalTokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finalTokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finalTokenIds.length > 200) {\n    finalTokenIds = finalTokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.multiClaim(finalTokenIds)\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIndex = await lotteryContract.issueIndex()\n    const length = await getTicketsAmount(ticketsContract, account)\n    // eslint-disable-next-line prefer-spread\n    const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n      ticketsContract.address,\n      'tokenOfOwnerByIndex',\n      [account, i],\n    ])\n    const res = await multiCall(ticketAbi, calls1)\n    const tokenIds = res.map((id) => id.toString())\n    const calls2 = tokenIds.map((id) => [ticketsContract.address, 'getLotteryIssueIndex', [id]])\n    const ticketIssues = await multiCall(ticketAbi, calls2)\n    const calls3 = tokenIds.map((id) => [ticketsContract.address, 'getClaimStatus', [id]])\n    const claimedStatus = await multiCall(ticketAbi, calls3)\n\n    const drawed = await getLotteryStatus(lotteryContract)\n\n    const finalTokenIds = []\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIndex) {\n      } else if (!claimedStatus[i][0]) {\n        finalTokenIds.push(tokenIds[i])\n      }\n    })\n\n    const calls4 = finalTokenIds.map((id) => [lotteryContract.address, 'getRewardView', [id]])\n\n    const rewards = await multiCall(lotteryAbi, calls4)\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), new BigNumber(0))\n\n    return claim\n  } catch (err) {\n    console.error(err)\n  }\n  return new BigNumber(0)\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.issueIndex()\n  return lotteryContract.getTotalRewards(issueIndex)\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.maxNumber()\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.issueIndex()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.drawed()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIndex = await lotteryContract.issueIndex()\n  const drawed = await lotteryContract.drawed()\n  if (!drawed) {\n    issueIndex -= 1\n  }\n  try {\n    const amount = await lotteryContract.historyAmount(issueIndex, 5 - matchNumber)\n    return new BigNumber(amount.toString()).div(new BigNumber(10).pow(18)).div(LOTTERY_TICKET_PRICE).toNumber()\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.issueIndex()\n  const numbers = []\n  const drawed = await lotteryContract.drawed()\n\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.historyNumbers(issueIndex - 1, i)).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.winningNumbers(i)).toString())\n    }\n  }\n  return numbers\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { ButtonMenu, ButtonMenuItem } from '@luckyswap/uikit'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport { getLotteryIssueIndex } from 'utils/lotteryUtils'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { useLottery, useContract } from 'hooks/useContract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport lotteryAbi from 'config/abi/lottery.json'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport Hero from './components/Hero'\nimport WinningNumbers from './components/WinningNumbers'\nimport TotalPrizesCard from './components/TotalPrizesCard'\nimport YourPrizesCard from './components/YourPrizesCard'\nimport UnlockWalletCard from './components/UnlockWalletCard'\nimport TicketCard from './components/TicketCard'\nimport HowItWorks from './components/HowItWorks'\nimport PastLotteryRoundViewer from './components/PastLotteryRoundViewer'\n// import { BaseLayout } from '@luckyswap/uikit'\nimport PastDrawsHistoryCard from './components/PastDrawsHistory/PastDrawsHistoryCard'\nimport Divider from './components/Divider'\nimport NextDrawPage from './NextDrawPage'\nimport PastDrawsPage from './PastDrawsPage'\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 32px;\n`\n\nconst SecondCardColumnWrapper = styled.div<{ isAWin?: boolean }>`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 40px;\n  margin-bottom: 30px;\n\n  @media (min-width: 991px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`\n\nconst Dflex = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 40px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n  margin-bottom: 30px;\n`\n\nconst BoxImg = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    width: 100%;\n    max-width: 750px;\n  }\n`\n\nconst Lottery: React.FC = () => {\n  const lotteryContract = useContract(getLotteryAddress(), lotteryAbi)\n\n  const TranslateString = useI18n()\n  const [activeIndex, setActiveIndex] = useState(0)\n  const [historyData, setHistoryData] = useState([])\n  const [historyError, setHistoryError] = useState(false)\n  const [currentLotteryNumber, setCurrentLotteryNumber] = useState(0)\n  const [mostRecentLotteryNumber, setMostRecentLotteryNumber] = useState(1)\n\n  const { account } = useWeb3React()\n  const { claimAmount } = useTotalClaim()\n  const winnings = getBalanceNumber(claimAmount)\n  const isAWin = winnings > 0\n\n  useEffect(() => {\n    fetch(`https://api.pancakeswap.com/api/lotteryHistory`)\n      .then((response) => response.json())\n      .then((data) => setHistoryData(data))\n      .catch(() => {\n        setHistoryError(true)\n      })\n  }, [])\n\n  useEffect(() => {\n    const getInitialLotteryIndex = async () => {\n      const index = await getLotteryIssueIndex(lotteryContract)\n      const previousLotteryNumber = index - 1\n\n      setCurrentLotteryNumber(index)\n      setMostRecentLotteryNumber(previousLotteryNumber)\n    }\n\n    if (lotteryContract) {\n      getInitialLotteryIndex()\n    }\n  }, [lotteryContract])\n\n  const handleClick = (index) => {\n    setActiveIndex(index)\n  }\n\n  return (\n    <>\n      <Page>\n        <BoxImg>\n          <img src=\"../images/coming-soon-lot.png\" alt=\"\"/>\n        </BoxImg>\n        {/* <Hero />\n        <TotalPrizesCard />\n        <SecondCardColumnWrapper isAWin={isAWin}>\n          {!account ? (\n            <UnlockWalletCard />\n          ) : (\n            <>\n              <TicketCard isSecondCard={isAWin} />\n              <YourPrizesCard />\n            </>\n          )}\n        </SecondCardColumnWrapper>\n        <WinningNumbers />\n        <HowItWorks />\n        <PastLotteryRoundViewer />\n        <PastDrawsHistoryCard /> */}\n\n        {/* <Wrapper>\n          <ButtonMenu activeIndex={activeIndex} onItemClick={handleClick} scale=\"sm\" variant=\"subtle\">\n            <ButtonMenuItem>{TranslateString(716, 'Next draw')}</ButtonMenuItem>\n            <ButtonMenuItem>{TranslateString(718, 'Past draws')}</ButtonMenuItem>\n          </ButtonMenu>\n        </Wrapper>\n        <Divider />\n        <PastLotteryDataContext.Provider\n          value={{ historyError, historyData, mostRecentLotteryNumber, currentLotteryNumber }}\n        >\n          {activeIndex === 0 ? <NextDrawPage /> : <PastDrawsPage />}\n        </PastLotteryDataContext.Provider> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Lottery\n"],"sourceRoot":""}