{"version":3,"sources":["views/Staking/Components/NavBar.tsx","state/poolsNft/fetchPoolInfo.ts","services/index.ts","services/StakingNftService.ts","views/Staking/Components/Alert.tsx","views/Staking/Components/CardToken.tsx","views/Staking/Components/ModalSubmit.tsx","views/Staking/MyCollection.tsx","views/Staking/Components/CardPending.tsx","views/Staking/Pending.tsx","utils/array.ts","hooks/useRewardFee.ts","utils/date.ts","views/Staking/Components/CardStaking.tsx","views/Staking/Components/ConfirmWithdrawModalBottom.tsx","views/Staking/Staked.tsx","state/poolsNft/hooks.ts","hooks/useHarvestCallback.ts","views/Staking/Components/ConfirmStakeModalBottom.tsx","views/Staking/Components/CardApproved.tsx","hooks/useApproveNFTCallback.ts","views/Staking/Unstaked.tsx","views/Staking/WrapPoolsContract.tsx","views/Staking/index.tsx"],"names":["NavBar","activeTab","toggle","BoxNav","Nav","tabs","LeftItem","NavItem","NavLink","className","classnames","active","onClick","RightItem","styled","div","abi","inputs","internalType","name","type","outputs","stateMutability","fetchNftUser","account","a","fetch","then","response","json","data","result","map","item","tokenID","parseInt","contractAddress","getAddress","catch","error","Promise","resolve","NFT_SITES","WHITELIST_URLS","getInfoFromLucky","uri","image","getInfoFromAirNFT","axios","get","nft","urlCompressed","description","console","log","getInfoFromBRNFT","getInfoFromBakery","getInfoFromURI","tokensInfo","all","token","getTokensURI","tokens","calls","t","address","params","multicallv2","requireSuccess","uris","flat","getAdditionalInfoNFTs","index","info","excludeExistedTokens","userTokens","existedTokens","i","length","existed","j","push","excludeSoldTokens","Map","key","to","set","addAdditionalInfoNFTs","AdditionalInfoNFTs","Object","assign","stakingNftService","options","restConnector","this","urlToken","post","Error","patch","status","create","baseURL","getNotificationStyle","success","color","border","backgroundColor","warning","open","message","duration","notification","style","BoxCenter","Figure","Launchers","BoxFooter","Space","button","Ticket","h2","h3","CardNFT","onRegister","Col","sm","md","src","alt","getCompactString","str","sepLen","strLen","slice","ModalSubmit","props","isShowModalSubmit","setShowModalSubmit","onSubmit","formRef","title","visible","onCancel","footer","width","ref","onFinish","fields","value","marginBottom","marginRight","Item","validateTrigger","borderRadius","overflow","disabled","placeholder","display","justifyContent","htmlType","MyCollection","setMyTokens","useRef","isInitial","useState","useActiveWeb3React","setTokens","tokenSelected","setTokenSelected","useEffect","getUserTokens","fetchNFTUser","getAllTokensId","notSoldTokens","notUsedTokens","fullInfoTokens","current","registerStakingToken","prevTokens","filter","registerHandler","Row","PendingToken","Pending","pendingTokens","setPendingTokens","fetchPendingTokens","getPendingTokens","foundNFT","arr","findNFT","useRewardFee","rewardFee","setRewardFee","stakingNftContract","useStakingNFTContract","FEE_WITHDRAW","toNumber","Btn","Title","Dflex","Number","CardStaking","pendingReward","onHarvest","onConfirmWithdraw","isTxPending","createdAt","data-heading","ConfirmWithdrawModalBottom","currency","depositAmount","rewardAmount","onWithdraw","harvestFee","fee","CurrencyAmount","fromRawAmount","calculatePercentToJSBI","raw","CurrencyLogo","toSignificant","mt","Staked","stakingTokens","changeViewWhenWithdraw","chainId","rewardCurrenciesAmount","luckyToken","useToken","XLUCKY_ADDRESSES","formattedTokensInfo","useMemo","isAddress","sort","results","useSingleContractMultipleData","JSBI","BigInt","toString","usePendingRewards","attemptingTxn","setAttemptingTxn","txHashWithdraw","setTxHashWithdraw","isPendingWithdraw","useIsTransactionPending","isConfirmedWithdraw","useIsTransactionConfirmed","addTransaction","useTransactionAdder","showConfirm","setShowConfirm","XLUCKY_TOKEN","withdrawToken","setWithdrawToken","txHashHarvest","setTxHashHarvest","useCallback","harvest","summary","hash","useHarvestNFTCallback","harvestCallback","withdraw","handleDismissConfirmation","modalHeader","gap","marginTop","fontSize","mr","add","subtract","toFixed","small","textAlign","padding","fontStyle","modalBottom","pendingText","TransactionConfirmationModal","isOpen","onDismiss","content","topContent","bottomContent","bigNumberToJSBI","ConfirmStakeModalBottom","onStake","rateReward","CardApproved","approveState","onApprove","changeViewWhenStake","stakingNFTContract","txHashStake","setTxHashStake","spender","currentApproval","useNFTApproval","NFTContract","useNFTContract","pendingApproval","useHasPendingNFTApproval","addresses","stakingNft","approvalState","ApprovalState","PENDING","NOT_APPROVED","APPROVED","UNKNOWN","approve","estimateGas","estimatedGas","gasLimit","calculateGasMargin","approvalNFT","useApproveNFTCallback","approveNFTCallback","isTxStakeConfirmed","isTxStakePending","setRateReward","stakeToken","getTokenByID","getToken","stake","ethers","utils","BigNumber","from","Unstaked","approvedTokens","maxDepositAmount","useApproveCallback","approvalLucky","approveLuckyCallback","approveHandler","WrapPoolsContract","myTokens","setStakingTokens","setApprovedTokens","setMaxDepositAmount","getTokens","getAllPools","formatted","Date","owner","constants","AddressZero","max","propName","getMaxBy","getBigNumber","TabPane","tabId","prevState","now","StakingPage","StakingNft","setActiveTab","Page","tab","TabContent"],"mappings":"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","file":"static/js/25.03f70e31.chunk.js","sourcesContent":["import classnames from 'classnames'\nimport React from 'react'\nimport { Nav, NavItem, NavLink } from 'reactstrap'\nimport styled from 'styled-components'\n\ninterface NavbarProps {\n  activeTab?: any\n  toggle?: any\n}\n\nexport default function NavBar({ activeTab, toggle }: NavbarProps) {\n  return (\n    <BoxNav>\n      <Nav tabs>\n        <LeftItem>\n          <NavItem>\n            <NavLink className={classnames({ active: activeTab === '1' })} onClick={() => toggle('1')}>\n              all cards\n            </NavLink>\n          </NavItem>\n        </LeftItem>\n\n        <RightItem>\n          <NavItem>\n            <NavLink className={classnames({ active: activeTab === '1' })} onClick={() => toggle('1')}>\n              My Collection\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink className={classnames({ active: activeTab === '2' })} onClick={() => toggle('2')}>\n              Pending\n            </NavLink>\n          </NavItem>\n\n          <NavItem>\n            <NavLink className={classnames({ active: activeTab === '3' })} onClick={() => toggle('3')}>\n              unstaked\n            </NavLink>\n          </NavItem>\n\n          <NavItem>\n            <NavLink className={classnames({ active: activeTab === '4' })} onClick={() => toggle('4')}>\n              staked\n            </NavLink>\n          </NavItem>\n        </RightItem>\n      </Nav>\n    </BoxNav>\n  )\n}\n\nconst BoxNav = styled.div`\n  margin-top: 20px;\n\n  .nav-tabs {\n    // display: grid;\n    // grid-template-columns: 1fr 239px;\n    display: flex;\n    justify-content: space-between;\n    border-color: transparent;\n    border-bottom: 1px solid #ffffff8b !important;\n  }\n\n  .nav-link {\n    text-transform: capitalize;\n\n    @media (max-width: 768px) {\n      font-size: 16px;\n      white-space: nowrap;\n    }\n\n    &.active {\n      color: #f4c706 !important;\n      border-bottom: none !important;\n    }\n  }\n`\n\nconst LeftItem = styled.div``\n\nconst RightItem = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  justify-items: end;\n`\n","import { ChainId } from '@luckyswap/v2-sdk'\nimport axios from 'axios'\nimport nftAbi from 'config/abi/nft.json'\nimport stakingNftAbi from 'config/abi/StakingNft.json'\nimport addresses from 'config/constants/contracts'\nimport { getAddress } from 'ethers/lib/utils'\nimport multicall from 'utils/multicall'\nimport Web3 from 'web3'\nimport { AdditionalInfoNFT, BaseNFT, NFT } from '../../config/constants/types'\nimport { RPC_URLS } from '../../constants/index'\nimport { multicallv2 } from '../../utils/multicall'\n\nconst abi = [\n  {\n    inputs: [{ internalType: 'uint256', name: 'tokenId', type: 'uint256' }],\n    name: 'tokenURI',\n    outputs: [{ internalType: 'string', name: '', type: 'string' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n]\n\nexport const fetchUserPendingRewards = async (pools, chainId) => {\n  const calls = pools.map((p) => ({\n    address: addresses.stakingNft[chainId],\n    name: 'pendingReward',\n    params: [p.nftContract, p.tokenId],\n  }))\n\n  let pendingRewards = await multicall(stakingNftAbi, calls)\n\n  pendingRewards = pendingRewards.flat()\n\n  return pendingRewards\n}\n\nexport const fetchURIPool = async (pools, chainId) => {\n  const calls = pools.map((p) => ({\n    address: addresses.nft[chainId],\n    name: 'tokenURI',\n    params: [p.tokenId],\n  }))\n\n  let images = await multicall(nftAbi, calls)\n\n  images = images.flat()\n\n  return images\n}\n\nexport const fetchNftUser = async (account): Promise<BaseNFT[]> => {\n  if (account) {\n    return fetch(\n      `https://api-testnet.bscscan.com/api?module=account&action=tokennfttx&address=${account}&startblock=0&endblock=999999999999&sort=asc`,\n    )\n      .then((response) => response.json())\n      .then((data) =>\n        data.result.map((item) => ({\n          ...item,\n          tokenID: parseInt(item.tokenID),\n          contractAddress: getAddress(item.contractAddress),\n        })),\n      )\n      .catch((error) => {\n        return new Promise((resolve) => resolve([]))\n      })\n  }\n  return new Promise((resolve) => resolve([]))\n}\n\nexport const getImplementationFromProxy = async (contractAddress: string, chainId: ChainId) => {\n  const web3 = new Web3(RPC_URLS[chainId][0])\n  return (web3 as any).eth.getStorageAt(\n    contractAddress,\n    '0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc',\n  )\n}\n\nconst NFT_SITES = {\n  LUCKY_MARKETPLACE: 'LUCKY_MARKETPLACE',\n  AIRNFTS: 'AIRNFTS',\n  BRNFT: 'BRNFT',\n}\n\nconst WHITELIST_URLS = {\n  [getAddress('0x969a82989d9e410ed0ae36c12479552421c93eb2')]: NFT_SITES.LUCKY_MARKETPLACE,\n  [getAddress('0xF5db804101d8600c26598A1Ba465166c33CdAA4b')]: NFT_SITES.AIRNFTS,\n  [getAddress('0x1dDB2C0897daF18632662E71fdD2dbDC0eB3a9Ec')]: NFT_SITES.BRNFT,\n}\n\nconst getInfoFromLucky = async (uri): Promise<AdditionalInfoNFT> => {\n  return { image: uri }\n}\n\nconst getInfoFromAirNFT = async (uri): Promise<AdditionalInfoNFT> => {\n  try {\n    const { data } = await axios.get(uri)\n    const { urlCompressed, name, description } = (data as any)?.nft\n    return {\n      image: urlCompressed,\n      name,\n      description,\n    }\n  } catch (error) {\n    console.log('get info airnft error : ', error)\n    return null\n  }\n}\n\nconst getInfoFromBRNFT = async (uri): Promise<AdditionalInfoNFT> => {\n  try {\n    const { data } = await axios.get(uri)\n    const { name, description, image } = data\n\n    return { name, description, image }\n  } catch (error) {\n    console.log('get image brnft error : ', error)\n    return null\n  }\n}\n\nconst getInfoFromBakery = async (uri): Promise<AdditionalInfoNFT> => {\n  try {\n    const { data } = await axios.get(uri)\n    const { name, description, image } = data\n\n    return { name, description, image }\n  } catch (error) {\n    console.log('get image bakery error : ', error)\n    return null\n  }\n}\n\nexport const getInfoFromURI = async (tokensInfo: BaseNFT[]): Promise<AdditionalInfoNFT[]> => {\n  const result = await Promise.all(\n    tokensInfo.map(async (token) => {\n      switch (WHITELIST_URLS[token.contractAddress]) {\n        case NFT_SITES.LUCKY_MARKETPLACE:\n          return getInfoFromLucky(token.uri)\n        case NFT_SITES.AIRNFTS:\n          return getInfoFromAirNFT(token.uri)\n        case NFT_SITES.BRNFT:\n          return getInfoFromBRNFT(token.uri)\n        default:\n          return getInfoFromBakery(token.uri)\n      }\n    }),\n  )\n\n  return result\n}\n\nexport const getTokensURI = async (tokens: BaseNFT[]) => {\n  try {\n    const calls = tokens.map((t) => ({\n      address: t.contractAddress,\n      name: 'tokenURI',\n      params: [t.tokenID],\n    }))\n\n    let uris = await multicallv2(abi, calls, { requireSuccess: false })\n\n    uris = uris.flat()\n\n    return uris\n  } catch (error) {\n    return []\n  }\n}\n\nexport const getAdditionalInfoNFTs = async (tokens: BaseNFT[]): Promise<AdditionalInfoNFT[]> => {\n  const uris = await getTokensURI(tokens)\n\n  const tokensInfo = uris.map((uri, index) => ({\n    uri,\n    contractAddress: tokens[index].contractAddress,\n  }))\n\n  const info = await getInfoFromURI(tokensInfo)\n\n  return info\n}\n\nexport const excludeExistedTokens = (userTokens: BaseNFT[], existedTokens: BaseNFT[]): Array<any> => {\n  const result: BaseNFT[] = []\n  for (let i = 0; i < userTokens.length; i++) {\n    const token = userTokens[i]\n    let existed = false\n    for (let j = 0; j < existedTokens.length; j++) {\n      if (\n        getAddress(existedTokens[j].contractAddress) === token.contractAddress &&\n        (existedTokens[j].tokenID as any) === token.tokenID\n      ) {\n        existed = true\n        break\n      }\n    }\n\n    if (!existed) {\n      result.push(token)\n    }\n  }\n\n  return result\n}\n\nexport const getKey = (token) => {\n  return `${token.tokenID}-${token.contractAddress}`\n}\n\nexport const excludeSoldTokens = (userTokens: BaseNFT[], account: string): Array<any> => {\n  const map = new Map()\n  const result: BaseNFT[] = []\n\n  for (let i = (userTokens as any).length - 1; i >= 0; i--) {\n    const key = getKey(userTokens[i])\n\n    if (!map.get(key) && getAddress(userTokens[i].to) === account) {\n      result.push(userTokens[i])\n    }\n    map.set(key, 1)\n  }\n\n  return result\n}\n\nexport const addAdditionalInfoNFTs = async (userTokens: BaseNFT[]): Promise<NFT[]> => {\n  const AdditionalInfoNFTs = await getAdditionalInfoNFTs(userTokens)\n\n  for (let i = 0; i < (userTokens as any).length; i++) {\n    Object.assign(userTokens[i], AdditionalInfoNFTs[i])\n  }\n\n  return userTokens\n}\n","import axios from 'axios'\nimport { StakingNftService } from './StakingNftService'\n\nconst restConnector = axios.create({\n  baseURL: 'http://localhost:3004/',\n})\n\nexport const stakingNftService = new StakingNftService({ restConnector })\n","import { AxiosInstance } from 'axios'\nimport { BaseNFT, NFT } from '../config/constants/types'\n\nexport class StakingNftService {\n  private restConnector: AxiosInstance\n\n  constructor(options: { restConnector: AxiosInstance }) {\n    this.restConnector = options.restConnector\n  }\n\n  public async getAllTokens() {\n    const { data } = await this.restConnector.get('/stakingNft')\n    return data\n  }\n\n  public async getAllTokensId(): Promise<BaseNFT[]> {\n    try {\n      const { data } = await this.restConnector.get('/stakingNft/poolsId')\n      return data\n    } catch (error) {\n      return []\n    }\n  }\n\n  public async getPendingTokens() {\n    const { data } = await this.restConnector.get('/stakingNft?status=pending')\n    return data\n  }\n\n  public async getApprovedTokens() {\n    const { data } = await this.restConnector.get('/stakingNft?status=approve')\n    return data\n  }\n\n  public async getStakingTokens() {\n    const { data } = await this.restConnector.get('/stakingNft?status=staking')\n    return data\n  }\n\n  public async registerStakingToken({ name, description, urlToken, image, tokenID, contractAddress }: NFT) {\n    if (name && description && urlToken && image && tokenID && contractAddress) {\n      return this.restConnector.post('/stakingNft', {\n        name,\n        description,\n        urlToken,\n        image,\n        tokenID,\n        contractAddress,\n      })\n    }\n    throw new Error('Not have enough info token')\n  }\n\n  public async stakeToken({ tokenID, contractAddress }) {\n    return this.restConnector.patch(`/stakingNft/`, {\n      tokenID,\n      contractAddress,\n      status: 'staking',\n    })\n  }\n\n  public async getTokenByID({ tokenID, contractAddress }): Promise<any> {\n    const { data } = await this.restConnector.get(`/stakingNft?tokenID=${tokenID}&contractAddress=${contractAddress}`)\n    return data[0]\n  }\n}\n","import React from 'react'\nimport {notification } from 'antd'\n\nconst getNotificationStyle = (type) => {\n  return {\n    success: {\n      color: 'rgba(0, 0, 0, 0.65)',\n      border: '1px solid #b7eb8f',\n      backgroundColor: '#f6ffed',\n    },\n    warning: {\n      color: 'rgba(0, 0, 0, 0.65)',\n      border: '1px solid #ffe58f',\n      backgroundColor: '#fffbe6',\n    },\n    error: {\n      color: 'rgba(0, 0, 0, 0.65)',\n      border: '1px solid #ffa39e',\n      backgroundColor: '#fff1f0',\n    },\n    info: {\n      color: 'rgba(0, 0, 0, 0.65)',\n      border: '1px solid #91d5ff',\n      backgroundColor: '#e6f7ff',\n    },\n    open: {\n      color: 'rgba(0, 0, 0, 0.65)',\n      border: '1px solid #91d5ff',\n      backgroundColor: '#e6f7ff',\n    },\n  }[type]\n}\n\nexport default (\n  type,\n  { message, description, duration = 3 },\n  \n) => {\n  notification[type]({\n    message,\n    description,\n    style: getNotificationStyle(type),\n    duration,\n  })\n}\n","import { BaseNFT } from 'config/constants/types'\nimport React from 'react'\nimport { Col } from 'reactstrap'\nimport styled from 'styled-components'\nimport { NFT } from '../../../config/constants/types'\n\ninterface CardNFTProps extends NFT {\n  onRegister: any\n}\n\nconst CardNFT: React.FC<CardNFTProps> = ({\n  name,\n  description,\n  tokenID,\n  contractAddress,\n  image,\n  onRegister,\n}: CardNFTProps) => {\n  return (\n    <Col sm=\"12\" md=\"3\" className=\"align-center space-mb\">\n      <BoxCenter>\n        <Figure>\n          <img src={image} className=\"thumb\" alt=\"\" />\n          <img src=\"/images/staking/box-img.png\" alt=\"\" className=\"line-box\" />\n        </Figure>\n\n        <Launchers>\n          <img src=\"/images/staking/effect.png\" alt=\"\" />\n        </Launchers>\n\n        <BoxFooter>\n          <Space>\n            <Ticket onClick={() => onRegister({ name, description, tokenID, contractAddress, image })}>Register</Ticket>\n          </Space>\n        </BoxFooter>\n      </BoxCenter>\n    </Col>\n  )\n}\n\nconst BoxCenter = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  max-width: auto;\n\n  @media (min-width: 768px) {\n    max-width: 230px;\n  }\n`\n\nconst Figure = styled.div`\n  position: relative;\n  width: 180px;\n  height: 276px;\n  overflow: hidden;\n\n  .thumb {\n    height: inherit;\n    transform: scale(1);\n    transition: all 0.9s;\n    object-fit: cover;\n  }\n\n  .line-box {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 2;\n  }\n`\n\nconst Launchers = styled.div`\n  margin-bottom: 15px;\n`\n\nconst BoxFooter = styled.div`\n  background: #2f2f2f;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n  width: 280px;\n\n  @media (min-width: 768px) {\n    width: 100%;\n  }\n`\n\nconst Btn = styled.button`\n  background: url('../images/staking/line-button.png') no-repeat center center;\n  background-size: contain;\n  width: 100%;\n  height: 67px;\n  line-height: 67px;\n  font-size: 20px;\n  font-weight: 700;\n  text-transform: uppercase;\n  text-align: center;\n  color: #ff3b3b;\n  border: 0;\n\n  &.green-color {\n    color: #1cbb1c;\n  }\n\n  &:hover {\n    .effect-light {\n      text-align: center;\n      font-size: 1.2em;\n      color: #fff;\n      font-weight: 700;\n      text-transform: uppercase;\n      animation: blur 0.75s ease-out infinite;\n      text-shadow: 0px 0px 5px #fff, 0px 0px 7px #fff;\n    }\n  }\n\n  @keyframes blur {\n    from {\n      text-shadow: 0px 0px 10px #fff, 0px 0px 10px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff,\n        0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 50px #fff, 0px 0px 50px #fff,\n        0px 0px 50px #7b96b8, 0px 0px 150px #7b96b8, 0px 10px 100px #7b96b8, 0px 10px 100px #7b96b8,\n        0px 10px 100px #7b96b8, 0px 10px 100px #7b96b8, 0px -10px 100px #7b96b8, 0px -10px 100px #7b96b8;\n    }\n  }\n`\n\nconst Space = styled.div`\n  padding: 15px;\n`\n\nconst Title = styled.h2`\n  font-size: 16px;\n  text-transform: capitalize;\n  color: #ffffff;\n  margin-bottom: 10px;\n`\n\nconst Dflex = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  align-items: center;\n`\n\nconst Number = styled.h3`\n  color: #f4c708;\n  font-size: 24px;\n  font-family: 'Roboto Mono', monospace !important;\n  font-weight: 600;\n  position: relative;\n  transform: scale(1);\n  text-shadow: -1px 0 1px #c5a354, 0 1px 1px #e0b649, 5px 5px 10px rgb(179 167 106 / 78%),\n    -5px -5px 10px rgb(183 155 65 / 40%);\n\n  &:before {\n    content: attr(data-heading);\n    left: 0;\n    top: 0;\n    position: absolute;\n    z-index: 1;\n    background: linear-gradient(\n      to bottom,\n      #ffe047 22%,\n      #fff144 24%,\n      #cfc09f 26%,\n      #ffe686 27%,\n      #ffecb3 40%,\n      #ffe14f 78%\n    );\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    text-shadow: none;\n  }\n`\n\nconst Ticket = styled.div`\n  background: url('../images/staking/bg-button.png') no-repeat center center;\n  background-size: contain;\n  width: 100%;\n  height: 36px;\n  text-transform: uppercase;\n  text-align: center;\n  line-height: 36px;\n  font-size: 14px;\n  font-weight: 600;\n`\n\nexport default CardNFT\n","import React from 'react'\nimport { Modal, Form, Input, Button } from 'antd'\nimport { TokenKind } from 'graphql/language/tokenKind'\n\nconst getCompactString = (str: string, sepLen: number) => {\n  if (!str || typeof str !== 'string') {\n    return ''\n  }\n  const strLen = str.length || 0\n  return `${str.slice(0, sepLen)}...${str.slice(strLen - sepLen, strLen)}`\n}\n\nfunction ModalSubmit(props: any) {\n  const { isShowModalSubmit, setShowModalSubmit, onSubmit, formRef, token } = props\n\n  return (\n    <Modal\n      title=\"Submit Staking\"\n      visible={isShowModalSubmit}\n      onCancel={() => setShowModalSubmit(false)}\n      footer={null}\n      width={400}\n    >\n      <Form\n        ref={formRef}\n        onFinish={onSubmit}\n        style={{ width: '100%' }}\n        fields={[\n          {\n            name: ['tokenID'],\n            value: token?.tokenID,\n          },\n          {\n            name: ['contractAddress'],\n            value: getCompactString(token?.contractAddress, 10),\n          },\n          token?.name != null && {\n            name: ['name'],\n            value: token?.name,\n          },\n          token?.description != null && {\n            name: 'description',\n            value: token?.description,\n          },\n        ]}\n      >\n        <div style={{ marginBottom: '6px' }}>\n          Name<span style={{ color: 'red', marginRight: '4px' }}>*</span>\n        </div>\n        <Form.Item name=\"name\" validateTrigger=\"onChange\">\n          <Input\n            style={{\n              borderRadius: '16px',\n              overflow: 'hidden',\n              width: '100%',\n            }}\n            disabled={token?.name}\n            placeholder=\"Enter name card to...\"\n          />\n        </Form.Item>\n        <div style={{ marginBottom: '6px' }}>\n          Description<span style={{ color: 'red', marginRight: '4px' }}>*</span>\n        </div>\n        <Form.Item name=\"description\" validateTrigger=\"onChange\">\n          <Input\n            style={{\n              borderRadius: '16px',\n              overflow: 'hidden',\n              width: '100%',\n            }}\n            disabled={token?.description}\n            placeholder=\"Enter description to...\"\n          />\n        </Form.Item>\n        <div style={{ marginBottom: '6px' }}>\n          URL Token<span style={{ color: 'red', marginRight: '4px' }}>*</span>\n        </div>\n        <Form.Item name=\"urlToken\" validateTrigger=\"onChange\">\n          <Input\n            style={{\n              borderRadius: '16px',\n              overflow: 'hidden',\n              width: '100%',\n            }}\n            placeholder=\"Enter url token to...\"\n          />\n        </Form.Item>\n\n        <div style={{ marginBottom: '6px' }}>Token ID</div>\n        <Form.Item name=\"tokenID\" validateTrigger=\"onChange\">\n          <Input\n            style={{\n              borderRadius: '16px',\n              overflow: 'hidden',\n              width: '100%',\n            }}\n            disabled\n          />\n        </Form.Item>\n        <div style={{ marginBottom: '6px' }}>Contract Address</div>\n        <Form.Item name=\"contractAddress\" validateTrigger=\"onChange\">\n          <Input\n            style={{\n              borderRadius: '16px',\n              overflow: 'hidden',\n              width: '100%',\n            }}\n            disabled\n          />\n        </Form.Item>\n        <Form.Item>\n          <div\n            style={{\n              width: '100%',\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n          >\n            <Button htmlType=\"submit\">Submit</Button>\n          </div>\n        </Form.Item>\n      </Form>\n    </Modal>\n  )\n}\n\nexport default ModalSubmit\n","// import axios from 'axios'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Row } from 'reactstrap'\nimport { fetchNftUser as fetchNFTUser } from 'state/poolsNft/fetchPoolInfo'\nimport { NFT } from '../../config/constants/types'\nimport { useActiveWeb3React } from '../../hooks/index'\nimport { stakingNftService } from '../../services/index'\nimport { addAdditionalInfoNFTs, excludeExistedTokens, excludeSoldTokens } from '../../state/poolsNft/fetchPoolInfo'\nimport notification from './Components/Alert'\nimport CardNFT from './Components/CardToken'\nimport ModalSubmit from './Components/ModalSubmit'\n\ninterface MyCollectionProps {\n  setMyTokens?: any\n  activeTab: string\n}\n\nconst MyCollection: React.FC<MyCollectionProps> = ({ setMyTokens, activeTab }: MyCollectionProps) => {\n  const formRef = useRef()\n  const isInitial = useRef<boolean>(false)\n  const [isShowModalSubmit, setShowModalSubmit] = useState<boolean>(false)\n  const { account } = useActiveWeb3React()\n  const [tokens, setTokens] = useState<NFT[]>([])\n  const [tokenSelected, setTokenSelected] = useState<NFT>()\n\n  useEffect(() => {\n    const getUserTokens = async () => {\n      try {\n        const [userTokens, existedTokens] = await Promise.all([\n          fetchNFTUser(account),\n          stakingNftService.getAllTokensId(),\n        ])\n\n        const notSoldTokens = excludeSoldTokens(userTokens, account)\n        setMyTokens(notSoldTokens)\n        const notUsedTokens = excludeExistedTokens(notSoldTokens, existedTokens)\n\n        const fullInfoTokens = await addAdditionalInfoNFTs(notUsedTokens)\n        setTokens(fullInfoTokens)\n      } catch (error) {\n        notification('error', { message: 'Fetching Error', description: error?.message })\n      }\n    }\n\n    if (account && activeTab === '1' && !isInitial.current) {\n      getUserTokens()\n      isInitial.current = true\n    }\n  }, [account, setMyTokens, activeTab])\n\n\n  const onSubmit = async (value: any) => {\n    if (tokenSelected) {\n      const { contractAddress, tokenID, image, name, description } = tokenSelected as any\n      await stakingNftService\n        .registerStakingToken({\n          urlToken: value.urlToken,\n          name: name ?? value.name,\n          description: description ?? value.description,\n          image,\n          tokenID,\n          contractAddress,\n        })\n        .catch((error) => notification('error', { message: 'Error', description: error?.message }))\n      notification('success', {\n        message: 'Update info NFT success, you can check NFT on approved collection',\n        description: '',\n      })\n      setShowModalSubmit(false)\n\n      setTokens((prevTokens) =>\n        prevTokens.filter((token) => token.tokenID !== tokenID || token.contractAddress !== contractAddress),\n      )\n      setTokenSelected(null)\n    }\n  }\n\n  const registerHandler = (info) => {\n    setTokenSelected(info)\n    setShowModalSubmit(true)\n  }\n\n  return (\n    <>\n      <Row>\n        {tokens.map((token) => (\n          <CardNFT\n            name={token.name}\n            description={token.description}\n            image={token.image}\n            contractAddress={token.contractAddress}\n            tokenID={token.tokenID}\n            onRegister={registerHandler}\n          />\n        ))}\n      </Row>\n      <ModalSubmit\n        isShowModalSubmit={isShowModalSubmit}\n        setShowModalSubmit={setShowModalSubmit}\n        formRef={formRef}\n        onSubmit={onSubmit}\n        token={tokenSelected}\n        // data={data}\n      />\n    </>\n  )\n}\n\nexport default MyCollection\n","import React from 'react'\nimport { Col } from 'reactstrap'\nimport styled from 'styled-components'\n\ninterface PendingTokenProps {\n  image: string\n}\n\nconst PendingToken: React.FC<PendingTokenProps> = ({ image }: PendingTokenProps) => {\n  return (\n    <Col sm=\"12\" md=\"3\" className=\"align-center space-mb\">\n      <BoxCenter>\n        <Figure>\n          <img src={image} className=\"thumb\" alt=\"\" />\n          <img src=\"/images/staking/box-img.png\" alt=\"\" className=\"line-box\" />\n        </Figure>\n\n        <Launchers>\n          <img src=\"/images/staking/effect.png\" alt=\"\" />\n        </Launchers>\n      </BoxCenter>\n    </Col>\n  )\n}\n\nconst BoxCenter = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  max-width: auto;\n\n  @media (min-width: 768px) {\n    max-width: 230px;\n  }\n`\n\nconst Figure = styled.div`\n  position: relative;\n  width: 180px;\n  height: 276px;\n  overflow: hidden;\n\n  .thumb {\n    height: inherit;\n    transform: scale(1);\n    transition: all 0.9s;\n    object-fit: cover;\n  }\n\n  .line-box {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 2;\n  }\n`\n\nconst Launchers = styled.div`\n  margin-bottom: 15px;\n`\n\nconst BoxFooter = styled.div`\n  background: #2f2f2f;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n  width: 280px;\n\n  @media (min-width: 768px) {\n    width: 100%;\n  }\n`\n\nconst Btn = styled.button`\n  background: url('../images/staking/line-button.png') no-repeat center center;\n  background-size: contain;\n  width: 100%;\n  height: 67px;\n  line-height: 67px;\n  font-size: 20px;\n  font-weight: 700;\n  text-transform: uppercase;\n  text-align: center;\n  color: #ff3b3b;\n  border: 0;\n\n  &.green-color {\n    color: #1cbb1c;\n  }\n\n  &:hover {\n    .effect-light {\n      text-align: center;\n      font-size: 1.2em;\n      color: #fff;\n      font-weight: 700;\n      text-transform: uppercase;\n      animation: blur 0.75s ease-out infinite;\n      text-shadow: 0px 0px 5px #fff, 0px 0px 7px #fff;\n    }\n  }\n\n  @keyframes blur {\n    from {\n      text-shadow: 0px 0px 10px #fff, 0px 0px 10px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff,\n        0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 50px #fff, 0px 0px 50px #fff,\n        0px 0px 50px #7b96b8, 0px 0px 150px #7b96b8, 0px 10px 100px #7b96b8, 0px 10px 100px #7b96b8,\n        0px 10px 100px #7b96b8, 0px 10px 100px #7b96b8, 0px -10px 100px #7b96b8, 0px -10px 100px #7b96b8;\n    }\n  }\n`\n\nconst Space = styled.div`\n  padding: 15px;\n`\n\nconst Title = styled.h2`\n  font-size: 16px;\n  text-transform: capitalize;\n  color: #ffffff;\n  margin-bottom: 10px;\n`\n\nconst Dflex = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  align-items: center;\n`\n\nconst Number = styled.h3`\n  color: #f4c708;\n  font-size: 24px;\n  font-family: 'Roboto Mono', monospace !important;\n  font-weight: 600;\n  position: relative;\n  transform: scale(1);\n  text-shadow: -1px 0 1px #c5a354, 0 1px 1px #e0b649, 5px 5px 10px rgb(179 167 106 / 78%),\n    -5px -5px 10px rgb(183 155 65 / 40%);\n\n  &:before {\n    content: attr(data-heading);\n    left: 0;\n    top: 0;\n    position: absolute;\n    z-index: 1;\n    background: linear-gradient(\n      to bottom,\n      #ffe047 22%,\n      #fff144 24%,\n      #cfc09f 26%,\n      #ffe686 27%,\n      #ffecb3 40%,\n      #ffe14f 78%\n    );\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    text-shadow: none;\n  }\n`\n\nconst Ticket = styled.div`\n  background: url('../images/staking/bg-button.png') no-repeat center center;\n  background-size: contain;\n  width: 100%;\n  height: 36px;\n  text-transform: uppercase;\n  text-align: center;\n  line-height: 36px;\n  font-size: 14px;\n  font-weight: 600;\n`\n\nexport default PendingToken\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Row } from 'reactstrap'\nimport { NFT } from '../../config/constants/types'\nimport { stakingNftService } from '../../services/index'\nimport notification from './Components/Alert'\nimport PendingToken from './Components/CardPending'\n\nconst Pending: React.FC<any> = ({ activeTab }: { activeTab: string }) => {\n  const [pendingTokens, setPendingTokens] = useState<NFT[]>([])\n  const isInitial = useRef<boolean>(false)\n\n  useEffect(() => {\n    const fetchPendingTokens = async () => {\n      try {\n        const data = await stakingNftService.getPendingTokens()\n        setPendingTokens(data)\n      } catch (error) {\n        notification('error', { message: 'Error', description: error?.message })\n      }\n    }\n\n    if (activeTab === '2' && !isInitial.current) {\n      fetchPendingTokens()\n      isInitial.current = true\n    }\n  }, [activeTab])\n\n  return <Row>{pendingTokens.length > 0 && pendingTokens.map((token) => <PendingToken image={token.image} />)}</Row>\n}\n\nexport default Pending\n","import { getAddress } from '@ethersproject/address'\nimport { NFT } from 'config/constants/types'\n\n// [{n : 1}, {n : 2}] => 2\nexport const getMaxBy = (arr: Array<any>, propName: string): number => {\n  if (arr.length === 0) return 0\n  let max: number = arr[0][propName]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i][propName] > max) {\n      max = arr[i][propName]\n    }\n  }\n\n  return max\n}\n\nexport const foundNFT = (arr: Array<NFT>, contractAddress: string, tokenID: number): boolean => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].contractAddress === getAddress(contractAddress) && arr[i].tokenID === tokenID) {\n      return true\n    }\n  }\n\n  return false\n}\n\nexport const findNFT = (arr: Array<NFT>, contractAddress: string, tokenID: number): NFT | null => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].contractAddress === getAddress(contractAddress) && arr[i].tokenID === tokenID) {\n      return arr[i]\n    }\n  }\n  return null\n}\n\nexport const findNFTIndex = (arr: Array<NFT>, contractAddress: string, tokenID: number): number => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].contractAddress === getAddress(contractAddress) && arr[i].tokenID === tokenID) {\n      return i\n    }\n  }\n  return -1\n}\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useState } from 'react'\nimport notification from 'views/Staking/Components/Alert'\nimport { useStakingNFTContract } from './useContract'\n\nconst useRewardFee = () => {\n  const [rewardFee, setRewardFee] = useState<number>(null)\n\n  const stakingNftContract = useStakingNFTContract()\n\n  useEffect(() => {\n    stakingNftContract\n      .FEE_WITHDRAW()\n      .then((response) => {\n        setRewardFee((response as BigNumber).toNumber())\n      })\n      .catch((error) => {\n        notification('error', { message: 'Error when get fee withdraw', description: error?.message })\n      })\n  }, [stakingNftContract])\n\n  return rewardFee\n}\n\nexport default useRewardFee\n","const DAYS_TO_HARVEST = 7\n\nexport const isAbleToHarvest = (start: Date): boolean => {\n  // return dayDiff(addDays(start, 7), new Date()) >= DAYS_TO_HARVEST\n  return true\n}\n\nexport function addDays(date: Date, days: number): Date {\n  const result = new Date(date)\n  result.setDate(result.getDate() + days)\n  return result\n}\n\nexport const dayDiff = (date1: Date, date2: Date): number => {\n  const diffInTime = date2.getTime() - date1.getTime()\n  const diffInDays = diffInTime / (1000 * 3600 * 24)\n\n  return diffInDays\n}\n","import React from 'react'\nimport { Col } from 'reactstrap'\nimport styled from 'styled-components'\nimport { Text as UIKitText } from '@luckyswap/uikit'\nimport { isAbleToHarvest } from '../../../utils/date'\nimport { StakingNFT } from '../../../config/constants/types'\n\ninterface StakingCardProps extends StakingNFT {\n  onHarvest: any\n  onConfirmWithdraw: any\n  createdAt: Date\n  isTxPending: boolean\n}\n\nconst CardStaking: React.FC<StakingCardProps> = ({\n  image,\n  contractAddress,\n  pendingReward,\n  tokenID,\n  onHarvest,\n  onConfirmWithdraw,\n  createdAt,\n  isTxPending,\n}: StakingCardProps) => {\n  return (\n    <Col sm=\"12\" md=\"3\" className=\"align-center space-mb\">\n      <BoxCenter>\n        <Figure>\n          <img src={image} className=\"thumb\" alt=\"\" />\n          <img src=\"/images/staking/box-img.png\" alt=\"\" className=\"line-box\" />\n        </Figure>\n\n        <Launchers>\n          <img src=\"/images/staking/effect.png\" alt=\"\" />\n        </Launchers>\n\n        <BoxFooter>\n          {!isTxPending ? (\n            <Btn className=\"green-color\">\n              <span className=\"effect-light\">Staking</span>\n            </Btn>\n          ) : (\n            <Btn className=\"green-color\">\n              <span className=\"effect-light\">Withdrawing...</span>\n            </Btn>\n          )}\n\n          {!isTxPending && (\n            <Space>\n              <Title>Collected Reward:</Title>\n              <Dflex>\n                <Number data-heading=\"\">{pendingReward}</Number>\n                {isAbleToHarvest(createdAt) && (\n                  <Ticket onClick={() => onHarvest({ tokenID, contractAddress })}>claim</Ticket>\n                )}\n                {isAbleToHarvest(createdAt) && <Ticket onClick={onConfirmWithdraw}>withdraw</Ticket>}\n              </Dflex>\n            </Space>\n          )}\n        </BoxFooter>\n      </BoxCenter>\n    </Col>\n  )\n}\n\nconst BoxCenter = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  max-width: auto;\n\n  @media (min-width: 768px) {\n    max-width: 230px;\n  }\n`\n\nconst Figure = styled.div`\n  position: relative;\n  width: 180px;\n  height: 276px;\n  overflow: hidden;\n\n  .thumb {\n    height: inherit;\n    transform: scale(1);\n    transition: all 0.9s;\n    object-fit: cover;\n  }\n\n  .line-box {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 2;\n  }\n`\n\nconst Launchers = styled.div`\n  margin-bottom: 15px;\n`\n\nconst BoxFooter = styled.div`\n  background: #2f2f2f;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n  width: 280px;\n\n  @media (min-width: 768px) {\n    width: 100%;\n  }\n`\n\nconst Btn = styled.button`\n  background: url('../images/staking/line-button.png') no-repeat center center;\n  background-size: contain;\n  width: 100%;\n  height: 67px;\n  line-height: 67px;\n  font-size: 20px;\n  font-weight: 700;\n  text-transform: uppercase;\n  text-align: center;\n  color: #ff3b3b;\n  border: 0;\n\n  &.green-color {\n    color: #1cbb1c;\n  }\n\n  &:hover {\n    .effect-light {\n      text-align: center;\n      font-size: 1.2em;\n      color: #fff;\n      font-weight: 700;\n      text-transform: uppercase;\n      animation: blur 0.75s ease-out infinite;\n      text-shadow: 0px 0px 5px #fff, 0px 0px 7px #fff;\n    }\n  }\n\n  @keyframes blur {\n    from {\n      text-shadow: 0px 0px 10px #fff, 0px 0px 10px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff,\n        0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 50px #fff, 0px 0px 50px #fff,\n        0px 0px 50px #7b96b8, 0px 0px 150px #7b96b8, 0px 10px 100px #7b96b8, 0px 10px 100px #7b96b8,\n        0px 10px 100px #7b96b8, 0px 10px 100px #7b96b8, 0px -10px 100px #7b96b8, 0px -10px 100px #7b96b8;\n    }\n  }\n`\n\nconst Space = styled.div`\n  padding: 15px;\n`\n\nconst Title = styled.h2`\n  font-size: 16px;\n  text-transform: capitalize;\n  color: #ffffff;\n  margin-bottom: 10px;\n`\n\nconst Dflex = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  align-items: center;\n`\n\nconst Number = styled.h3`\n  color: #f4c708;\n  font-size: 24px;\n  font-family: 'Roboto Mono', monospace !important;\n  font-weight: 600;\n  position: relative;\n  transform: scale(1);\n  text-shadow: -1px 0 1px #c5a354, 0 1px 1px #e0b649, 5px 5px 10px rgb(179 167 106 / 78%),\n    -5px -5px 10px rgb(183 155 65 / 40%);\n\n  &:before {\n    content: attr(data-heading);\n    left: 0;\n    top: 0;\n    position: absolute;\n    z-index: 1;\n    background: linear-gradient(\n      to bottom,\n      #ffe047 22%,\n      #fff144 24%,\n      #cfc09f 26%,\n      #ffe686 27%,\n      #ffecb3 40%,\n      #ffe14f 78%\n    );\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    text-shadow: none;\n  }\n`\n\nconst Ticket = styled.div`\n  background: url('../images/staking/bg-button.png') no-repeat center center;\n  background-size: contain;\n  width: 100%;\n  height: 36px;\n  text-transform: uppercase;\n  text-align: center;\n  line-height: 36px;\n  font-size: 14px;\n  font-weight: 600;\n`\n\nexport default CardStaking\n","import { Button, Text } from '@luckyswap/uikit'\nimport { Currency, CurrencyAmount, JSBI } from '@luckyswap/v2-sdk'\nimport { RowBetween, RowFixed } from 'components/Row'\nimport CurrencyLogo from 'components/Swap/CurrencyLogo'\nimport React from 'react'\nimport { calculatePercentToJSBI } from '../../../utils/bigNumber'\n\nexport function ConfirmWithdrawModalBottom({\n  currency,\n  depositAmount,\n  rewardAmount,\n  onWithdraw,\n  harvestFee,\n}: {\n  currency: Currency\n  depositAmount: CurrencyAmount\n  rewardAmount: CurrencyAmount\n  harvestFee: number\n  onWithdraw: () => void\n}) {\n  const fee: CurrencyAmount = CurrencyAmount.fromRawAmount(\n    currency,\n    calculatePercentToJSBI(rewardAmount?.raw, harvestFee),\n  )\n\n  return (\n    <>\n      <RowBetween>\n        <Text>XLUCKY Deposited</Text>\n        <RowFixed>\n          <CurrencyLogo currency={currency} style={{ marginRight: '8px' }} />\n          <Text>{depositAmount?.toSignificant(6)}</Text>\n        </RowFixed>\n      </RowBetween>\n\n      <RowBetween>\n        <Text>XLUCKY Reward</Text>\n        <RowFixed>\n          <CurrencyLogo currency={currency} style={{ marginRight: '8px' }} />\n          <Text>{rewardAmount?.toSignificant(6)}</Text>\n        </RowFixed>\n      </RowBetween>\n\n      <RowBetween>\n        <Text>Fee (in percent)</Text>\n        <RowFixed>\n          <Text>{harvestFee}%</Text>\n        </RowFixed>\n      </RowBetween>\n\n      <RowBetween>\n        <Text>Fee</Text>\n        <RowFixed>\n          <CurrencyLogo currency={currency} style={{ marginRight: '8px' }} />\n          <Text>{fee?.toSignificant(6)}</Text>\n        </RowFixed>\n      </RowBetween>\n\n      <Button mt=\"20px\" onClick={onWithdraw} className=\"btn-supply\">\n        Withdraw\n      </Button>\n    </>\n  )\n}\n","import { TransactionResponse } from '@ethersproject/providers'\nimport { Text as UIKitText } from '@luckyswap/uikit'\nimport { CurrencyAmount, JSBI } from '@luckyswap/v2-sdk'\nimport { AutoColumn } from 'components/Column'\nimport { RowFlat } from 'components/Row'\nimport CurrencyLogo from 'components/Swap/CurrencyLogo'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from 'components/Swap/TransactionConfirmationModal'\nimport { BigNumber } from 'ethers'\nimport useRewardFee from 'hooks/useRewardFee'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { Row } from 'reactstrap'\nimport { StakingNFT } from '../../config/constants/types'\nimport { XLUCKY_ADDRESSES } from '../../config/index'\nimport { useActiveWeb3React } from '../../hooks/index'\nimport { useToken } from '../../hooks/Tokens'\nimport { useStakingNFTContract } from '../../hooks/useContract'\nimport { usePendingRewards } from '../../state/poolsNft/hooks'\nimport { useTransactionAdder, useIsTransactionPending, useIsTransactionConfirmed } from '../../state/transactions/hooks'\nimport { findNFTIndex } from '../../utils/array'\nimport { bigNumberToJSBI, calculatePercentToJSBI } from '../../utils/bigNumber'\nimport notification from './Components/Alert'\nimport CardStaking from './Components/CardStaking'\nimport { ConfirmWithdrawModalBottom } from './Components/ConfirmWithdrawModalBottom'\nimport { useHarvestNFTCallback } from '../../hooks/useHarvestCallback'\n\ninterface StakingPageProps {\n  stakingTokens: StakingNFT[]\n  changeViewWhenWithdraw: any\n}\n\nexport const Staked: React.FC<StakingPageProps> = ({ stakingTokens, changeViewWhenWithdraw }) => {\n  const { chainId } = useActiveWeb3React()\n  const rewardCurrenciesAmount = usePendingRewards(stakingTokens)\n  const stakingNftContract = useStakingNFTContract()\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false)\n  const [txHashWithdraw, setTxHashWithdraw] = useState<string>('')\n  const isPendingWithdraw = useIsTransactionPending(txHashWithdraw)\n  const isConfirmedWithdraw = useIsTransactionConfirmed(txHashWithdraw)\n  const addTransaction = useTransactionAdder()\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\n  const XLUCKY_TOKEN = useToken(XLUCKY_ADDRESSES[chainId])\n  const [withdrawToken, setWithdrawToken] = useState<StakingNFT>(null) // console.log('staking tokens : ', stakingTokens)\n  const rewardFee = useRewardFee()\n  const [isPendingHarvest, isConfirmedHarvest, harvestCallback] = useHarvestNFTCallback()\n\n  useEffect(() => {\n    if (isConfirmedWithdraw) {\n      const { tokenID, contractAddress } = withdrawToken\n      changeViewWhenWithdraw({ tokenID, contractAddress })\n    }\n  }, [isConfirmedWithdraw, changeViewWhenWithdraw, withdrawToken])\n\n  // const onHarvest = async ({ tokenID, contractAddress }) => {\n  //   stakingNftContract\n  //     .harvest(contractAddress, tokenID)\n  //     .then((response: TransactionResponse) => {\n  //       addTransaction(response, {\n  //         summary: `\n  //           Claim reward from staking token ${tokenID}\n  //         `,\n  //       })\n  //     })\n  //     .catch((error) => {\n  //       notification('error', { message: 'Error', description: error?.message })\n  //     })\n  // }\n\n  const onWithdraw = async () => {\n    setAttemptingTxn(true)\n    const { tokenID, contractAddress } = withdrawToken\n    stakingNftContract\n      .withdraw(contractAddress, tokenID)\n      .then((response: TransactionResponse) => {\n        setAttemptingTxn(false)\n        addTransaction(response, {\n          summary: `\n            Withdraw token ${tokenID}\n          `,\n        })\n        setTxHashWithdraw(response.hash)\n      })\n      .catch((error) => {\n        setAttemptingTxn(false)\n        notification('error', { message: 'Error', description: error?.message })\n      })\n  }\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false)\n  }, [])\n\n  const modalHeader = () => {\n    return (\n      <AutoColumn gap=\"20px\">\n        <RowFlat style={{ marginTop: '20px' }}>\n          <UIKitText fontSize=\"48px\" mr=\"8px\">\n            {(withdrawToken?.depositAmount as CurrencyAmount)\n              .add(withdrawToken?.pendingReward as CurrencyAmount)\n              .subtract(\n                CurrencyAmount.fromRawAmount(\n                  XLUCKY_TOKEN,\n                  calculatePercentToJSBI((withdrawToken?.pendingReward as CurrencyAmount).raw, rewardFee),\n                ),\n              )\n              .toFixed(4)}\n          </UIKitText>\n\n          <CurrencyLogo currency={XLUCKY_TOKEN} />\n        </RowFlat>\n        <UIKitText small textAlign=\"left\" padding=\"8px 0 0 0 \" style={{ fontStyle: 'italic' }}>\n          Amount of XLUCKY you receive will increase a little bit\n        </UIKitText>\n      </AutoColumn>\n    )\n  }\n\n  const modalBottom = () => {\n    return (\n      <ConfirmWithdrawModalBottom\n        currency={XLUCKY_TOKEN}\n        depositAmount={withdrawToken?.depositAmount as CurrencyAmount}\n        rewardAmount={withdrawToken?.pendingReward as CurrencyAmount}\n        harvestFee={rewardFee}\n        onWithdraw={onWithdraw}\n      />\n    )\n  }\n\n  const pendingText = `You will receive ${(withdrawToken?.depositAmount as CurrencyAmount)?.toSignificant(\n    6,\n  )} as deposited and ${(withdrawToken?.pendingReward as CurrencyAmount)?.toSignificant(6)} as reward.\n  Staking contract will also transfer ownership of this token to you\n  `\n\n  return (\n    <Row>\n      <TransactionConfirmationModal\n        isOpen={showConfirm}\n        onDismiss={handleDismissConfirmation}\n        attemptingTxn={attemptingTxn}\n        hash={txHashWithdraw}\n        content={() => (\n          <ConfirmationModalContent\n            title=\"You will receive\"\n            onDismiss={handleDismissConfirmation}\n            topContent={modalHeader}\n            bottomContent={modalBottom}\n          />\n        )}\n        pendingText={pendingText}\n      />\n      {stakingTokens.map((token, i) => (\n        <CardStaking\n          image={token.image}\n          contractAddress={token.contractAddress}\n          tokenID={token.tokenID}\n          pendingReward={rewardCurrenciesAmount[i] ? rewardCurrenciesAmount[i].toFixed(4) : '0.0000'}\n          // onHarvest={onHarvest}\n          onHarvest={harvestCallback}\n          onConfirmWithdraw={() => {\n            setShowConfirm(true)\n            setWithdrawToken({\n              ...token,\n              pendingReward: rewardCurrenciesAmount[i],\n              depositAmount: CurrencyAmount.fromRawAmount(\n                XLUCKY_TOKEN,\n                bigNumberToJSBI(token.depositAmount as BigNumber),\n              ),\n            })\n          }}\n          createdAt={token.createdAt}\n          isTxPending={isPendingWithdraw}\n        />\n      ))}\n    </Row>\n  )\n}\n\nexport default Staked\n","import { CurrencyAmount, JSBI } from '@luckyswap/v2-sdk'\nimport { XLUCKY_ADDRESSES } from 'config'\nimport { useActiveWeb3React } from 'hooks'\nimport { useToken } from 'hooks/Tokens'\nimport { useMemo } from 'react'\nimport { useSingleContractMultipleData } from 'state/multicall/hooks'\nimport { isAddress } from 'utils'\nimport { useStakingNFTContract } from '../../hooks/useContract'\n\nexport function usePendingRewards(tokensInfo) {\n  const stakingNftContract = useStakingNFTContract()\n  const { chainId } = useActiveWeb3React()\n  const luckyToken = useToken(XLUCKY_ADDRESSES[chainId])\n\n  const formattedTokensInfo = useMemo(\n    () =>\n      tokensInfo\n        ? tokensInfo\n            .map((token) => ({\n              ...token,\n              contractAddress: isAddress(token.contractAddress),\n            }))\n            .filter((token) => token.contractAddress !== false)\n            .sort()\n        : [],\n    [tokensInfo],\n  )\n\n  const results = useSingleContractMultipleData(\n    stakingNftContract,\n    'pendingReward',\n    formattedTokensInfo.map((token) => [token.contractAddress, token.tokenID]),\n  )\n\n  const response: CurrencyAmount[] = []\n  for (let i = 0; i < results.length; i++) {\n    const value = results?.[i]?.result?.[0]\n    if (value) {\n      response.push(CurrencyAmount.fromRawAmount(luckyToken, JSBI.BigInt(value.toString())))\n    }\n  }\n\n  return response\n\n  // return useMemo(\n  //   () =>\n  //     tokensInfo.reduce((memo, _, i) => {\n  //       const value = results?.[i]?.result?.[0]\n  //       if (value) memo.push(CurrencyAmount.fromRawAmount(luckyToken, JSBI.BigInt(value.toString())))\n  //       return memo\n  //     }, []),\n  //   [tokensInfo, results, luckyToken],\n  // )\n}\n","import { TransactionResponse } from '@ethersproject/providers'\nimport { useCallback, useState } from 'react'\nimport { useIsTransactionConfirmed, useIsTransactionPending, useTransactionAdder } from 'state/transactions/hooks'\nimport notification from 'views/Staking/Components/Alert'\nimport { useStakingNFTContract } from './useContract'\nimport { StakingNFT } from '../config/constants/types'\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nexport function useHarvestNFTCallback(): [boolean, boolean, (any) => Promise<void>] {\n  const stakingNftContract = useStakingNFTContract()\n  const [txHashHarvest, setTxHashHarvest] = useState<string>('')\n  const addTransaction = useTransactionAdder()\n  const isPendingHarvest = useIsTransactionPending(txHashHarvest)\n  const isConfirmedHarvest = useIsTransactionConfirmed(txHashHarvest)\n\n  const harvestCallback = useCallback(\n    async ({ tokenID, contractAddress }) => {\n      if (!tokenID && !contractAddress) {\n        return\n      }\n      stakingNftContract\n        .harvest(contractAddress, tokenID)\n        .then((response: TransactionResponse) => {\n          addTransaction(response, {\n            summary: `\n            Claim reward from staking token ${tokenID}\n          `,\n          })\n\n          setTxHashHarvest(response.hash)\n        })\n        .catch((error) => {\n          notification('error', { message: 'Error', description: error?.message })\n        })\n    },\n    [stakingNftContract, addTransaction],\n  )\n\n  return [isPendingHarvest, isConfirmedHarvest, harvestCallback]\n}\n","import { Button, Text } from '@luckyswap/uikit'\nimport { Currency, CurrencyAmount } from '@luckyswap/v2-sdk'\nimport { RowBetween, RowFixed } from 'components/Row'\nimport CurrencyLogo from 'components/Swap/CurrencyLogo'\nimport React from 'react'\n\nexport function ConfirmStakeModalBottom({\n  currency,\n  depositAmount,\n  onStake,\n  rateReward,\n}: {\n  currency: Currency\n  depositAmount: CurrencyAmount\n  rateReward: number\n  onStake: any\n}) {\n  return (\n    <>\n      <RowBetween>\n        <Text>XLUCKY Deposited</Text>\n        <RowFixed>\n          <CurrencyLogo currency={currency} style={{ marginRight: '8px' }} />\n          <Text>{depositAmount?.toSignificant(6)}</Text>\n        </RowFixed>\n      </RowBetween>\n\n      <RowBetween>\n        <Text>Rate reward (per year)</Text>\n        <RowFixed>\n          <CurrencyLogo currency={currency} style={{ marginRight: '8px' }} />\n          <Text>{rateReward}%</Text>\n        </RowFixed>\n      </RowBetween>\n\n      <Button mt=\"20px\" onClick={onStake} className=\"btn-supply\">\n        Stake\n      </Button>\n    </>\n  )\n}\n","import { TransactionResponse } from '@ethersproject/providers'\nimport { Text as UIKitText } from '@luckyswap/uikit'\nimport { CurrencyAmount } from '@luckyswap/v2-sdk'\nimport { AutoColumn } from 'components/Column'\nimport { RowFlat } from 'components/Row'\nimport CurrencyLogo from 'components/Swap/CurrencyLogo'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from 'components/Swap/TransactionConfirmationModal'\nimport { ApprovalState, XLUCKY_ADDRESSES } from 'config'\nimport { ethers } from 'ethers'\nimport { useToken } from 'hooks/Tokens'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { Col } from 'reactstrap'\nimport styled from 'styled-components'\nimport { calculatePercentToJSBI } from 'utils/bigNumber'\nimport { StakingNFT } from '../../../config/constants/types'\nimport { useApproveNFTCallback } from '../../../hooks/useApproveNFTCallback'\nimport { useStakingNFTContract } from '../../../hooks/useContract'\nimport { stakingNftService } from '../../../services/index'\nimport {\n  useIsTransactionConfirmed,\n  useIsTransactionPending,\n  useTransactionAdder,\n} from '../../../state/transactions/hooks'\nimport notification from './Alert'\nimport { ConfirmWithdrawModalBottom } from './ConfirmWithdrawModalBottom'\nimport { useActiveWeb3React } from '../../../hooks/index'\nimport { ConfirmStakeModalBottom } from './ConfirmStakeModalBottom'\n\ninterface StakingCardProps extends StakingNFT {\n  approveState?: ApprovalState\n  onApprove: any\n  changeViewWhenStake: any\n}\n\nconst CardApproved: React.FC<StakingCardProps> = ({\n  image,\n  contractAddress,\n  tokenID,\n  approveState,\n  onApprove,\n  changeViewWhenStake,\n  depositAmount,\n}: StakingCardProps) => {\n  const { chainId } = useActiveWeb3React()\n  const stakingNFTContract = useStakingNFTContract()\n  const [txHashStake, setTxHashStake] = useState<string>('')\n  const addTransaction = useTransactionAdder()\n  const [approvalNFT, approveNFTCallback] = useApproveNFTCallback(tokenID, contractAddress, stakingNFTContract.address)\n  const isTxStakeConfirmed = useIsTransactionConfirmed(txHashStake)\n  const isTxStakePending = useIsTransactionPending(txHashStake)\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false)\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\n  const XLUCKY_TOKEN = useToken(XLUCKY_ADDRESSES[chainId])\n  const [rateReward, setRateReward] = useState<number>(0)\n\n  useEffect(() => {\n    if (isTxStakeConfirmed) {\n      stakingNftService\n        .stakeToken({ tokenID, contractAddress })\n        .then(() => {\n          changeViewWhenStake({ tokenID, contractAddress })\n        })\n        .catch((error) => notification('error', { message: 'Error', description: error?.message }))\n    }\n  }, [isTxStakeConfirmed, tokenID, contractAddress, changeViewWhenStake])\n\n  useEffect(() => {\n    const getToken = async () => {\n      try {\n        const token = await stakingNftService.getTokenByID({ tokenID, contractAddress })\n        setRateReward(parseInt(token.rateReward))\n      } catch (error) {\n        notification('error', { message: 'Get token from db error', description: error?.message })\n      }\n    }\n\n    if (tokenID && contractAddress) {\n      getToken()\n    }\n  }, [tokenID, contractAddress])\n\n  const onStake = async () => {\n    try {\n      setAttemptingTxn(true)\n      const response: TransactionResponse = await stakingNFTContract.stake(\n        ethers.utils.getAddress(contractAddress),\n        ethers.BigNumber.from(tokenID),\n      )\n      setAttemptingTxn(false)\n\n      addTransaction(response, {\n        summary: `Stake NFT ${tokenID} from ${contractAddress}`,\n      })\n\n      setTxHashStake(response.hash)\n    } catch (error) {\n      setAttemptingTxn(false)\n\n      notification('error', { message: 'Error', description: error?.message })\n    }\n  }\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false)\n  }, [])\n\n  const modalHeader = () => {\n    return (\n      <AutoColumn gap=\"20px\">\n        <RowFlat style={{ marginTop: '20px' }}>\n          <UIKitText fontSize=\"48px\" mr=\"8px\">\n            {(depositAmount as CurrencyAmount).toSignificant(6)}\n          </UIKitText>\n\n          <CurrencyLogo currency={XLUCKY_TOKEN} />\n        </RowFlat>\n        <UIKitText small textAlign=\"left\" padding=\"8px 0 0 0 \" style={{ fontStyle: 'italic' }}>\n          You will receive deposit when you withdraw\n        </UIKitText>\n      </AutoColumn>\n    )\n  }\n\n  const modalBottom = () => {\n    return (\n      <ConfirmStakeModalBottom\n        currency={XLUCKY_TOKEN}\n        rateReward={rateReward}\n        depositAmount={depositAmount as CurrencyAmount}\n        onStake={onStake}\n      />\n    )\n  }\n\n  const pendingText = `You are transferring ownership of this token to staking contract and number of XLUCKY to deposit`\n\n  return (\n    <>\n      <TransactionConfirmationModal\n        isOpen={showConfirm}\n        onDismiss={handleDismissConfirmation}\n        attemptingTxn={attemptingTxn}\n        hash={txHashStake}\n        content={() => (\n          <ConfirmationModalContent\n            title=\"You will stake this token and transfer to staking contract as deposit\"\n            onDismiss={handleDismissConfirmation}\n            topContent={modalHeader}\n            bottomContent={modalBottom}\n          />\n        )}\n        pendingText={pendingText}\n      />\n      <Col sm=\"12\" md=\"3\" className=\"align-center space-mb\">\n        <BoxCenter>\n          <Figure>\n            <img src={image} className=\"thumb\" alt=\"\" />\n            <img src=\"/images/staking/box-img.png\" alt=\"\" className=\"line-box\" />\n          </Figure>\n\n          <Launchers>\n            <img src=\"/images/staking/effect.png\" alt=\"\" />\n          </Launchers>\n\n          <BoxFooter>\n            {approveState === ApprovalState.NOT_APPROVED ? (\n              <Btn className=\"green-color\" onClick={onApprove}>\n                <span className=\"effect-light\">Approve XLUCKY</span>\n              </Btn>\n            ) : approveState === ApprovalState.PENDING ? (\n              <Btn className=\"green-color\">\n                <span className=\"effect-light\">Approving...</span>\n              </Btn>\n            ) : approveState === ApprovalState.UNKNOWN ? (\n              <Btn className=\"green-color\">\n                <span className=\"effect-light\">Checking...</span>\n              </Btn>\n            ) : (\n              <> </>\n            )}\n\n            {approvalNFT === ApprovalState.NOT_APPROVED ? (\n              <Btn className=\"green-color\" onClick={() => approveNFTCallback()}>\n                <span className=\"effect-light\">Approve NFT</span>\n              </Btn>\n            ) : approvalNFT === ApprovalState.PENDING ? (\n              <Btn className=\"green-color\">\n                <span className=\"effect-light\">Approving NFT...</span>\n              </Btn>\n            ) : approvalNFT === ApprovalState.UNKNOWN ? (\n              <Btn className=\"green-color\">\n                <span className=\"effect-light\">Checking...</span>\n              </Btn>\n            ) : (\n              <> </>\n            )}\n\n            {approveState === ApprovalState.APPROVED &&\n              approvalNFT === ApprovalState.APPROVED &&\n              (!isTxStakePending && !isTxStakeConfirmed ? (\n                <Btn\n                  onClick={() => {\n                    setShowConfirm(true)\n                  }}\n                  className=\"green-color\"\n                >\n                  <span className=\"effect-light\">Stake</span>\n                </Btn>\n              ) : (\n                <Btn className=\"green-color\">\n                  <span className=\"effect-light\">Staking....</span>\n                </Btn>\n              ))}\n          </BoxFooter>\n        </BoxCenter>\n      </Col>\n    </>\n  )\n}\n\nconst BoxCenter = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  max-width: auto;\n\n  @media (min-width: 768px) {\n    max-width: 230px;\n  }\n`\n\nconst Figure = styled.div`\n  position: relative;\n  width: 180px;\n  height: 276px;\n  overflow: hidden;\n\n  .thumb {\n    height: inherit;\n    transform: scale(1);\n    transition: all 0.9s;\n    object-fit: cover;\n  }\n\n  .line-box {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 2;\n  }\n`\n\nconst Launchers = styled.div`\n  margin-bottom: 15px;\n`\n\nconst BoxFooter = styled.div`\n  background: #2f2f2f;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n  width: 280px;\n\n  @media (min-width: 768px) {\n    width: 100%;\n  }\n`\n\nconst Btn = styled.button`\n  background: url('../images/staking/line-button.png') no-repeat center center;\n  background-size: contain;\n  width: 100%;\n  height: 67px;\n  line-height: 67px;\n  font-size: 20px;\n  font-weight: 700;\n  text-transform: uppercase;\n  text-align: center;\n  color: #ff3b3b;\n  border: 0;\n\n  &.green-color {\n    color: #1cbb1c;\n  }\n\n  &:hover {\n    .effect-light {\n      text-align: center;\n      font-size: 1.2em;\n      color: #fff;\n      font-weight: 700;\n      text-transform: uppercase;\n      animation: blur 0.75s ease-out infinite;\n      text-shadow: 0px 0px 5px #fff, 0px 0px 7px #fff;\n    }\n  }\n\n  @keyframes blur {\n    from {\n      text-shadow: 0px 0px 10px #fff, 0px 0px 10px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff,\n        0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 25px #fff, 0px 0px 50px #fff, 0px 0px 50px #fff,\n        0px 0px 50px #7b96b8, 0px 0px 150px #7b96b8, 0px 10px 100px #7b96b8, 0px 10px 100px #7b96b8,\n        0px 10px 100px #7b96b8, 0px 10px 100px #7b96b8, 0px -10px 100px #7b96b8, 0px -10px 100px #7b96b8;\n    }\n  }\n`\n\nexport default CardApproved\n","import { TransactionResponse } from '@ethersproject/providers'\nimport { ApprovalState } from 'config'\nimport addresses from 'config/constants/contracts'\nimport { useCallback, useMemo } from 'react'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useNFTApproval } from '../data/Allowances'\nimport { useHasPendingNFTApproval, useTransactionAdder } from '../state/transactions/hooks'\nimport { calculateGasMargin } from '../utils'\nimport { useNFTContract } from './useContract'\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nexport function useApproveNFTCallback(\n  tokenID: number,\n  contractAddress: string,\n  spender: string,\n): [ApprovalState, () => Promise<void>] {\n  const currentApproval = useNFTApproval(tokenID, contractAddress)\n  const NFTContract = useNFTContract(contractAddress)\n  const pendingApproval = useHasPendingNFTApproval(tokenID, contractAddress, getAddress(addresses.stakingNft))\n\n  // check the current approval statuuse\n  const approvalState: ApprovalState = useMemo(() => {\n    if (!tokenID || !contractAddress || !spender) return ApprovalState.UNKNOWN\n    if (!currentApproval) return ApprovalState.UNKNOWN\n\n    return currentApproval !== spender\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED\n  }, [tokenID, contractAddress, spender, currentApproval, pendingApproval])\n\n  const addTransaction = useTransactionAdder()\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily')\n      return\n    }\n    if (!tokenID) {\n      console.error('no token id')\n      return\n    }\n\n    if (!contractAddress) {\n      console.error('contract address is null')\n      return\n    }\n\n    if (!spender) {\n      console.error('no spender')\n      return\n    }\n\n    const estimatedGas = await NFTContract.estimateGas.approve(spender, tokenID).catch(() => {\n      return NFTContract.estimateGas.approve(spender, tokenID)\n    })\n\n    // eslint-disable-next-line consistent-return\n    return NFTContract.approve(spender, tokenID, {\n      gasLimit: calculateGasMargin(estimatedGas),\n    })\n      .then((response: TransactionResponse) => {\n        addTransaction(response, {\n          summary: `Approve ${tokenID} to staking contract`,\n          approvalNFT: { tokenID, contractAddress, spender },\n        })\n      })\n      .catch((error: Error) => {\n        console.error('Failed to approve token', error)\n        throw error\n      })\n  }, [approvalState, tokenID, contractAddress, NFTContract, spender, addTransaction])\n\n  return [approvalState, approve]\n}\n","// import axios from 'axios'\nimport { CurrencyAmount, JSBI } from '@luckyswap/v2-sdk'\nimport { BigNumber } from 'ethers'\nimport { useApproveCallback } from 'hooks/useApproveCallback'\nimport React from 'react'\nimport { Row } from 'reactstrap'\nimport { bigNumberToJSBI } from 'utils/bigNumber'\nimport { XLUCKY_ADDRESSES } from '../../config/index'\nimport { useActiveWeb3React } from '../../hooks/index'\n// import { useApproveCallback } from 'hooks/useApproveCallback'\nimport { useToken } from '../../hooks/Tokens'\nimport { useStakingNFTContract } from '../../hooks/useContract'\nimport notification from './Components/Alert'\nimport CardApproved from './Components/CardApproved'\n\ninterface UnstakedPageProps {\n  approvedTokens: Array<any>\n  maxDepositAmount: JSBI\n  changeViewWhenStake: any\n}\n\nexport const Unstaked: React.FC<UnstakedPageProps> = ({ approvedTokens, maxDepositAmount, changeViewWhenStake }) => {\n  const stakingNftContract = useStakingNFTContract()\n  const { chainId } = useActiveWeb3React()\n  const luckyToken = useToken(XLUCKY_ADDRESSES[chainId])\n\n  const [approvalLucky, approveLuckyCallback] = useApproveCallback(\n    CurrencyAmount.fromRawAmount(luckyToken, maxDepositAmount),\n    stakingNftContract?.address,\n  )\n\n  const approveHandler = () => {\n    approveLuckyCallback().catch((error) => {\n      notification('error', { message: 'Error', description: error?.message })\n    })\n  }\n\n  return (\n    <Row>\n      {approvedTokens.map((token) => (\n        <CardApproved\n          image={token.image}\n          contractAddress={token.contractAddress}\n          tokenID={token.tokenID}\n          changeViewWhenStake={changeViewWhenStake}\n          approveState={approvalLucky}\n          onApprove={approveHandler}\n          depositAmount={CurrencyAmount.fromRawAmount(luckyToken, bigNumberToJSBI(token?.depositAmount as BigNumber))}\n        />\n      ))}\n    </Row>\n  )\n}\n\nexport default Unstaked\n","import { JSBI } from '@luckyswap/v2-sdk'\nimport { ethers, BigNumber } from 'ethers'\nimport React, { useEffect, useState, useRef } from 'react'\nimport { TabPane } from 'reactstrap'\nimport { getMaxBy } from 'utils/array'\nimport { getBigNumber } from 'utils/bigNumber'\nimport { useStakingNFTContract } from '../../hooks/useContract'\nimport notification from './Components/Alert'\nimport { Staked } from './Staked'\nimport { Unstaked } from './Unstaked'\nimport { StakingNFT, NFT } from '../../config/constants/types'\nimport { useActiveWeb3React } from '../../hooks/index'\nimport { foundNFT, findNFT } from '../../utils/array'\n\ninterface WrapPoolsContractProps {\n  myTokens: NFT[]\n  activeTab: string\n}\n\nconst WrapPoolsContract: React.FC<WrapPoolsContractProps> = ({ myTokens, activeTab }) => {\n  const [stakingTokens, setStakingTokens] = useState<StakingNFT[]>([])\n  const [approvedTokens, setApprovedTokens] = useState<StakingNFT[]>([])\n  const [maxDepositAmount, setMaxDepositAmount] = useState<JSBI>(JSBI.BigInt(0))\n  const isInitial = useRef<boolean>(false)\n  const { account } = useActiveWeb3React()\n\n  const stakingNFTContract = useStakingNFTContract()\n\n  useEffect(() => {\n    const getTokens = async () => {\n      if (stakingNFTContract) {\n        stakingNFTContract\n          .getAllPools()\n          .then((response: StakingNFT[]) => {\n            const formatted = response.map((item) => ({\n              ...item,\n              tokenID: (item.tokenID as any).toNumber(),\n              createdAt: new Date((item.createdAt as unknown as number) * 1000),\n            }))\n\n            setApprovedTokens(\n              formatted.filter(\n                (token) =>\n                  token.owner === ethers.constants.AddressZero &&\n                  foundNFT(myTokens, token.contractAddress, token.tokenID),\n              ),\n            )\n            setStakingTokens(formatted.filter((token) => token.owner === account))\n          })\n          .catch((error) => notification('error', { message: 'Error', description: error?.message }))\n      }\n    }\n\n    if (\n      account &&\n      myTokens.length > 0 &&\n      stakingNFTContract &&\n      (activeTab === '3' || activeTab === '4') &&\n      !isInitial.current\n    ) {\n      getTokens()\n      isInitial.current = true\n    }\n  }, [stakingNFTContract, account, myTokens, isInitial, activeTab])\n\n  useEffect(() => {\n    const max = getMaxBy(approvedTokens, 'depositAmount')\n    setMaxDepositAmount(getBigNumber(max))\n  }, [approvedTokens])\n\n  const changeViewWhenStake = ({ tokenID, contractAddress }) => {\n    setApprovedTokens((prevState) =>\n      prevState.filter((token) => token.tokenID !== tokenID && token.contractAddress !== contractAddress),\n    )\n    setStakingTokens((prevState) => [\n      ...prevState,\n      { ...findNFT(approvedTokens, contractAddress, tokenID), owner: account, createdAt: new Date(Date.now()) },\n    ])\n  }\n\n  const changeViewWhenWidthdraw = ({ tokenID, contractAddress }) => {\n    setStakingTokens((prevState) =>\n      prevState.filter((token) => token.tokenID !== tokenID && token.contractAddress !== contractAddress),\n    )\n    setApprovedTokens((prevState) => [\n      ...prevState,\n      {\n        ...findNFT(stakingTokens, contractAddress, tokenID),\n        owner: ethers.constants.AddressZero,\n      },\n    ])\n  }\n\n  return (\n    <>\n      <TabPane tabId=\"3\">\n        {approvedTokens.length > 0 && (\n          <Unstaked\n            changeViewWhenStake={changeViewWhenStake}\n            approvedTokens={approvedTokens}\n            maxDepositAmount={maxDepositAmount}\n          />\n        )}\n      </TabPane>\n\n      <TabPane tabId=\"4\">\n        {stakingTokens.length > 0 && (\n          <Staked changeViewWhenWithdraw={changeViewWhenWidthdraw} stakingTokens={stakingTokens} />\n        )}\n      </TabPane>\n    </>\n  )\n}\n\nexport default WrapPoolsContract\n","// import axios from 'axios'\nimport Page from 'components/layout/Page'\nimport React, { useState } from 'react'\nimport { TabContent, TabPane } from 'reactstrap'\nimport styled from 'styled-components'\nimport NavBar from './Components/NavBar'\nimport MyCollection from './MyCollection'\nimport Pending from './Pending'\nimport WrapPoolsContract from './WrapPoolsContract'\nimport { NFT } from '../../config/constants/types'\n\nconst StakingNft: React.FC = () => {\n  const [activeTab, setActiveTab] = useState<string>('1')\n  const [myTokens, setMyTokens] = useState<NFT[]>([])\n  const toggle = (tab: string) => {\n    if (activeTab !== tab) setActiveTab(tab)\n  }\n\n  return (\n    <Page>\n      <StakingPage>\n        <NavBar activeTab={activeTab} toggle={toggle} />\n        <TabContent activeTab={activeTab}>\n          <TabPane tabId=\"1\">\n            <MyCollection activeTab={activeTab} setMyTokens={setMyTokens} />\n          </TabPane>\n\n          <TabPane tabId=\"2\">\n            <Pending activeTab={activeTab} />\n          </TabPane>\n\n          <WrapPoolsContract activeTab={activeTab} myTokens={myTokens} />\n        </TabContent>\n      </StakingPage>\n    </Page>\n  )\n}\n\nconst StakingPage = styled.div`\n  .align-center {\n    display: unset;\n\n    @media (min-width: 768px) {\n      display: flex;\n      justify-content: center;\n    }\n\n    &:hover {\n      cursor: pointer;\n\n      .thumb {\n        transform: scale(0.9);\n        transition: all 0.9s;\n      }\n\n      .effect-light {\n        text-align: center;\n        font-size: 1.2em;\n        color: #fff;\n        font-weight: 700;\n        text-transform: uppercase;\n        animation: blur 0.75s ease-out infinite;\n        text-shadow: 0px 0px 5px #fff, 0px 0px 7px #fff;\n      }\n    }\n  }\n\n  .space-mb {\n    margin-bottom: 40px;\n\n    @media (max-width: 768px) {\n      margin-bottom: 40px;\n      padding-bottom: 40px;\n      border-bottom: 1px solid #ffffff57;\n\n      &:last-child {\n        border: none;\n      }\n    }\n  }\n`\n\nexport default StakingNft\n"],"sourceRoot":""}