{"version":3,"sources":["utils/formatBalance.ts","components/UnlockButton.tsx","config/index.ts","utils/callHelpers.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/Tooltip/Tooltip.tsx","hooks/useApprove.ts","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","hooks/useHarvest.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","components/UnlockButtonFarm.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/Select/Select.tsx","views/Farms/Farms.tsx","utils/apy.ts"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","UnlockButton","props","TranslateString","useI18n","useAuth","login","logout","onPresentConnectModal","useWalletModal","className","onClick","config","EXPONENTIAL_AT","DECIMAL_PLACES","CAKE_PER_BLOCK","BLOCKS_PER_YEAR","BASE_EXCHANGE_URL","BASE_ADD_LIQUIDITY_URL","LOTTERY_MAX_NUMBER_OF_TICKETS","LOTTERY_TICKET_PRICE","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","enterStaking","times","toString","gas","on","tx","transactionHash","deposit","sousStake","sousChefContract","sousStakeBnb","value","unstake","leaveStaking","withdraw","sousUnstake","emergencyWithdraw","sousEmergencyUnstake","harvest","soushHarvest","soushHarvestBnb","StyledSpacer","styled","div","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","Wrapper","primary","ExpandableSectionButton","expanded","aria-label","role","color","bold","defaultProps","TooltipContent","zIndices","modal","Container","Tooltip","content","useApprove","dispatch","useAppDispatch","useWeb3React","useMasterchef","onApprove","useCallback","fetchFarmUserDataAsync","useLotteryApprove","cakeContract","useCake","lotteryContract","useLottery","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","href","name","CoreTag","variant","outline","startIcon","CommunityTag","DualTag","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","split","useStake","onStake","txHash","console","info","useUnstake","onUnstake","StyledTokenInput","input","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","inputTitle","isBalanceZero","parseFloat","style","position","isWarning","pl","fontSize","toLocaleString","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","handleChange","e","currentTarget","handleSelectMax","title","disabled","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","useModal","onPresentDeposit","onPresentWithdraw","useHarvest","farmPid","onReward","HarvestAction","earnings","rawEarningsBalance","Action","CardActions","farm","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","allowance","lpAddress","getAddress","lpName","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","getBep20Contract","handleApprove","error","textTransform","pr","mt","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","apy","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","event","stopPropagation","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","communityFarms","includes","token","toLocaleLowerCase","liquidity","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","liquidityUrlPathParts","quoteToken","display","CardActionsContainer","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","Amount","span","earned","textDisabled","Earned","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","MultiplierWrapper","Multiplier","displayMultiplier","toLowerCase","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","userData","earningsBigNumber","usePriceCakeBusd","earningsBusd","multipliedBy","useCountUp","start","end","duration","separator","countUp","update","updateValue","useRef","masterchefContract","useFarmsContract","_onReward","args","gasLimit","then","response","log","catch","useEffect","current","_onStake","_onUnstake","useApproveCallbackCustom","masterChef","approval","onAttemptToApprove","lg","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","apr","isActive","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","setActionPanelToggled","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","ref","row","original","scrollIntoView","behavior","InputWrapper","SearchInput","setToggled","inputEl","onBlur","DropDownHeader","shadows","inset","inputSecondary","DropDownListContainer","dropdown","DropDownContainer","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","option","offsetWidth","offsetHeight","ControlContainer","LabelWrapper","FilterContainer","Header","gradients","bubblegum","Farms","path","useRouteMatch","pathname","useLocation","farmsLP","useFarms","query","setQuery","TABLE","viewMode","sortOption","setSortOption","prices","useGetApiPrices","fastRefresh","useRefresh","stakedOnly","activeFarms","filter","inactiveFarms","stakedOnlyFarms","stakedInactiveFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPY","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","poolWeight","cakePriceUsd","poolLiquidityUsd","isNaN","isFinite","getFarmApy","lowercaseQuery","farmsStaked","rowData","farms","orderBy","slice","sortFarms","as","Page","marginLeft","target","sort","b","exact","renderContent"],"mappings":"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","file":"static/js/11.a96fd202.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@luckyswap/uikit'\nimport useAuth from 'hooks/useAuth'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <div className=\"custom-btn\">\n      <Button onClick={onPresentConnectModal} {...props}>\n        {TranslateString(292, 'Unlock Wallet')}\n      </Button>\n    </div>\n  )\n}\n\nexport default UnlockButton\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const BSC_BLOCK_TIME = 3\n\n// CAKE_PER_BLOCK details\n// 40 CAKE is minted per block\n// 18 CAKE per block is sent to Burn pool (A farm just for burning cake)\n// 10 CAKE per block goes to Bestay syrup pool\n// 12 CAKE per block goes to Yield farms and lottery\n// CAKE_PER_BLOCK in config/index.ts = 40 as we only change the amount sent to the burn pool which is effectively a farm.\n// CAKE/Block in components/CakeStats.tsx = 22 (40 - Amount sent to burn pool)\n\nexport const CAKE_PER_BLOCK = new BigNumber(40)\nexport const BLOCKS_PER_YEAR = new BigNumber((60 / BSC_BLOCK_TIME) * 60 * 24 * 365) // 10512000\nexport const BASE_URL = 'https://pancakeswap.finance'\nexport const BASE_EXCHANGE_URL = 'https://exchange.finance'\nexport const BASE_ADD_LIQUIDITY_URL = `${BASE_EXCHANGE_URL}/#/add`\nexport const BASE_LIQUIDITY_POOL_URL = `${BASE_EXCHANGE_URL}/#/pool`\nexport const LOTTERY_MAX_NUMBER_OF_TICKETS = 50\nexport const LOTTERY_TICKET_PRICE = 1\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 200000, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals = 18, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0x453a75908fb5a36d482d5f8fe88eca836f32ead5') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 200000, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? TranslateString(1066, 'Hide') : TranslateString(658, 'Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface TooltipProps {\n  content: React.ReactNode\n  className?: string\n}\n\nconst TooltipContent = styled.div`\n  background:#FAF9FA;\n  padding: 16px;\n  border-radius: 16px;\n  color: #fff;\n  width: max-content;\n  display: none;\n  max-height: 500px;\n  z-index: ${({ theme }) => theme.zIndices.modal};\n  position: absolute;\n  bottom: calc(100% + 16px);\n  transform: translate(34px, 0);\n  right: 0;\n  max-width: 246px;\n\n  &:after {\n    content: '';\n    display: block;\n    width: 0;\n    height: 0;\n    border-left: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-top: 10px solid #FAF9FA;\n    bottom: 0;\n    position: absolute;\n    transform: translate(-34px, 9px);\n    right: 0;\n  }\n`\n\nconst Container = styled.div`\n  position: relative;\n\n  &:hover ${TooltipContent}, &:focus-within ${TooltipContent} {\n    display: block;\n  }\n`\n\nconst Tooltip: React.FunctionComponent<TooltipProps> = ({ content, children, className }) => {\n  return (\n    <Container>\n      {children}\n      <TooltipContent className={className}>{content}</TooltipContent>\n    </Container>\n  )\n}\n\nexport default Tooltip\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account) as any) \n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account)as any) \n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  translationId: number\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APY: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    translationId: 999,\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    translationId: 999,\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal } from '@luckyswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(354, 'Total Liquidity')}:</Text>\n        <Text>{totalValueFormatted}</Text>\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>\n          {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\n        </StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@luckyswap/uikit'\n\nconst CoreTag = (props) => (\n  <Tag className=\"line\" variant=\"secondary\" outline startIcon={<VerifiedIcon color=\"secondary\" />} {...props}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = (props) => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon color=\"secondary\" />} {...props}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = (props) => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon color=\"secondary\" />} {...props}>\n    Binance\n  </Tag>\n)\n\nconst DualTag = (props) => (\n  <Tag variant=\"textSubtle\" outline {...props}>\n    Dual\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@luckyswap/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account)as any) \n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account)as any) \n      dispatch(updateUserBalance(sousId, account)as any) \n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmergencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account)as any) \n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23, 78]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account)as any) \n      dispatch(updateUserBalance(sousId, account)as any) \n      dispatch(updateUserPendingReward(sousId, account)as any) \n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: none;\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  color: #fff;\n  a {\n    display: inline;\n    color: #fff;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const TranslateString = useI18n()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\" className=\"btn-supply\">\n            {TranslateString(452, 'Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          No tokens to stake:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {TranslateString(999, 'get')} {symbol}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@luckyswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={TranslateString(1070, 'Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {TranslateString(999, 'Get')} {tokenName}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@luckyswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={TranslateString(588, 'Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account)as any) \n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account)as any) \n    dispatch(updateUserBalance(sousId, account)as any) \n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useWeb3React } from '@web3-react/core'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {TranslateString(562, 'Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { provider as ProviderType } from 'web3-core'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { Button, Flex, Text } from '@luckyswap/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApprove } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  provider?: ProviderType\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = getAddress(lpAddresses)\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const web3 = useWeb3()\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(758, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1072, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1074, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: number\n  addLiquidityUrl?: string\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  cakePrice,\n  apy,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy: apy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy: apy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy: apy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({\n    numberOfDays: 365,\n    farmApy: apy,\n    cakePrice,\n  })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(860, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(858, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(864, 'CAKE per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          866,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={addLiquidityUrl}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@luckyswap/uikit'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apy, addLiquidityUrl }) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal lpLabel={lpLabel} cakePrice={cakePrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@luckyswap/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider as ProviderType } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: number\n  liquidity?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 32px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  provider?: ProviderType\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const isCommunityFarm = communityFarms.includes(farm.token.symbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n\n  const totalValueFormatted = farm.liquidity\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CAKE'\n\n  const farmAPY = farm.apy && farm.apy.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n\n  return (\n    <FCard>\n      {farm.token.symbol === 'CAKE' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={isCommunityFarm}\n        farmImage={farmImage}\n        tokenSymbol={farm.token.symbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(736, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={farm.apy} />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={`https://testnet.bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport useI18n from 'hooks/useI18n'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apy={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>{TranslateString(656, 'Loading...')}</AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { Text, Image } from '@luckyswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  image: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const TranslateString = useI18n()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          {TranslateString(999, 'FARMING')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedProps> = ({ earnings }) => {\n  const { account } = useWeb3React()\n  const amountEarned = account ? earnings : null\n\n  const displayBalance = amountEarned ? amountEarned.toLocaleString() : '?'\n  return <Amount earned={amountEarned}>{displayBalance}</Amount>\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const TranslateString = useI18n()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && TranslateString(658, 'Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <Tooltip\n        content={\n          <div>\n            {TranslateString(999, 'The multiplier represents the amount of CAKE rewards each farm gets.')}\n            <br />\n            <br />\n            {TranslateString(\n              999,\n              'For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.',\n            )}\n          </div>\n        }\n      >\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface LiquidityProps {\n  liquidity: number\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity = liquidity\n    ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <Tooltip content={TranslateString(999, 'The total value of the funds in this farm’s liquidity pool')}>\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid #2b2c3a;\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button } from '@luckyswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useHarvest } from 'hooks/useHarvest'\nimport useI18n from 'hooks/useI18n'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useCountUp } from 'react-countup'\nimport { useFarmsContract } from 'hooks/useContract'\n\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\n\nconst HarvestAction: React.FunctionComponent<FarmWithStakedValue> = ({ pid, userData }) => {\n  const { account } = useWeb3React()\n  const earningsBigNumber = userData && account ? new BigNumber(userData.earnings) : null\n  const cakePrice = usePriceCakeBusd()\n  let earnings = null\n  let earningsBusd = 0\n  let displayBalance = '?'\n\n  if (earningsBigNumber) {\n    earnings = getBalanceNumber(earningsBigNumber)\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const TranslateString = useI18n()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n  const masterchefContract: any = useFarmsContract()\n\n  async function _onReward() {\n    if (masterchefContract) {\n      const args = [pid, new BigNumber(0).times(new BigNumber(10).pow(18)).toString()]\n      await masterchefContract\n        .deposit(...args, { gasLimit: 200000 })\n        .then((response: any) => {\n          console.log('response>>', response)\n        })\n        .catch((error: any) => {\n          // setAttempting(false)\n          console.log(error)\n        })\n    }\n  }\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>BES </Title>\n        <Subtle>{TranslateString(999, 'EARNED')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          <Staked>~{countUp}USD</Staked>\n        </div>\n        <Button\n          disabled={!earnings || pendingTx || !account}\n          onClick={async () => {\n            setPendingTx(true)\n            await _onReward()\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n        >\n          {TranslateString(562, 'Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React from 'react'\nimport { Button, useWalletModal } from '@luckyswap/uikit'\nimport useAuth from 'hooks/useAuth'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <div className=\"custom-btn-farm\">\n      <Button onClick={onPresentConnectModal} {...props}>\n        {TranslateString(292, 'Unlock Wallet')}\n      </Button>\n    </div>\n  )\n}\n\nexport default UnlockButton\n","import React, { useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon } from '@luckyswap/uikit'\nimport UnlockButton from 'components/UnlockButtonFarm'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser } from 'state/hooks'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useI18n from 'hooks/useI18n'\nimport { useFarmsContract } from 'hooks/useContract'\nimport { useApprove } from 'hooks/useApprove'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApproveCallbackCustom, ApprovalState } from 'hooks/useApproveCallback'\nimport address from 'config/constants/contracts'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\nconst Staked: React.FunctionComponent<FarmWithStakedValue> = ({ pid, lpSymbol, lpAddresses, quoteToken, token }) => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  // const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const web3 = useWeb3()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={(amount) => _onStake(amount)}\n      tokenName={lpSymbol}\n      addLiquidityUrl={addLiquidityUrl}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={(amount) => _onUnstake(amount)} tokenName={lpSymbol} />,\n  )\n  const [approval] = useApproveCallbackCustom(lpAddress, address.masterChef[97])\n\n  async function onAttemptToApprove() {\n    return approval()\n  }\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onAttemptToApprove()\n    } catch (e) {\n      console.error(e)\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [approval, setRequestedApproval])\n\n  \n  const masterchefContract: any = useFarmsContract()\n\n  async function _onStake(amount) {\n    if (masterchefContract) {\n      const args = [pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()]\n      await masterchefContract\n        .deposit(...args, { gasLimit: 200000 })\n        .then((response: any) => {\n          console.log('response>>', response)\n        })\n        .catch((error: any) => {\n          // setAttempting(false)\n          console.log(error)\n        })\n    }\n  }\n\n  async function _onUnstake(amount) {\n    if (masterchefContract) {\n      const args = [pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()]\n      await masterchefContract\n        .withdraw(...args, { gasLimit: 200000 })\n        .then((response: any) => {\n          console.log('response>>', response)\n        })\n        .catch((error: any) => {\n          // setAttempting(false)\n          console.log(error)\n        })\n    }\n  }\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle color=\"#2b2c3a\">{TranslateString(999, 'START FARMING')}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (rawStakedBalance) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{lpSymbol} </Title>\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance}</Earned>\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\n          <Title>{lpSymbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" onClick={onPresentDeposit} variant=\"secondary\">\n            {TranslateString(999, 'Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {TranslateString(999, 'Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { LinkExternal, Text } from '@luckyswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { communityFarms } from 'config/constants'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst Container = styled.div`\n  background-color: transparent !important;\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n    background-color: transparent !important;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n  color: #2b2c3a;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({ details, apr, multiplier, liquidity }) => {\n  const farm = details\n\n  const TranslateString = useI18n()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = `https://testnet.bscscan.com/address/${lpAddress}`\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\n  const isCommunityFarm = communityFarms.includes(token.symbol)\n\n  return (\n    <Container>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://exchange.finance/#/add/${liquidityUrlPathParts}`}>\n              {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc} color=\"#2b2c3a\">{TranslateString(999, 'View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href=\"#\">{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{TranslateString(736, 'APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} />\n        <StakedAction {...farm} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid #2b2c3a;\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowProps> = (props) => {\n  const { details } = props\n  const [actionPanelToggled, setActionPanelToggled] = useState(false)\n  const TranslateString = useI18n()\n\n  const toggleActionPanel = () => {\n    setActionPanelToggled(!actionPanelToggled)\n  }\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel} className=\"table-color\">\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelToggled} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={TranslateString(736, 'APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\n                      >\n                        {React.createElement(cells[key], props[key])}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={TranslateString(1072, 'Earned')}>\n                <Earned {...props.earned} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={TranslateString(736, 'APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelToggled} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {actionPanelToggled && details && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  /* background: ${({ theme }) => theme.card.background}; */\n  background-color: #ffffff63;\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const TranslateString = useI18n()\n  const { data, columns } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {TranslateString(999, 'To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React, { useState, useRef } from 'react'\nimport { Input } from '@luckyswap/uikit'\nimport styled from 'styled-components'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 234px;\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInput: React.FC<Props> = ({ value, onChange }) => {\n  const [toggled, setToggled] = useState(false)\n  const inputEl = useRef(null)\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          className=\"input-search\"\n          ref={inputEl}\n          value={value}\n          onChange={onChange}\n          placeholder=\"Search farms\"\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Text } from '@luckyswap/uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\n  cursor: pointer;\n  width: ${({ width }) => width}px;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps {\n  options: OptionProps[]\n  onChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\n  const containerRef = useRef(null)\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(options[0])\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\n\n  const toggling = () => setIsOpen(!isOpen)\n\n  const onOptionClicked = (option: OptionProps) => () => {\n    setSelectedOption(option)\n    setIsOpen(false)\n\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  useEffect(() => {\n    setContainerSize({\n      width: dropdownRef.current.offsetWidth, // Consider border\n      height: dropdownRef.current.offsetHeight,\n    })\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\n      {containerSize.width !== 0 && (\n        <DropDownHeader onClick={toggling}>\n          <Text color=\"#fff\">{selectedOption.label}</Text>\n        </DropDownHeader>\n      )}\n      <ArrowDropDownIcon color=\"#fff\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option) =>\n            option.label !== selectedOption.label ? (\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\n                <Text color=\"#fff\">{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport { orderBy } from 'lodash'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Text } from '@luckyswap/uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from '../../state/hooks'\nimport useRefresh from '../../hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from '../../state/actions'\nimport { Farm } from '../../state/types'\nimport useI18n from '../../hooks/useI18n'\nimport { getBalanceNumber } from '../../utils/formatBalance'\nimport { getFarmApy } from '../../utils/apy'\nimport { useAppDispatch } from '../../state'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport SearchInput from './components/SearchInput'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport Select, { OptionProps } from './components/Select/Select'\nimport { getAddress } from '../../utils/addressHelpers'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\n\nconst Header = styled.div`\n  padding: 32px 0px;\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useState(ViewMode.TABLE)\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const prices = useGetApiPrices()\n\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account)as any) \n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n  const isActive = !pathname.includes('history')\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n    switch (sortOption) {\n      case 'apr':\n        return orderBy(farms, (farm: FarmWithStakedValue) => farm.apy, 'desc')\n      case 'multiplier':\n        return orderBy(\n          farms,\n          (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\n      case 'liquidity':\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n      default:\n        return farms\n    }\n  }\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !prices) {\n          return farm\n        }\n\n        const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n        const apy = isActive ? getFarmApy(farm.poolWeight, cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apy, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = query.toLowerCase()\n        farmsToDisplayWithAPY = farmsToDisplayWithAPY.filter((farm: FarmWithStakedValue) => {\n          return farm.lpSymbol.toLowerCase().includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPY\n    },\n    [cakePrice, prices, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  let farmsStaked = []\n  if (isActive) {\n    farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n  } else {\n    farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n  }\n\n  farmsStaked = sortFarms(farmsStaked)\n  const rowData = farmsStaked.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apy && farm.apy.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apy,\n      },\n      farm: {\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: farm.userData ? getBalanceNumber(new BigNumber(farm.userData.earnings)) : null,\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <Header>\n        <Heading as=\"h1\" size=\"xxl\" color=\"#2b2c3a\" mb=\"24px\">\n          {TranslateString(674, 'Farms')}\n        </Heading>\n        <Heading size=\"lg\" color=\"#2b2c3a\">\n          {TranslateString(999, 'Stake Liquidity Pool (LP) tokens to earn.')}\n        </Heading>\n      </Header>\n      <Page>\n        <ControlContainer>\n          {/* <ViewControls>\n              <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n              <ToggleWrapper>\n                <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n                <Text color=\"#2b2c3a\"> {TranslateString(1116, 'Staked only')}</Text>\n              </ToggleWrapper>\n            <FarmTabButtons />\n          </ViewControls> */}\n          <FilterContainer>\n            <LabelWrapper>\n              <Text color=\"#fff\">SORT BY</Text>\n              <Select\n                options={[\n                  {\n                    label: 'Hot',\n                    value: 'hot',\n                  },\n                  {\n                    label: 'APR',\n                    value: 'apr',\n                  },\n                  {\n                    label: 'Multiplier',\n                    value: 'multiplier',\n                  },\n                  {\n                    label: 'Earned',\n                    value: 'earned',\n                  },\n                  {\n                    label: 'Liquidity',\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text color=\"#fff\">SEARCH</Text>\n              <SearchInput onChange={handleChangeQuery} value={query} />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n","import BigNumber from 'bignumber.js'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK } from 'config'\n\n/**\n * Get the APY value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APY is NaN or infinite.\n */\nexport const getPoolApy = (\n  stakingTokenPrice: number,\n  rewardTokenPrice: number,\n  totalStaked: number,\n  tokenPerBlock: number,\n): number => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\n  const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber()\n}\n\n/**\n * Get farm APY value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\nexport const getFarmApy = (poolWeight: BigNumber, cakePriceUsd: BigNumber, poolLiquidityUsd: BigNumber): number => {\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\n  const apy = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber()\n}\n\nexport default null\n"],"sourceRoot":""}