{"version":3,"sources":["components/UnlockButton.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/Tooltip/Tooltip.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","utils/callHelpers.ts","hooks/useStake.ts","hooks/useUnstake.ts","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","hooks/useHarvest.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","components/UnlockButtonFarm.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/Select/Select.tsx","views/Farms/Farms.tsx"],"names":["UnlockButton","props","TranslateString","useI18n","useAuth","login","logout","onPresentConnectModal","useWalletModal","className","variant","onClick","StyledSpacer","styled","div","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","Wrapper","primary","ExpandableSectionButton","expanded","aria-label","role","color","bold","defaultProps","TooltipContent","zIndices","modal","Container","Tooltip","content","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","href","name","CoreTag","outline","startIcon","CommunityTag","DualTag","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","split","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","enterStaking","BigNumber","times","pow","toString","gas","on","tx","transactionHash","deposit","unstake","leaveStaking","withdraw","harvest","useStake","dispatch","useAppDispatch","useWeb3React","useMasterchef","onStake","useCallback","txHash","fetchFarmUserDataAsync","console","info","useUnstake","onUnstake","StyledTokenInput","input","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","displayBalance","parseFloat","toFixed","style","position","isWarning","pl","fontSize","toLocaleString","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","useHarvest","farmPid","onReward","HarvestAction","earnings","rawEarningsBalance","Action","CardActions","farm","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","allowance","lpAddress","getAddress","lpName","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","onApprove","useApprove","getBep20Contract","handleApprove","error","textTransform","pr","mt","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","apy","oneThousandDollarsWorthOfCake","toNumber","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","event","stopPropagation","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","communityFarms","includes","token","toLocaleLowerCase","liquidity","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","liquidityUrlPathParts","quoteToken","BASE_ADD_LIQUIDITY_URL","display","CardActionsContainer","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","Amount","span","earned","textDisabled","Earned","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","MultiplierWrapper","Multiplier","displayMultiplier","toLowerCase","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","userData","earningsBigNumber","usePriceLuckyBusd","earningsBusd","multipliedBy","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","masterchefContract","useFarmsContract","_onReward","args","gasLimit","then","response","log","catch","useEffect","current","_onStake","_onUnstake","useApproveCallbackCustom","masterChef","approval","onAttemptToApprove","lg","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","apr","isActive","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","setActionPanelToggled","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","ref","row","original","scrollIntoView","behavior","InputWrapper","SearchInput","setToggled","inputEl","onBlur","DropDownHeader","shadows","inset","inputSecondary","DropDownListContainer","dropdown","DropDownContainer","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","option","offsetWidth","offsetHeight","ControlContainer","LabelWrapper","FilterContainer","Header","Farms","path","useRouteMatch","pathname","useLocation","farmsLP","useFarms","query","setQuery","TABLE","viewMode","chainId","sortOption","setSortOption","prices","useGetApiPrices","fastRefresh","useRefresh","stakedOnly","activeFarms","filter","inactiveFarms","stakedOnlyFarms","stakedInactiveFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPY","lpTotalInQuoteToken","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","ChainId","BSCTESTNET","MAINNET","to","farmsStaked","rowData","farms","orderBy","slice","sortFarms","as","Page","fontWeight","marginLeft","target","sort","b","exact","renderContent"],"mappings":"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","file":"static/js/15.7babfe07.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, useWalletModal } from '@luckyswap/uikit'\nimport useAuth from 'hooks/useAuth'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <div className=\"custom-btn\">\n      <Button variant=\"secondary\" onClick={onPresentConnectModal} {...props}>\n        {TranslateString(292, 'Unlock Wallet')}\n      </Button>\n    </div>\n  )\n}\n\nexport default UnlockButton\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? TranslateString(1066, 'Hide') : TranslateString(658, 'Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface TooltipProps {\n  content: React.ReactNode\n  className?: string\n}\n\nconst TooltipContent = styled.div`\n  background: #faf9fa;\n  padding: 16px;\n  border-radius: 16px;\n  color: #000 !important;\n  width: max-content;\n  display: none;\n  max-height: 500px;\n  z-index: ${({ theme }) => theme.zIndices.modal};\n  position: absolute;\n  bottom: calc(100% + 16px);\n  transform: translate(34px, 0);\n  right: 0;\n  max-width: 246px;\n\n  &:after {\n    content: '';\n    display: block;\n    width: 0;\n    height: 0;\n    border-left: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-top: 10px solid #faf9fa;\n    bottom: 0;\n    position: absolute;\n    transform: translate(-34px, 9px);\n    right: 0;\n  }\n`\n\nconst Container = styled.div`\n  position: relative;\n\n  &:hover ${TooltipContent}, &:focus-within ${TooltipContent} {\n    display: block;\n  }\n`\n\nconst Tooltip: React.FunctionComponent<TooltipProps> = ({ content, children, className }) => {\n  return (\n    <Container>\n      {children}\n      <TooltipContent className={className}>{content}</TooltipContent>\n    </Container>\n  )\n}\n\nexport default Tooltip\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  translationId: number\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APY: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    translationId: 999,\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    translationId: 999,\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  // TODO : Improve chain id\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal } from '@luckyswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(354, 'Total Liquidity')}:</Text>\n        <Text>{totalValueFormatted}</Text>\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>\n          {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\n        </StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@luckyswap/uikit'\n\nconst CoreTag = (props) => (\n  <Tag className=\"line\" variant=\"secondary\" outline startIcon={<VerifiedIcon color=\"secondary\" />} {...props}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = (props) => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon color=\"secondary\" />} {...props}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = (props) => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon color=\"secondary\" />} {...props}>\n    Binance\n  </Tag>\n)\n\nconst DualTag = (props) => (\n  <Tag variant=\"textSubtle\" outline {...props}>\n    Dual\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@luckyswap/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 200000, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals = 18, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0x453a75908fb5a36d482d5f8fe88eca836f32ead5') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 200000, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account) as any)\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account) as any)\n      dispatch(updateUserBalance(sousId, account) as any)\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmergencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account) as any)\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23, 78]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account) as any)\n      dispatch(updateUserBalance(sousId, account) as any)\n      dispatch(updateUserPendingReward(sousId, account) as any)\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: none;\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  color: #fff;\n  a {\n    display: inline;\n    color: #fff;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const TranslateString = useI18n()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\" className=\"btn-supply\">\n            {TranslateString(452, 'Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          No tokens to stake:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {TranslateString(999, 'get')} {symbol}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@luckyswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={TranslateString(1070, 'Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          variant=\"success\"\n          width=\"100%\"\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {TranslateString(999, 'Get')} {tokenName}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@luckyswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={TranslateString(588, 'Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          variant=\"success\"\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account) as any)\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account) as any)\n    dispatch(updateUserBalance(sousId, account) as any)\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useWeb3React } from '@web3-react/core'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {TranslateString(562, 'Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { provider as ProviderType } from 'web3-core'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { Button, Flex, Text } from '@luckyswap/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApprove } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  provider?: ProviderType\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = getAddress(lpAddresses)\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const web3 = useWeb3()\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(758, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1072, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1074, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account) as any)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account) as any)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: number\n  addLiquidityUrl?: string\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  cakePrice,\n  apy,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy: apy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy: apy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy: apy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({\n    numberOfDays: 365,\n    farmApy: apy,\n    cakePrice,\n  })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(860, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(858, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(864, 'LUCKY per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          866,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={addLiquidityUrl}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@luckyswap/uikit'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apy, addLiquidityUrl }) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal lpLabel={lpLabel} cakePrice={cakePrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@luckyswap/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider as ProviderType } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: number\n  liquidity?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 10px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 10px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  provider?: ProviderType\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const isCommunityFarm = communityFarms.includes(farm.token.symbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n\n  const totalValueFormatted = farm.liquidity\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CAKE'\n\n  const farmAPY = farm.apy && farm.apy.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n\n  return (\n    <FCard>\n      {farm.token.symbol === 'CAKE' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={isCommunityFarm}\n        farmImage={farmImage}\n        tokenSymbol={farm.token.symbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(736, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={farm.apy} />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={`https://testnet.bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport useI18n from 'hooks/useI18n'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apy={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>{TranslateString(656, 'Loading...')}</AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { Text, Image } from '@luckyswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  image: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const TranslateString = useI18n()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          {TranslateString(999, '')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedProps> = ({ earnings }) => {\n  const { account } = useWeb3React()\n  const amountEarned = account ? earnings : null\n\n  const displayBalance = amountEarned ? amountEarned.toLocaleString() : '?'\n  return <Amount earned={amountEarned}>{displayBalance}</Amount>\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const TranslateString = useI18n()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && TranslateString(658, 'Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <Tooltip\n        content={\n          <div>\n            {TranslateString(999, 'The multiplier represents the amount of LUCKY rewards each farm gets.')}\n            <br />\n            <br />\n            {TranslateString(\n              999,\n              'For example, if a 1x farm was getting 1 LUCKY per block, a 40x farm would be getting 40 LUCKY per block.',\n            )}\n          </div>\n        }\n      >\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface LiquidityProps {\n  liquidity: number\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity = liquidity\n    ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <Tooltip content={TranslateString(999, 'The total value of the funds in this farm’s liquidity pool')}>\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  background: rgb(41 41 41);\n  box-shadow: 0px 0px 11px 0px rgb(29 26 26 / 57%);\n  border-radius: 20px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button } from '@luckyswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useHarvest } from 'hooks/useHarvest'\nimport useI18n from 'hooks/useI18n'\nimport { usePriceLuckyBusd } from 'state/hooks'\nimport { useCountUp } from 'react-countup'\nimport { useFarmsContract } from 'hooks/useContract'\n\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\n\nconst HarvestAction: React.FunctionComponent<FarmWithStakedValue> = ({ pid, userData }) => {\n  const { account } = useWeb3React()\n  const earningsBigNumber = userData && account ? new BigNumber(userData.earnings) : null\n  const cakePrice = usePriceLuckyBusd()\n  let earnings = null\n  let earningsBusd = 0\n  let displayBalance = '?'\n\n  if (earningsBigNumber) {\n    earnings = getBalanceNumber(earningsBigNumber)\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const TranslateString = useI18n()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n  const masterchefContract: any = useFarmsContract()\n\n  async function _onReward() {\n    if (masterchefContract) {\n      const args = [pid, new BigNumber(0).times(new BigNumber(10).pow(18)).toString()]\n      await masterchefContract\n        .deposit(...args, { gasLimit: 200000 })\n        .then((response: any) => {\n          console.log('response>>', response)\n        })\n        .catch((error: any) => {\n          // setAttempting(false)\n          console.log(error)\n        })\n    }\n  }\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>BEST</Title>\n        <Subtle>{TranslateString(999, 'EARNED')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          <Staked>~{countUp}USD</Staked>\n        </div>\n        <Button\n          variant=\"tertiary\"\n          disabled={!earnings || pendingTx || !account}\n          onClick={async () => {\n            setPendingTx(true)\n            await _onReward()\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n        >\n          {TranslateString(562, 'Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React from 'react'\nimport { Button, useWalletModal } from '@luckyswap/uikit'\nimport useAuth from 'hooks/useAuth'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <div className=\"custom-btn-farm\">\n      <Button onClick={onPresentConnectModal} {...props}>\n        {TranslateString(292, 'Unlock Wallet')}\n      </Button>\n    </div>\n  )\n}\n\nexport default UnlockButton\n","import React, { useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon } from '@luckyswap/uikit'\nimport UnlockButton from 'components/UnlockButtonFarm'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser } from 'state/hooks'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useI18n from 'hooks/useI18n'\nimport { useFarmsContract } from 'hooks/useContract'\nimport { useApprove } from 'hooks/useApprove'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApproveCallbackCustom, ApprovalState } from 'hooks/useApproveCallback'\nimport address from 'config/constants/contracts'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\nconst Staked: React.FunctionComponent<FarmWithStakedValue> = ({ pid, lpSymbol, lpAddresses, quoteToken, token }) => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  // const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const web3 = useWeb3()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={(amount) => _onStake(amount)}\n      tokenName={lpSymbol}\n      addLiquidityUrl={addLiquidityUrl}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={(amount) => _onUnstake(amount)} tokenName={lpSymbol} />,\n  )\n  const [approval] = useApproveCallbackCustom(lpAddress, address.masterChef[97])\n\n  async function onAttemptToApprove() {\n    return approval()\n  }\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onAttemptToApprove()\n    } catch (e) {\n      console.error(e)\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [approval, setRequestedApproval])\n\n  const masterchefContract: any = useFarmsContract()\n\n  async function _onStake(amount) {\n    if (masterchefContract) {\n      const args = [pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()]\n      await masterchefContract\n        .deposit(...args, { gasLimit: 200000 })\n        .then((response: any) => {\n          console.log('response>>', response)\n        })\n        .catch((error: any) => {\n          // setAttempting(false)\n          console.log(error)\n        })\n    }\n  }\n\n  async function _onUnstake(amount) {\n    if (masterchefContract) {\n      const args = [pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()]\n      await masterchefContract\n        .withdraw(...args, { gasLimit: 200000 })\n        .then((response: any) => {\n          console.log('response>>', response)\n        })\n        .catch((error: any) => {\n          // setAttempting(false)\n          console.log(error)\n        })\n    }\n  }\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle color=\"#2b2c3a\">{TranslateString(999, 'START FARMING')}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (rawStakedBalance) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{lpSymbol} </Title>\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance}</Earned>\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"success\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton variant=\"success\" onClick={onPresentDeposit}>\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\n          <Title>{lpSymbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" onClick={onPresentDeposit} variant=\"secondary\">\n            {TranslateString(999, 'Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {TranslateString(999, 'Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { LinkExternal, Text } from '@luckyswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { communityFarms } from 'config/constants'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst Container = styled.div`\n  background-color: transparent !important;\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n    background-color: transparent !important;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n  color: #fff;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({ details, apr, multiplier, liquidity }) => {\n  const farm = details\n\n  const TranslateString = useI18n()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = `https://testnet.bscscan.com/address/${lpAddress}`\n  const info = ``\n  const isCommunityFarm = communityFarms.includes(token.symbol)\n\n  return (\n    <Container>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://luckyswap.finance/#/add/${liquidityUrlPathParts}`}>\n              {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc} color=\"#2b2c3a\">\n          {TranslateString(999, 'View Contract')}\n        </StyledLinkExternal>\n        <StyledLinkExternal href=\"#\">{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{TranslateString(736, 'APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} />\n        <StakedAction {...farm} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 1px solid #444444;\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowProps> = (props) => {\n  const { details } = props\n  const [actionPanelToggled, setActionPanelToggled] = useState(false)\n  const TranslateString = useI18n()\n\n  const toggleActionPanel = () => {\n    setActionPanelToggled(!actionPanelToggled)\n  }\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel} className=\"table-color\">\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelToggled} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={TranslateString(736, 'APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\n                      >\n                        {React.createElement(cells[key], props[key])}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={TranslateString(1072, 'Earned')}>\n                <Earned {...props.earned} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={TranslateString(736, 'APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelToggled} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {actionPanelToggled && details && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@luckyswap/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  /* background: ${({ theme }) => theme.card.background}; */\n  background: linear-gradient(45deg, rgb(35 35 35) 30%, rgb(45 45 45) 100%);\n  box-shadow: 0px 0px 11px 0px rgb(16 16 16 / 57%);\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const TranslateString = useI18n()\n  const { data, columns } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {TranslateString(999, 'To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React, { useState, useRef } from 'react'\nimport { Input } from '@luckyswap/uikit'\nimport styled from 'styled-components'\n\nconst StyledInput = styled(Input)`\n  border-radius: 20px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 234px;\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInput: React.FC<Props> = ({ value, onChange }) => {\n  const [toggled, setToggled] = useState(false)\n  const inputEl = useRef(null)\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          className=\"input-search\"\n          ref={inputEl}\n          value={value}\n          onChange={onChange}\n          placeholder=\"Search farms\"\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Text } from '@luckyswap/uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\n  cursor: pointer;\n  width: ${({ width }) => width}px;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: #808080;\n  }\n`\n\nexport interface SelectProps {\n  options: OptionProps[]\n  onChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\n  const containerRef = useRef(null)\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(options[0])\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\n\n  const toggling = () => setIsOpen(!isOpen)\n\n  const onOptionClicked = (option: OptionProps) => () => {\n    setSelectedOption(option)\n    setIsOpen(false)\n\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  useEffect(() => {\n    setContainerSize({\n      width: dropdownRef.current.offsetWidth, // Consider border\n      height: dropdownRef.current.offsetHeight,\n    })\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\n      {containerSize.width !== 0 && (\n        <DropDownHeader onClick={toggling}>\n          <Text color=\"#fff\">{selectedOption.label}</Text>\n        </DropDownHeader>\n      )}\n      <ArrowDropDownIcon color=\"#fff\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option) =>\n            option.label !== selectedOption.label ? (\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\n                <Text color=\"#fff\">{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch, useLocation, Redirect } from 'react-router-dom'\nimport { orderBy } from 'lodash'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Text } from '@luckyswap/uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { ChainId } from '@luckyswap/v2-sdk'\nimport { useFarms, usePriceLuckyBusd, useGetApiPrices } from '../../state/hooks'\nimport useRefresh from '../../hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from '../../state/actions'\nimport { Farm } from '../../state/types'\nimport useI18n from '../../hooks/useI18n'\nimport { getBalanceNumber } from '../../utils/formatBalance'\nimport { getFarmApr } from '../../utils/apy'\nimport { useAppDispatch } from '../../state'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport SearchInput from './components/SearchInput'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport Select, { OptionProps } from './components/Select/Select'\nimport { getAddress } from '../../utils/addressHelpers'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\n\nconst Header = styled.div`\n  padding: 32px 0px;\n  background: url('../images/bg-farm-mobile.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  width: 100%;\n  height: 350px;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  padding-left: 50px;\n\n  @media (min-width: 768px) {\n    background: url('../images/bg-farm.png');\n    background-repeat: no-repeat;\n    background-position: unset;\n    background-size: cover;\n    padding-left: 120px;\n  }\n`\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceLuckyBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useState(ViewMode.TABLE)\n  const { account, chainId } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const prices = useGetApiPrices()\n\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account) as any)\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const isActive = !pathname.includes('history')\n\n  const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n    switch (sortOption) {\n      case 'apr':\n        return orderBy(farms, (farm: FarmWithStakedValue) => farm.apy, 'desc')\n      case 'multiplier':\n        return orderBy(\n          farms,\n          (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\n      case 'liquidity':\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n      default:\n        return farms\n    }\n  }\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !prices) {\n          return farm\n        }\n\n        const quoteTokenPriceUsd = 361 // TODO: This will handel API get price BUSD/BNB\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n        const apy = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apy, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = query.toLowerCase()\n        farmsToDisplayWithAPY = farmsToDisplayWithAPY.filter((farm: FarmWithStakedValue) => {\n          return farm.lpSymbol.toLowerCase().includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPY\n    },\n    [cakePrice, prices, query, isActive],\n  )\n\n  if (chainId && chainId !== ChainId.BSCTESTNET && chainId !== ChainId.MAINNET) {\n    return <Redirect to=\"/\" />\n  }\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  let farmsStaked = []\n  if (isActive) {\n    farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n  } else {\n    farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n  }\n\n  farmsStaked = sortFarms(farmsStaked)\n  const rowData = farmsStaked.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apy && farm.apy.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apy,\n      },\n      farm: {\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: farm.userData ? getBalanceNumber(new BigNumber(farm.userData.earnings)) : null,\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <Header>\n        <Heading as=\"h1\" size=\"xxl\" color=\"#fff\" mb=\"24px\">\n          {TranslateString(674, 'Farms')}\n        </Heading>\n        <Heading size=\"lg\" color=\"#fff\">\n          {TranslateString(999, 'Stake Liquidity Pool (LP) tokens to earn.')}\n        </Heading>\n      </Header>\n      <Page>\n        <ControlContainer>\n          {/* <ViewControls>\n              <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n              <ToggleWrapper>\n                <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n                <Text color=\"#2b2c3a\"> {TranslateString(1116, 'Staked only')}</Text>\n              </ToggleWrapper>\n            <FarmTabButtons />\n          </ViewControls> */}\n          <FilterContainer>\n            <LabelWrapper>\n              <Text color=\"#fff\" fontWeight=\"600\" fontSize=\"16px\">\n                SORT BY\n              </Text>\n              <Select\n                options={[\n                  {\n                    label: 'Hot',\n                    value: 'hot',\n                  },\n                  {\n                    label: 'APR',\n                    value: 'apr',\n                  },\n                  {\n                    label: 'Multiplier',\n                    value: 'multiplier',\n                  },\n                  {\n                    label: 'Earned',\n                    value: 'earned',\n                  },\n                  {\n                    label: 'Liquidity',\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text color=\"#fff\" fontWeight=\"600\" fontSize=\"16px\">\n                SEARCH\n              </Text>\n              <SearchInput onChange={handleChangeQuery} value={query} />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}